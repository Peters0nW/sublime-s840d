%YAML 1.2
# The MIT License (MIT)
#
# Copyright (c) 2016 DeathAxe <deathaxe82@googlemail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
###############################################################################
---
name: S840D RunMyHmi
file_extensions:
  - com
scope: source.s840d_hmi

###############################################################################

variables:
  softkey: \b(?i:[HV]S[1-8]|RECALL)\b

###############################################################################
# MAIN CONTEXT
###############################################################################

contexts:

  main:
    - include: comment

    # archive header pragma is invalid in this context
    - match: '%\w+'
      scope: invalid.illegal

    # file contains EasyScreen/RunMyHmi
    - match: (?=//[ABGMS]\b)
      push:
        - include: comment
        - include: class-dialog
        - include: class-menu
        - include: class-array
        - include: class-block
        - include: class-grid
        # required for embedding in s840d_arc
        - match: (?=%)
          pop: true

    # file contains list of strings
    - match: (?=\d{1,6}\s+[01]\s+[01]\s+\".*?\")
      push:
        - meta_content_scope: meta.stringlist
        - include: comment
        - match: \b\d+\b
          scope: support.variable.textid
          push:
            - match: \b\d\b
              scope: comment.block
            - include: string
            - include: line-end
        # required for embedding in s840d_arc
        - match: (?=%)
          pop: true

###############################################################################
# ARRAY
#   top-level entity
#
#   //A(NAME)
#     (col1 / col2 / ...)
#     (col1 / col2 / ...)
#      ...
#   //END
###############################################################################

  class-array:
    - match: //[Aa]\b
      scope: keyword.class.begin
      push:
        - meta_scope: meta.class.array
        - match: \(
          scope: punctuation.definition.parameters.begin
          set:
            - match: \)|$
              scope: punctuation.definition.parameters.end
              set: class-array-body
            - include: class-name
        - include: illegal-pop

  class-array-body:
    - meta_scope: meta.class.array
    - include: class-end
    - match: \(
      scope: punctuation.definition.array.row.begin
      push:
        - meta_scope: meta.class.array.row
        - match: \)|$
          scope: punctuation.definition.array.row.end
          pop: true
        - match: /
          scope: punctuation.definition.seperator
        - include: string
        - include: number
        - include: boolean
        - include: illegal
    - include: illegal

###############################################################################
# BLOCK
#   top-level entity
#
#   //B(NAME)
#   ...
#   //END
###############################################################################

  class-block:
    - match: //[Bb]\b
      scope: keyword.class.begin
      push:
        - meta_scope: meta.class.subprogram
        - match: \(
          scope: punctuation.definition.parameters.begin
          set:
            - match: \)|$
              scope: punctuation.definition.parameters.end
              set: class-block-body
            - include: class-name
        - include: illegal-pop

  class-block-body:
    - meta_scope: meta.class.subprogram
    - include: class-end
    - include: def-method-sub
    - include: illegal

###############################################################################
# GRID
#   top-level entity
#
#   A column definition is wideley equal to a normal variable definition and
#   requires the following entries.
#   (type/min,max//description,column title/attribute/picture/
#    variable/column width/Offset1, Offset2, Offset3)
#
#   //G(NAME)
#   (../../..)  ; column 1
#   (../../..)  ; column 2
#   ...
#   //END
###############################################################################

  class-grid:
    - match: //[Gg]\b
      scope: keyword.class.begin
      push:
        - meta_scope: meta.class.grid
        - match: \(
          scope: punctuation.definition.parameters.begin
          set: class-grid-attr-name
        - include: class-grid-attr-end

  class-grid-attr-name:
    - match: /
      scope: punctuation.definition.seperator
      set: class-grid-attr-type
    - include: class-name
    - include: class-grid-attr-end

  class-grid-attr-type:
    - match: /
      scope: punctuation.definition.seperator
      set: class-grid-attr-rowcount
    - include: number
    - include: class-grid-attr-end

  class-grid-attr-rowcount:
    - match: /
      scope: punctuation.definition.seperator
      set: class-grid-attr-fixed-row
    - include: number
    - include: class-grid-attr-end

  class-grid-attr-fixed-row:
    - match: /
      scope: punctuation.definition.seperator
      set: class-grid-attr-fixed-col
    - match: '[01]'
      scope: constant.numeric
    - include: boolean
    - include: class-grid-attr-end

  class-grid-attr-fixed-col:
    - match: '[01]'
      scope: constant.numeric
    - include: boolean
    - include: class-grid-attr-end

  class-grid-attr-end:
    - match: \)|$
      scope: punctuation.definition.parameters.end
      set: class-grid-body
    - include: illegal

  class-grid-body:
    - meta_scope: meta.class.grid
    - include: class-end
    - include: def-column
    - include: illegal

###############################################################################
# GRID COLUMN
#   second-level entity
#   exists only in grid
#
#   A column definition is wideley equal to a normal variable definition and
#   requires the following entries.
#   (type/min,max//description,column title/attribute/picture/
#    variable/column width/Offset1, Offset2, Offset3)
#
###############################################################################

  def-column:
    - match: \(
      scope: punctuation.definition.parameters.begin
      push: def-column-type

  def-column-type:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-limits
    - include: storage-type
    - include: def-column-end

  def-column-limits:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-default
    - include: attr-seperator
    - include: number
    - include: def-column-end

  def-column-default:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-captions
    - include: string
    - include: number
    - include: def-column-end

  # texts (tooltip, title)
  def-column-captions:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-attributes
    - include: attr-seperator
    - include: string
    - include: def-column-end

  def-column-attributes:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-picture
    - include: attr-seperator
    - include: attribute-accesslevel
    - include: attribute-limit
    - include: attribute-writeability
    - include: def-column-end

  def-column-picture:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-address
    - include: string
    - include: def-column-end

  def-column-address:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-width
    - include: string
    - include: def-column-end

  def-column-width:
    - meta_content_scope: meta.definition.column
    - match: /
      scope: punctuation.definition.seperator
      set: def-column-offsets
    - include: number
    - include: def-column-end

  def-column-offsets:
    - meta_content_scope: meta.definition.column
    - include: attr-seperator
    - include: number
    - include: def-column-end

  def-column-end:
    - match: \)|$
      scope: punctuation.definition.parameters.end
      pop: true
    - include: illegal

###############################################################################
# DIALOG
#   top-level entity
#
#   //M(MSK_NAME/"Caption"/"\\pic.png"/0,0,640,480/"MB0"/20,20,80,80/AC4)
#   ...
#   //END
###############################################################################

  class-dialog:
    - match: //[Mm]\b
      scope: keyword.class.begin
      push:
        - meta_scope: meta.class.dialog
        - match: \(
          scope: punctuation.definition.parameters.begin
          set: class-dialog-attr-name
        - include: class-dialog-attr-end

  class-dialog-attr-name:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-caption
    - include: class-name
    - include: class-dialog-attr-end

  class-dialog-attr-caption:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-picture
    - include: string
    - include: class-dialog-attr-end

  class-dialog-attr-picture:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-dimension
    - include: string
    - include: class-dialog-attr-end

  class-dialog-attr-dimension:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-variable
    - include: attr-seperator
    - include: number
    - include: class-dialog-attr-end

  class-dialog-attr-variable:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-picture-position
    - include: string
    - include: class-dialog-attr-end

  class-dialog-attr-picture-position:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-attribute
    - include: attr-seperator
    - include: number
    - include: class-dialog-attr-end

  class-dialog-attr-attribute:
    - match: /
      scope: punctuation.definition.seperator
      set: class-dialog-attr-end
    - include: attribute-accesslevel
    - include: attribute-allignment
    - include: attribute-changeblock
    - include: attribute-fontsize
    - include: attribute-writeability
    - include: class-dialog-attr-end

  class-dialog-attr-end:
    - match: \)|$
      scope: punctuation.definition.parameters.end
      set: class-dialog-body
    - include: illegal

  class-dialog-body:
    - meta_scope: meta.class.dialog
    - include: class-end
    - include: def-operand
    - include: def-softkey
    - include: def-methods
    - include: illegal

###############################################################################
# SOFTKEY BAR
#   top-level entity
#
#   //S(SK_NAME)
#   ...
#   //END
###############################################################################

  class-menu:
    - match: //[Ss]\b
      scope: keyword.class.begin
      push:
        - match: \(
          scope: punctuation.definition.parameters.begin
          set:
            - match: \)|$
              scope: punctuation.definition.parameters.end
              set: class-menu-body
            - include: class-name
        - include: class-menu-body

  class-menu-body:
    - meta_scope: meta.class.menu
    - include: class-end
    - include: def-softkey
    - include: def-methods
    - include: illegal

###############################################################################
# SECTION prototypes
###############################################################################

  class-name:
    - match: \b\w+\b
      scope: entity.name.class

  attr-seperator:
    - match: ','
      scope: punctuation.definition.seperator

  class-end:
    - include: comment
    - match: (?=//)
      set:
        - match: //(?i:END)\b
          scope: keyword.class.end
          pop: true
        - include: illegal

###############################################################################
# INPUT / OPERAND
#   second-level entity
#   exists only in dialog
#
#   DEF VAR=(TYP/MIN,MAX/DFLT/"","","",""/ATTR/VAR//CAPTIONPOS/INPUTPOS/COLOR)
###############################################################################

  def-operand:
    - match: \b(?i:DEF)\b
      scope: keyword.language.def
      push: def-operand-name

  def-operand-name:
    - meta_scope: meta.definition.operand
    - include: comment
    - match: \b\w+\b
      scope: variable.other
      set: def-operand-arraysize

  def-operand-arraysize:
    - meta_content_scope: meta.definition.operand
    - match: \(
      scope: punctuation.definition.arraysize.begin
      set:
        - match: \)
          scope: punctuation.definition.arraysize.end
          set: def-operand-assign
        - include: number
        - include: line-end
    - include: def-operand-assign

  def-operand-assign:
    - match: =
      scope: keyword.operator.assignment
      set:
        - meta_content_scope: meta.definition.operand
        - match: \(
          scope: punctuation.definition.parameters.begin
          set: def-operand-type
        - include: def-operand-seperator
    - include: def-operand-seperator

  def-operand-type:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-limits
    - include: storage-type
    - include: def-operand-end

  def-operand-limits:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-default
    - match: '%\w+'
      scope: entity.name.grid
    - include: attr-seperator
    - include: string
    - include: number
    - include: operator
    - include: def-operand-end

  def-operand-default:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-captions
    - include: string
    - include: number
    - include: def-operand-end

  # texts (description, caption/picture, shortcut, unit)
  def-operand-captions:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-attributes
    - include: attr-seperator
    - include: string
    - include: def-operand-end

  def-operand-attributes:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-picture
    - include: attr-seperator
    - include: attribute-accesslevel
    - include: attribute-allignment
    - include: attribute-changeblock
    - include: attribute-fontsize
    - include: attribute-limit
    - include: attribute-writeability
    - include: def-operand-end

  def-operand-picture:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-address
    - include: string
    - include: def-operand-end

  def-operand-address:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-captionpos
    - include: string
    - include: def-operand-end

  # caption position (left, top, width, height)
  def-operand-captionpos:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-inputpos
    - include: attr-seperator
    - include: number
    - include: def-operand-end

  # input control position (left, top, width, height)
  def-operand-inputpos:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-colors
    - include: attr-seperator
    - include: number
    - include: def-operand-end

  def-operand-colors:
    - meta_content_scope: meta.definition.operand
    - match: /
      scope: punctuation.definition.seperator
      set: def-operand-helpfile
    - include: attr-seperator
    - include: number
    - include: def-operand-end

  def-operand-helpfile:
    - meta_content_scope: meta.definition.operand
    - include: attr-seperator
    - include: number
    - include: string
    - include: def-operand-end

  def-operand-end:
    - match: \)
      scope: punctuation.definition.parameters.end
      set: def-operand-seperator
    - include: line-end

  def-operand-seperator:
    - match: ','
      scope: punctuation.definition.seperator
      set: def-operand-name
    - include: line-end

###############################################################################
# SOFTKEY DEFINITION
#   second-level entity
#   exists in dialog and menu
#
#   HS1=("Caption",AC1,SE2)
###############################################################################

  def-softkey:
    - match: '{{softkey}}'
      scope: entity.name.softkey
      push:
        - meta_scope: meta.definition.softkey
        - match: =
          scope: keyword.operator.assignment
          set: def-softkey-attr
        - include: line-end

  def-softkey-attr:
    - meta_content_scope: meta.definition.softkey
    - match: \(
      scope: punctuation.definition.parameters.begin
      set: def-softkey-attr-caption
    - include: line-end

  def-softkey-attr-caption:
    - meta_content_scope: meta.definition.softkey
    - match: ','
      scope: punctuation.definition.seperator
      set: def-softkey-attr-accesslevel
    - match: \[
      scope: punctuation.caption-group.begin
      push:
        - meta_scope: meta.caption-group
        - match: \]
          scope: punctuation.caption-group.end
          pop: true
        - include: expressions
    - include: string
    - include: def-softkey-end

  def-softkey-attr-accesslevel:
    - meta_content_scope: meta.definition.softkey
    - match: ','
      scope: punctuation.definition.seperator
      set: def-softkey-attr-state
    - include: attribute-accesslevel
    - include: def-softkey-end

  def-softkey-attr-state:
    - meta_content_scope: meta.definition.softkey
    - include: attribute-state
    - include: def-softkey-end

  def-softkey-end:
    - match: \)|$
      scope: punctuation.definition.parameters.end
      pop: true
    - include: illegal

###############################################################################
# class methods
#   second-level entities
###############################################################################

  def-methods:
    - include: def-method-activate
    - include: def-method-change
    - include: def-method-focus
    - include: def-method-load
    - include: def-method-output
    - include: def-method-press
    - include: def-method-sub
    - include: def-method-unload

###############################################################################
# ACTIVATE block
#   second-level entity
#   exists in dialog and menu
#
#   ACTIVATE
#   ....
#   END_ACTIVATE
###############################################################################

  def-method-activate:
    - match: \b(?i:ACTIVATE)\b
      scope: keyword.definition.method.begin
      push: def-method-activate-body

  def-method-activate-body:
    - meta_scope: meta.method
    - match: \b(?i:END_ACTIVATE)\b
      scope: keyword.definition.method.end
      pop: true
    - include: statements

###############################################################################
# CHANGE block
#   second-level entity
#   exists in dialog and menu
#
#   CHANGE(operand)
#   ....
#   END_CHANGE
###############################################################################

  def-method-change:
    - match: \b(?i:CHANGE)\b
      scope: keyword.definition.method.change
      push:
        - match: \(
          scope: punctuation.definition.arguments.begin
          set:
            - match: \)|$
              scope: punctuation.definition.arguments.end
              set: def-method-change-body
            - include: operand
            - include: illegal
        - include: def-method-change-body

  def-method-change-body:
    - meta_scope: meta.method
    - match: \b(?i:END_CHANGE)\b
      scope: keyword.definition.method.end_change
      pop: true
    - include: statements

###############################################################################
# FOCUS block
#   second-level entity
#   exists in dialog and menu
#
#   FOCUS
#   ....
#   END_FOCUS
###############################################################################

  def-method-focus:
    - match: \b(?i:FOCUS)\b
      scope: keyword.definition.method.focus
      push: def-method-focus-body

  def-method-focus-body:
    - meta_scope: meta.method
    - match: \b(?i:END_FOCUS)\b
      scope: keyword.definition.method.end_focus
      pop: true
    - include: statements

###############################################################################
# LOAD block
#   second-level entity
#   exists in dialog and menu
#
#   LOAD
#   ....
#   END_LOAD
###############################################################################

  def-method-load:
    - match: \b(?i:LOAD)\b
      scope: keyword.definition.method.load
      push: def-method-load-body

  def-method-load-body:
    - meta_scope: meta.method
    - match: \b(?i:END_LOAD)\b
      scope: keyword.definition.method.end_load
      pop: true
    - include: statements

###############################################################################
# UNLOAD block
#   second-level entity
#   exists in dialog and menu
#
#   UNLOAD
#   ....
#   END_UNLOAD
###############################################################################

  def-method-unload:
    - match: \b(?i:UNLOAD)\b
      scope: keyword.definition.method.unload
      push: def-method-unload-body

  def-method-unload-body:
    - meta_scope: meta.method
    - match: \b(?i:END_UNLOAD)\b
      scope: keyword.definition.method.end_unload
      pop: true
    - include: statements

###############################################################################
# OUTPUT block
#   second-level entity
#   exists in dialog and menu
#
#   OUTPUT(operand)
#   ....
#   END_CHANGE
###############################################################################

  def-method-output:
    - match: \b(?i:OUTPUT)\b
      scope: keyword.definition.method.output
      push: def-method-output-argument

  def-method-output-argument:
    - match: \(
      scope: punctuation.definition.arguments.begin
      set: def-method-output-argument-name
    - include: line-end

  def-method-output-argument-name:
    - match: ','
      scope: punctuation.definition.seperator
      set: def-method-output-argument-version
    - include: operand
    - include: def-method-output-argument-end

  def-method-output-argument-version:
    - include: number
    - include: def-method-output-argument-end

  def-method-output-argument-end:
    - match: \)|$
      scope: punctuation.definition.arguments.end
      set: def-method-output-body
    - include: illegal

  def-method-output-body:
    - meta_scope: meta.method
    - match: \b(?i:END_OUTPUT)\b
      scope: keyword.definition.method.end_output
      pop: true
    # register not allowed in output
    - match: \b(?i:REG)\b
      scope: invalid.illegal
    - include: expressions

###############################################################################
# PRESS block
#   second-level entity
#   exists in dialog and menu
#
#   PRESS(HSx)
#   ....
#   END_PRESS
###############################################################################

  def-method-press:
    - match: \b(?i:PRESS)\b
      scope: keyword.definition.method.press
      push:
        - match: \(
          scope: punctuation.definition.arguments.begin
          set:
            - match: \)|$
              scope: punctuation.definition.arguments.end
              set: def-method-press-body
            - match: '{{softkey}}'
              scope: entity.name.softkey
            - match: \b(?i:P[UD]|S[LRUD])\b
              scope: entity.name.key
            - include: illegal
        - include: line-end

  def-method-press-body:
    - meta_scope: meta.method
    - match: \b(?i:END_PRESS)\b
      scope: keyword.definition.method.end_press
      pop: true
    - include: statements

###############################################################################
# SUB block
#   second-level entity
#   exists in dialog and menu
#
#   SUB("function_name")
#   ....
#   END_SUB
###############################################################################

  def-method-sub:
    - match: \b(?i:SUB)\b
      scope: keyword.definition.method.sub
      push:
        - match: \(
          scope: punctuation.definition.arguments.begin
          set:
            - match: \)|$
              scope: punctuation.definition.arguments.end
              set: def-method-sub-body
            - include: operand
            - include: illegal
        - include: def-method-sub-body

  def-method-sub-body:
    - meta_scope: meta.method
    - match: \b(?i:END_SUB)\b
      scope: keyword.definition.method.end_sub
      pop: true
    - include: statements

###############################################################################
# STATEMENTS
#   third-level entities
#   exist within event-handler and sub-routine
###############################################################################

  statements:
    - include: comment
    - include: conditional
    - include: procedures
    - include: expressions

  comment:
    - match: ';.*$'
      scope: comment.line

  conditional:
    - match: \b(?i:IF|ELSE|ENDIF)\b
      scope: keyword.operator.conditional

  procedures:
    - match: \b(?i:EXIT(?:LS)?|RETURN)\b
      scope: support.function
      push: function-arguments

    - match: \b(?i:CALL|[CDEM]P|DLGL|GC|L[ABGMS]|LINE|RECT|M?[RW]NP|S[BFP])\b
      scope: support.function
      push: function-arguments

###############################################################################

  expressions:
    - include: string       # must be the first
    - include: boolean
    - include: number
    - include: attribute-allignment
    - include: attribute-changeblock
    - include: attribute-fontsize
    - include: attribute-limit
    - include: attribute-writeability
    - include: attribute-accesslevel
    - include: attribute-state
    - include: operator
    - include: function
    - include: group        # must follow after function
    - include: softkey
    - include: variable
    - include: operand
    - include: placeholder

  # is used for snippet parameters
  placeholder:
    - match: \{
      scope: punctuation.group.begin
      push:
        - meta_scope: invalid.illegal
        - match: \}
          scope: punctuation.group.end
          pop: true
    - match: \}
      scope: invalid.illegal

  attribute-accesslevel:
    - match: \b[Aa][Cc][0-7]\b
      scope: constant.language.attribute

  attribute-allignment:
    - match: \b[Aa][Ll][0-2]\b
      scope: constant.language.attribute

  attribute-changeblock:
    - match: \b[Cc][Bb][01]\b
      scope: constant.language.attribute

  attribute-fontsize:
    - match: \b[Ff][Ss][12]\b
      scope: constant.language.attribute

  attribute-limit:
    - match: \b[Ll][Ii][0-3]\b
      scope: constant.language.attribute

  attribute-state:
    - match: \b[Ss][Ee][0-3]\b
      scope: constant.language.attribute

  attribute-writeability:
    - match: \b[Ww][Rr][0-5]\b
      scope: constant.language.attribute

  boolean:
    - match: \b(?i:TRUE|FALSE)\b
      scope: constant.language.boolean

  function:
    - match: \b(?i:A(?:BS|COS|SIN|TAN)|COS|ROUND|S(?:DEG|IN|RAD|QRT)|TAN)\b
      scope: support.function.arithmetic
      push: function-arguments
    - match: \b(?i:IS(?:NUM|STR)|CVAR|EVAL)\b
      scope: support.function.checks
      push: function-arguments
    - match: \b(?i:INSTR|LEN|LEFT|MIDS|REPLACE|RIGHT)\b
      scope: support.function.string
      push: function-arguments
    - match: \b(?i:PI_(?:SERVICE|START))\b
      scope: support.function.other
      push: function-arguments

  function-arguments:
    - meta_scope: meta.function-call
    - match: \(
      scope: punctuation.function-call.arguments.begin
      push:
        - meta_scope: meta.function-call.arguments
        - match: \)
          scope: punctuation.function-call.arguments.end
          pop: true
        - match: ','
          scope: punctuation.function-call.arguments.seperator
        - include: expressions
        - include: illegal
    - match: (?=\S)
      pop: true

  group:
    - match: \(
      scope: punctuation.group.begin
      push:
        - meta_scope: meta.group
        - match: \)
          scope: punctuation.group.end
          pop: true
        - include: expressions
        - include: illegal
    - match: \)
      scope: invalid.illegal

  number:
    - match: \b(?i:PI)\b
      scope: constant.language
    - match: \b[1-8](\.\d+)?EX[-+]?\d{1,2}\b
      scope: constant.numeric.float
    - match: \b\d+\.\d+\b
      scope: constant.numeric.float
    - match: \b\d+\b
      scope: constant.numeric.integer
    - match: \b[Bb][01]+\b
      scope: constant.numeric.binary
    - match: \b[Hh]\h+\b
      scope: constant.numeric.hexadecimal

  operator:
    - match: =(?!=)
      scope: keyword.operator.assignment
    - match: <<
      scope: keyword.operator.assignment
    - match: <>|==|>=|<=|<|>
      scope: keyword.operator.relational
    - match: '[-+/\*]'
      scope: keyword.operator.arithmetic
    - match: \b(?i:MOD)\b
      scope: keyword.operator.arithmetic
    - match: \b(?i:AND|OR|NOT)\b
      scope: keyword.operator.boolean
    - match: \b(?i:B(?:AND|X?OR|NOT)|SH[LR])\b
      scope: keyword.operator.binary

  operand:
    - match: \b\w+\b
      scope: variable.other
      push: operand-index

  softkey:
    - match: '{{softkey}}'
      scope: entity.name.softkey
      push:
        - match: \.
          scope: punctuation.member.seperator
          set:
            # list of valid attributes
            - match: \b(?i:ac|s[te])\b
              scope: entity.other.attribute-name
              pop: true
            - include: illegal-pop
        - match: (?=\S)
          pop: true

  storage-type:
    - match: \b(?i:[CBV]|I[BDH]?(?:[BWD]U?)?|R\d*|S\d*)\b
      scope: storage.type

  string:
    - match: '"'
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.double
        - match: '"'
          scope: punctuation.definition.string.end
          pop: true
        - match: \'"\'
          scope: constant.character.escape.double-quoted
        - match: \'
          scope: constant.character.escape.single-quoted
        - match: '%[Nn]'
          scope: constant.character.escape.linefeed
    - match: \$\d+\b
      scope: support.variable.textid

  variable:
    - match: \b(?i:CUR(?:POS|VER)|ENTRY|ERR|FILE_ERR|FOC|S_CHAN)\b
      scope: support.variable.language
    - match: \b(?i:REG)\b
      scope: support.variable.register
      push: operand-index

###############################################################################

  line-end:
    - match: $
      pop: true
    - include: comment
    - include: illegal

  illegal:
    - match: \S+?(?=[/,])
      scope: invalid.illegal

  illegal-pop:
    - match: \S+
      scope: invalid.illegal
      pop: true

###############################################################################
# OBJECT MEMBERS
###############################################################################

  operand-index:
    - match: \[
      scope: punctuation.index.begin
      set:
        - match: \]
          scope: punctuation.index.end
          set: operand-members
        - include: expressions
    - include: operand-members

  operand-members:
    - match: \.
      scope: punctuation.member.seperator
      set:
        # list of valid attributes
        - match: \b(?i:a[cl]|bc|cb|f[cs]|gt|hlp|l[it]|m(?:ax|in)|[su]t|typ|v(?:a[lr]|ld)|wr)\b
          scope: entity.other.attribute-name
          pop: true
        - include: illegal-pop
    - match: (?=\S)
      pop: true
