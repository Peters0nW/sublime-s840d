<?xml version="1.0" encoding="utf-8"?>
<info svar="840Dsl_sysvar_lists_man_0517_de-DE">

<parameter type="INT" dim="1">
<name>$AC_MARKER</name>
<brief>User array variable of type Integer</brief>
<description>Array variable $AC_MARKER[n] is used to store application-related integer arithmetic results. The variable is stored in DRAM or in SRAM depending on $MC_MM_BUFFERED_AC_MARKER. The array elements of the variable in volatile memory (DRAM) are set to 0 on a Reset.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SYSTEM_MARKER</name>
<brief>System array variable of type Integer</brief>
<description>Array variable $AC_SYSTEM_MARKER[n] is used to store application-related integer arithmetic results. The variable is reserved for SIEMENS applications. The variable is stored in DRAM or in SRAM depending on $MC_MM_BUFFERED_AC_MARKER. The array elements of the variable in volatile memory (DRAM) are set to 0 on a Reset.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_PARAM</name>
<brief>User array variable of type Real</brief>
<description>Array variable $AC_PARAM[n] is used to store application-related Real arithmetic results. The variable is stored in DRAM or in SRAM depending on $MC_MM_BUFFERED_AC_PARAM. The array elements of the variable in volatile memory (DRAM) are set to 0 on a Reset.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_SYSTEM_PARAM</name>
<brief>System array variable of type Real</brief>
<description>Array variable $AC_SYSTEM_PARAM[n] is used to store application-related Real arithmetic results. The variable is reserved for SIEMENS applications. The variable is stored in DRAM or in SRAM depending on $MC_MM_BUFFERED_AC_PARAM. The array elements of the variable in volatile memory (DRAM) are set to 0 on a Reset.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_UBFR</name>
<brief>1st basic frame in the data management system</brief>
<description>Variable $P_UBFR is used to program the 1st basic frame in the data management system. G500, G54 .. G599 can be used to activate the corresponding data management frame. The data management frames are stored in SRAM and can be read in and out using the data backup feature. $P_UBFR is equivalent to $P_CHBFR[0].

Application:
$P_UBFR = ctrans(x,10) : crot(z,45)
$P_UBFR[y,tr] = 5
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_SETFRAME</name>
<brief>Active system frame for preset actual value memory</brief>
<description>Variable $P_SETFRAME is used to program the active system frame for preset actual value memory and scratching.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit0 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_EXTFRAME</name>
<brief>Active system frame for external frame</brief>
<description>Variable $P_EXTFRAME is used to program the active system frame for the external work offset.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit1 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_PARTFRAME</name>
<brief>Active system frame for toolholder</brief>
<description>Variable $P_PARTFRAME determines the active system frame for TCARR and PAROT.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[51]
$MC_GCODE_RESET_VALUES[51]
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TOOLFRAME</name>
<brief>Active system frame for TOROT</brief>
<description>Variable $P_TOOLFRAME determines the active system frame for TOROT and TOFRAME.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[52]
$MC_GCODE_RESET_VALUES[52]
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_WPFRAME</name>
<brief>Active system frame for the workpiece</brief>
<description>Variable $P_WPFRAME is used to program the active system frame for workpiece reference points.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit4 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CYCFRAME</name>
<brief>Active system frame for cycles</brief>
<description>Variable $P_CYCFRAME is used to program the active system frame for cycles.

On a Reset, the activation of the system frame depends on the following machine  data:
Bit0 in $MC_RESET_MODE_MASK
Bit5 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TRAFRAME</name>
<brief>Active system frame for transformations</brief>
<description>Variable $P_TRAFRAME is used to program the active system frame for transformations. This system frame is configured as follows when a transformation is selected with TRANSMIT or TRACYL:
$MN_FRAME_GEOAX_CHANGE_MODE = 1 oder 2
$MC_TRANSMIT_ROT_AX_FRAME_1 = 2
$MC_TRANSMIT_ROT_AX_FRAME_2 = 2
$MC_TRACYL_ROT_AX_FRAME_1 = 2
$MC_TRACYL_ROT_AX_FRAME_2 = 2
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_CHBFRAME</name>
<brief>Active basic frame in channel</brief>
<description>Array variable $P_CHBFRAME[n] is used to program the nth active basic frame in the channel.

On a Reset, the activation of the basic frame depends on the following machine data:
Bit0 and Bit14 in $MC_RESET_MODE_MASK
$MC_CHBFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_NCBFRAME</name>
<brief>Active global basic frame</brief>
<description>Array variable $P_NCBFRAME[n] is used to program the nth active global basic frame.

On a Reset, the activation of the basic frame depends on the following machine data:
Bit0 and Bit14 in $MC_RESET_MODE_MASK
$MN_NCBFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ACTBFRAME</name>
<brief>Active overall basic frame</brief>
<description>Variable $P_ACTBFRAME determines the active chained overall basic frame. This frame is produced by chaining together all valid (see $P_NCBFRMASK) global basic frames and all valid (see $P_CHBFRMASK) basic frames in the channel. The overall basic frame is always recalculated when a basic frame is activated.

On a Reset, the activation of the basic frames depend on the following machine data:
Bit0 and Bit14 in $MC_RESET_MODE_MASK
$MN_NCBFRAME_RESET_MASK
$MC_CHBFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_BFRAME</name>
<brief>1. active basic frame in channel</brief>
<description>Variable $P_BFRAME is used to program the 1st active basic frame in the channel. The variable is equivalent to $P_CHBFRAME[0].

On a Reset, the activation of the basic frame depends on the following machine data:
Bit0 and Bit14 in $MC_RESET_MODE_MASK
$MC_CHBFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_IFRAME</name>
<brief>Active settable frame</brief>
<description>Variable $P_IFRAME is used to program the active settable frame. A settable data management frame $P_UIFR[n] becomes the active settable frame on execution of G500, G54 to G599.

On a Reset, the activation of the settable frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[7]
$MC_GCODE_RESET_VALUES[7]
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_PFRAME</name>
<brief>Programmable frame</brief>
<description>Variable $P_PFRAME is used to program the active programmable frame.

The programmable frame is retained on a Reset when the following setting is configured:
$MC_PFRAME_RESET_MODE = 1
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ACTFRAME</name>
<brief>Active overall frame</brief>
<description>The variable $P_ACTFRAME determines the active chained total frame. The active total frame is calculated using the following formula:

$P_ACTFRAME = $P_PARTFRAME : $P_SETFRAME : $P_EXTFRAME : $P_ISO1FRAME : $P_ISO2FRAME : $P_ISO3FRAME : $P_ACTBFRAME : $P_IFRAME : $P_GFRAME : $P_TOOLFRAME : $P_WPFRAME : $P_TRAFRAME : $P_PFRAME : $P_ISO4FRAME : $P_CYCFRAME

The total frame is recalculated each time a frame belonging to the frame chain is activated and upon a reset.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_UIFRNUM</name>
<brief>Number of active settable frames</brief>
<description>Variable $P_UIFRNUM is used to determine the number of the active settable frame. A settable data management frame $P_UIFR[n] becomes the active settable frame on execution of G500, G54 to G599.

G500: $P_UIFRNUM = 0
G54:  $P_UIFRNUM = 1
G599: $P_UIFRNUM = 99

On a Reset, the activation of the settable frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[7]
$MC_GCODE_RESET_VALUES[7]
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_NCBFRMASK</name>
<brief>Global basic frame mask</brief>
<description>Variable $P_NCBFRMASK is used to define the NCU-global basic frame included in the calculation of the overall basic frame $P_ACTBFRAME. The variable is implemented in the form of a bit mask in which the global basic frames can be selected. On a Reset, the mask is initialized by $MN_NCBFRAME_RESET_MASK.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_CHBFRMASK</name>
<brief>Basic frame mask in the channel</brief>
<description>Variable $P_CHBFRMASK is used to define the channel-specific basic frame included in the calculation of the overall basic frame $P_ACTBFRAME. The variable is implemented in the form of a bit mask in which the basic frames can be selected. On a Reset, the mask is initialized by $MC_CHBFRAME_RESET_MASK.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_CHSFRMASK</name>
<brief>System frame mask</brief>
<description>Variable $P_CHSFRMASK is used to define the channel-specific system frame included in the calculation of the overall frame $P_ACTFRAME. The variable is implemented in the form of a bit mask in which the system frames can be selected. On a Reset, the mask is initialized by $MC_CHSFRAME_RESET_MASK.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_AD</name>
<brief>Active tool offsets</brief>
<description>$P_AD[n]
Active tool offsets
n: Parameter numbers 1 - 36
n = 1-25  $TC_DP1 to $TC_DP25
n = 26    $TC_DPCENumber of the cutting edge (function: Unique D number)
n = 27    $TC_DPH   H number of the cutting edge (function: ISO mode)
n = 28    $TC_DPV   Tool orientation (function: Tool orientation)
n = 29    $TC_DPV3  Component 1 of the tool orientation (function: Tool orientation)
n = 30    $TC_DPV4  Component 2 of the tool orientation (function: Tool orientation)
n = 31    $TC_DPV5  Component 3 of the tool orientation (function: Tool orientation)
n = 32    $TC_DPVN3 Normal vector component 1 (function: Tool orientation)
n = 33    $TC_DPVN4 Normal vector component 2 (function: Tool orientation)
n = 34    $TC_DPVN5 Normal vector component 3 (function: Tool orientation)
n = 35    $TC_DPNT  Number of teeth on the cutting edge
n = 36    $TC_DPROTBase angle of rotation of the cutting edge
An alarm is issued if a compensation parameter belongs to a function that is not active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_ADT</name>
<brief>Active tool offsets transformed</brief>
<description>$P_ADT[n]
Active tool offsets transformed
n: Parameter numbers 1 - 36
n = 1-25  $TC_DP1 to $TC_DP25
n = 26    $TC_DPCENumber of the cutting edge (function: Unique D number)
n = 27    $TC_DPH   H number of the cutting edge (function: ISO mode)
n = 28    $TC_DPV   Tool orientation (function: Tool orientation)
n = 29    $TC_DPV3  Component 1 of the tool orientation (function: Tool orientation)
n = 30    $TC_DPV4  Component 2 of the tool orientation (function: Tool orientation)
n = 31    $TC_DPV5  Component 3 of the tool orientation (function: Tool orientation)
n = 32    $TC_DPVN3 Normal vector component 1 (function: Tool orientation)
n = 33    $TC_DPVN4 Normal vector component 2 (function: Tool orientation)
n = 34    $TC_DPVN5 Normal vector component 3 (function: Tool orientation)
n = 35    $TC_DPNT  Number of teeth on the cutting edge
n = 36    $TC_DPROTBase angle of rotation of the cutting edge
An alarm is issued if a compensation parameter belongs to a function that is not active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_DLNO</name>
<brief>-</brief>
<description>Active additive offset number DL=0 - DL='max.'; 'max'= value of $MN_MM_MAX_SUMCORR_PER_CUTTEDGE
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOL</name>
<brief>-</brief>
<description>Active tool cutting edge D0 - D'max.'; 'max'= value of $MN_MM_MAX_CUTTING_EDGE_NO
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOLNO</name>
<brief>-</brief>
<description>Active tool number T0 - T32000; T can be an 8-digit number when 'flat D number' function is active This command should not generally be used when magazine management is active. When magazine management is active, GETEXET should be used instead. (T number programming always works reliably when $MC_CUTTING_EDGE_DEFAULT=-1, or &gt;0. In cases where $MC_CUTTING_EDGE_DEFAULT=0, or =-2, T number read errors can occur. The T number mechanism is also reliable if it is programmed after D &gt; 0.

Notice:
Particularly with a setting of $MC_CUTTING_EDGE_DEFAULT=-2, $P_TOOLNO (the T no. of the active tool with which the currently active D offset has been calculated) and GETEXET (the changed tool) can return different T numbers.

-&gt;see also $P_MTHSDC and the documentation relating to the subject of multiple toolholders/spindles.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOLP</name>
<brief>-</brief>
<description>Last programmed tool number T0 - T32000 (in operation without magazine management).
This command cannot be used when magazine management is active. When magazine management is active, GETSELT must be used instead. If the function 'T alarm delay after M06' is active, the result T number = -1 if the preceding T address has been programmed incorrectly.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOOLL</name>
<brief>Active tool total length</brief>
<description>Active tool total length
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOOLO</name>
<brief>Active tool orientation</brief>
<description>Active tool orientation
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOLO_ACT</name>
<brief>Active setpoint orientation</brief>
<description>Active command orientation
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOLO_END</name>
<brief>Final orientation of the active block</brief>
<description>End orientation of active block
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TOOLO_DIFF</name>
<brief>Remaining angle to the orientation in the active block</brief>
<description>Remaining angle of tool orientation in active block
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VC_TOOLO</name>
<brief>Actual orientation</brief>
<description>Actual orientation
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$VC_TOOLO_DIFF</name>
<brief>Angle between set and actual orientation</brief>
<description>Angle between command and actual orientation
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$VC_TOOLO_STAT</name>
<brief>Status of the calculation of the actual orientation</brief>
<description>Status of calculation of  actual orientation
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TC</name>
<brief>Active toolholder</brief>
<description>Active toolholder
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC</name>
<brief>Active tool carrier</brief>
<description>Active toolholder
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TCNUM</name>
<brief>Number of tool carriers available in the channel</brief>
<description>Number of available toolholders in the channel
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TCANG</name>
<brief>Active angle of a tool carrier axis</brief>
<description>Active angle of a toolholder axis
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TCDIFF</name>
<brief>Angle difference with Hirth teeth</brief>
<description>Difference between calculated and used angle of a toolholder axis with angle incrementation (Hirth tooth system)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TCSOL</name>
<brief>Solution number for tool carrier</brief>
<description>Number of solutions when the angle of the axis of rotation of an orientable tool carrier is defined from a frame. In the case of 0 to 2 solutions, the relevant value is returned. The return value is 3 when the number of solutions is infinite. If the angles are specified (TCOABS), the number of solutions is always 1.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TCSTAT</name>
<brief>Status of an orientable tool carrier.</brief>
<description>Specifies the status of an orientatable toolholder.
The variable is bit-coded with the following bit meanings:
0x1     The first axis of rotation exists
0x2     The second axis of rotation exists
0x4     The angles used in the calculation are acquired from an orientation in the frame direction
0x8     The angles used in the calculation have been specified absolutely
0x10    The polar axis angle is uncertain with the toolholder orientated in the frame direction
0x1000  Only the tool is rotatable (kinematic type T)
0x2000  Only the workpiece is rotatable (kinetmatic type P)
0x4000  Tool and workpiece are rotatable (kinematic type M)
The bits specified here are not currently assigned.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_TOOLR</name>
<brief>Active tool radius</brief>
<description>Active tool radius (total)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_TOOLND</name>
<brief>Number of edges of tool T</brief>
<description>$P_TOOLND[t]
Number of tool edges of tool t
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_TOOLEXIST</name>
<brief>Tool exists with T no. t</brief>
<description>$P_TOOLEXIST[t]
Does the tool with T no. t exist
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_D</name>
<brief>Programmed D number (ISO2.1 mode)</brief>
<description>The D number is the tool offset number in ISO mode 2.1 (millling). If no tool offset is active, the value 0 is output. The tool offset can be selected with D or H. However, this variable only ever contains the D value.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_H</name>
<brief>Programmed H number (ISO2.1 milling)</brief>
<description>The H number is the tool offset number in ISO mode 2.1 (millling). If no tool offset is active, the value 0 is output. The tool offset can be selected with D or H. However, this variable only ever contains the H value.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_TOOLMN</name>
<brief>Magazine number of tool</brief>
<description>$A_TOOLMN[t]
Magazine number of tool t
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_TOOLMLN</name>
<brief>Magazine location number of tool</brief>
<description>$A_TOOLMLN[t]
Magazine location number of tool t
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MYMN</name>
<brief>Number of home magazine of tool</brief>
<description>Number of home magazine of tool with T no. t.
(A magazine becomes the home magazine of the tool if the tool is being loaded onto a magazine location of kind 1 ($TC_MPP1=1).)
Resulting value =  0 = tool is not loaded (if $A_TOOLMN&gt; 0, then manual tool).
Resulting value = -1 = tool management is not active
Resulting value = -2 = tool with T no. t does not exist.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MYMLN</name>
<brief>Number of the home magazine location of the tool</brief>
<description>Number of the home magazine location of the tool with T no. t.
(A magazine location becomes the home magazine location of a tool if the tool is being loaded onto a magazine location of kind 1 ($TC_MPP1=1).)
Resulting value =  0 = tool is not loaded (if $A_TOOLMLN&gt; 0, then manual tool).
Resulting value = -1 = tool management is not active
Resulting value = -2 = tool with T no. t does not exist.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$A_MONIFACT</name>
<brief>Factor for tool life monitoring</brief>
<description>Factor for tool life monitoring
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOLNG</name>
<brief>Number of defined tool groups</brief>
<description>$P_TOOLNG
Number of defined tool groups assigned to the channel
OPI block type= TM
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOLNT</name>
<brief>Number of defined tools</brief>
<description>Number of defined tools assigned to the channel
OPI block type= TV
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_TOOLT</name>
<brief>Tool number</brief>
<description>$P_TOOLT[i]
ith tool number T
OPI block type= TV
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_TOOLD</name>
<brief>D no. of tool T</brief>
<description>$P_TOOLD[t,i]
ith D no. of tool with T no. t; i=1,2...
If t is the value of an undefined tool, -2 is returned
If i is a value outside the permissible range, 0 is returned
OPI block type= TO
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_USEKT</name>
<brief>Tool selection screen</brief>
<description>$P_USEKT (= USE Kind of Tool)
Is a bit-coded value
All tools whose parameter $TC_TP11 has set one of the bits of $P_USEKT are available for the following tool changes. The value 'zero' has the equivalent  content of 'all bits are set'
OPI block= C/S
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_TOOLNDL</name>
<brief>Number of DL offsets</brief>
<description>$P_TOOLNDL[t,d]
Number of DL offsets of D offset specified by T no. t and D no. d
&gt;0   Number of DL offsets
0    No DL offset for this D offset
-1   Additive offset function not active
-2   t is the value of an undefined tool
-3   d is the value of an undefined D offset
OPI block type= TOS; TOE
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MAGN</name>
<brief>Number of defined magazines</brief>
<description>Number of defined magazines assigned to the channel.
&gt;0  Successful read access
0   No magazine defined
-1  tool management is not active
OPI block= TM
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MAG</name>
<brief>Magazine number</brief>
<description>$P_MAG[ i ]
ith magazine number
&gt;0   Successful read access
0    i is outside the permissible range
-1   tool management is not active
OPI block= TM
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MAGNDIS</name>
<brief>Number of magazines connected to the internal magazine</brief>
<description>P_MAGNDIS[ n, m ]
Number of magazines connected to location m of internal magazine n.
&gt;0  Successful read access
0   No magazine is connected to the buffer location
-1  tool management is not active
-2  n is not the number of an internal magazine
-3  m is not the number of an internal magazine location
OPI block TPM
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MAGDISS</name>
<brief>Number of the magazine connected to the buffer</brief>
<description>P_MAGDISS[ l, i ]
Number of ith magazine connected to location I of the buffer magazine.
&gt;0  Successful read access
0   i is outside the permissible range
-1  tool management is not active
-2  m is not the number of a buffer magazine location
-3  no buffer magazine defined
OPI block TPM
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MAGDISL</name>
<brief>Number of the magazine connected to the loading magazine</brief>
<description>P_MAGDISL[ l, i ]
Number of ith magazine connected to location I of the load magazine.
&gt;0  Successful read access
0   i is outside the permissible range
-1  tool management is not active
-2  m is not the number of a load magazine location
-3  no load magazine defined
OPI block TPM
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MAGNS</name>
<brief>Number of spindle locations / toolholder locations in the buffer</brief>
<description>$P_MAGNS
Number of spindle locations / toolholder locations in the buffer assigned to the channel.
&gt;0  Successful read access
0   No spindle locations defined
-1  tool management is not active
-3  No buffer magazine defined
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MAGS</name>
<brief>Number of the spindle / toolholder  in  the  buffer</brief>
<description>$P_MAGS[ n ]
nth number of spindle / of toolholder in buffer
&gt;0  Successful read access
0   n is outside the permissible range
-1  tool management is not active
-3  No buffer magazine defined
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MAGNREL</name>
<brief>Number of buffers assigned</brief>
<description>$P_MAGNREL[ n ]
Number of buffers assigned to the spindle number / toolholder number n
&gt;0  Successful read access
0   No buffer location assigned to spindle location
-1  tool management is not active
-2  n is not the number of a spindle location
-3  No buffer magazine defined
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MAGREL</name>
<brief>Buffer number</brief>
<description>P_MAGREL[ n, m ]
mth buffer number of nth spindle number / toolholder number
&gt;0  Successful read access
0   m is outside the permissible range
-1  tool management is not active
-2  n is not the number of a spindle location
-3  No buffer magazine defined
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MAGNH</name>
<brief>Number of defined magazine location type hierarchies</brief>
<description>$P_MAGNH
Highest defined magazine location type hierarchy assigned to the channel.
A magazine location type hierarchy is defined if at least one entry in the hierarchy is &lt;&gt; "9999". Non-defined hierarchies are also counted if a defined hierarchy follows.
&gt;0  Successful write access
0   No location type hierarchies defined
-1  TMMG is not active
OPI module = TT
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MAGNHLT</name>
<brief>Number of defined location types</brief>
<description>$P_MAGNHLT[ n ]
Highest index of a defined location type in the n-th defined hierarchy
&gt;0  Successful write access
0   The hierarchy n is not defined. (All entries = 9999)
-1  TMMG is not active
-2  n lies outside the defined range (1 &lt; n &lt;= $P_MAGNH)
Alarm 10720 is output for n&lt;1 or n&gt;MD18078 $MN_MM_MAX_NUM_OF_HIERARCHIES
OPI module = TT
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MAGHLT</name>
<brief>Location type of the hierarchy</brief>
<description>P_MAGHLT[ n, m ]
m-th location type of the hierarchy n; n= 1,..., $P_MAGNH; m= 1,..., $P_MAGNHLT
&gt;= 0  Successful read access
9999  Location type in the hierarchy level m of hierarchy n is not defined.
-1    TMMG is not active
-2    n lies outside the defined range (1 &lt; n &lt;= $P_MAGNH)
-3    m lies outside the defined range ( 1 &lt; m &lt;= $P_MAGNHLT[n])
Alarm 10720 is output for n&lt;1 or. n&gt;MD18078 $MN_MM_MAX_NUM_OF_HIERARCHIES
Alarm 10730 is output for m&lt;1 or n&gt;MD18079 $MN_MM_MAX_NUM_HIERARCHY_ENTRIES
OPI module = TT
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MAGNA</name>
<brief>Number of defined adapters</brief>
<description>Number of defined adapters assigned to the channel.
&gt;0  Successful read access
0   No adapters defined
-1  'Adapter' function or TMMG is not active
OPI block= AD
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MAGA</name>
<brief>Adapter  number</brief>
<description>$P_MAGA[ i ]
ith adapter number
&gt;0  Successful read access
0   i is outside the permissible range
-1  'Adapter' function or TMMG is not active
OPI block= AD
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MTHSDC</name>
<brief>Master spindle/toolholder for tool offset</brief>
<description>$P_MTHSDC
Master toolholder no. or master spindle no. with reference to which the active tool      is determined for the next D offset selection.
&gt;0  Successful read access
0   No master toolholder or master spindle available.
The next D offset works with T0.
-1  TMMG not available.
If read as an OPI variable, this is valid for the status in the current main run block
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MONMIN</name>
<brief>-</brief>
<description>Relation between tool monitoring actual value and setpoint.
Threshold for tool search strategy "Load only tools with an actual value higher than threshold"
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_VDITCP</name>
<brief>-</brief>
<description>$P_VDITCP[n]
Free parameters for tool management in VDI interface
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_ATPG</name>
<brief>Current tool-related grinding data</brief>
<description>$P_ATPG[n]
Current tool-related grinding data
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_TOOLENV</name>
<brief>Name of a tool environment</brief>
<description>Supplies the name of the tool environment stored under the (internal) index i. If i does not refer to a defined data block, a zero string is returned. If index i is invalid, i.e. less than 1 or greater than the maximum number of data blocks for tool environments ($MN_MM_NUM_TOOLENV), an alarm is generated.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TOOLENVN</name>
<brief>Number of tool environments available</brief>
<description>Specifies the number of defined data blocks for defining tool environments.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_AP</name>
<brief>Angle with polar coordinates</brief>
<description>Programmed angle with polar coordinates in degrees
</description>
</parameter>

<parameter type="AXIS" dim="0">
<name>$P_AXN1</name>
<brief>Axis identifier for the abscissa</brief>
<description>Variable $P_AXN1 supplies the current address of the geometry axis for the abscissa.
</description>
</parameter>

<parameter type="AXIS" dim="0">
<name>$P_AXN2</name>
<brief>Axis identifier for the ordinate</brief>
<description>Variable $P_AXN2 supplies the current address of the geometry axis for the ordinate.
</description>
</parameter>

<parameter type="AXIS" dim="0">
<name>$P_AXN3</name>
<brief>Axis identifier for the applicate</brief>
<description>Variable $P_AXN3 supplies the current address of the geometry axis for the applicate.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$P_ACTGEOAX</name>
<brief>Current geometry axis identifier</brief>
<description>Variable $P_ACTGEOAX[n] supplies the current geometry axis identifier depending on the plane. The geometry axis assignment corresponds to the programmed GEOAX(1,X,2,Y,3,Z) values. The assignment can also change on a Reset and on selection and deselection of transformations.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_GG</name>
<brief>Active G function</brief>
<description>Read active G function of G function group n The index of the G function is supplied as described in the Programming Guide Fundamentals, Section "List of G functions/preparatory functions".

(This also matches the index output at the PLC interface when configured accordingly)

Example:
;Check for G55
IF $P_GG[8] == 3 GOTOF LABEL_G55
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_EXTGG</name>
<brief>Active G function with external language</brief>
<description>Read active G function of G function group n of external language. The index of the G function is supplied as described in the Function Description "ISO Dialects" Section "G commands".

(This also matches the index output at the PLC interface when configured accordingly)

Example:
;Check for G55 in ISO Dialect T
IF $P_EXTGG[14] == 2 GOTOF LABEL_G55
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_GG</name>
<brief>Active G function in synchronized action</brief>
<description>Read active G function of G function group n in synchronized action The index of the G function is supplied as described in the Programming Guide Fundamentals, Section "List of G functions/preparatory functions".

(This also matches the index output at the PLC interface when configured accordingly)

Example:
;Check for G55 in synchronized action
WHEN $A_GG[8] == 3 DO ...
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SEARCH</name>
<brief>Search  run  active</brief>
<description>Returns TRUE (1) if block search is active
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SEARCH1</name>
<brief>Search with calculation active</brief>
<description>Returns TRUE (1) if block search with calculation is active.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SEARCH2</name>
<brief>Block search without calculation was active</brief>
<description>Returns TRUE (1) if last selected search type was "block search without calculation".
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SEARCHL</name>
<brief>Last active  search  type</brief>
<description>supplies the last selected search type:
(coding analogous to PI service _N_FINDBL)
0 : No search
1 : Search without calculation
2 : Search with calculation on contour
3 : Reserved
4 : Search with calculation at end of block
5 : Search in extended program test
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_SUBPAR</name>
<brief>Parameter programmed</brief>
<description>$P_SUBPAR[n]
Interrogate whether parameter n was actually programmed (TRUE) on subroutine call with parameter transfer, or whether the system has applied a default
parameter (FALSE).
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_CTABDEF</name>
<brief>Curve table is defined</brief>
<description>Variable $P_CTABDEF determines whether a curve table definition is active.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_IPTRLOCK</name>
<brief>-</brief>
<description>Status of disable for updating the interruption pointer (OPI block InterruptionSearch) due to part program command IPTRLOCK/IPTRUNLOCK or machine data $MC_AUTO_IPTR_LOCK:
FALSE (0) -&gt; interruption pointer is updated when interruption occurs
TRUE (1) -&gt; the halt block is stored in the interruption pointer
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_DELAYFST</name>
<brief>-</brief>
<description>Interrogation whether delay stop area is active or not depending on part program command DELAYFSTON/DELAYFSTOF.

Note:
Delay stop areas defined by G331/G332 can be interrogated only by a synchronized action due to the restriction to motion blocks and dwell times (see $AC_DELAYFST).
FALSE (0) -&gt; Delay stop area is not active
TRUE (1) -&gt; Delay stop area is active
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AC_DELAYFST</name>
<brief>-</brief>
<description>Interrogation in synchronized actions whether delay stop area is active or not due to part program command DELAYFSTON/DELAYFSTOF or G331/G332.

Note:
If $AC_DELAYFST is used outside synchronized actions in the part program, then, analogous to $P_DELAYFST, the delay stop areas defined with G331/G332 cannot be interrogated owing to the restriction to motion blocks and dwell times (see $P_DELAYFST).
FALSE (0) -&gt; Delay stop area is not active
TRUE (1) -&gt; Delay stop area is active
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MC</name>
<brief>Modal subroutine call active</brief>
<description>Status of modal subroutine call
FALSE (0) -&gt; no modal subroutine call
TRUE (1) -&gt; modal subroutine call active
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_REPINF</name>
<brief>Repositioning possible</brief>
<description>Status info for repositioning with REPOS command
FALSE (0) -&gt; Axis cannot be repositioned with REPOS command for following reasons
- Call is not issued in an ASUB
- Call is issued by an ASUB that has been started in the Reset state
- Call is issued by an ASUB that has been started in JOG mode
TRUE (1) -&gt; Axis can be repositioned with REPOS
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SIM</name>
<brief>NCK simulation active</brief>
<description>The variable $P_SIM returns TRUE if the NCK specifically generated for simulation products is used. This simNCK is used in the products HMI Simulation, virtual NCK (VNCK) and SinuTrain.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_DRYRUN</name>
<brief>Dry run feed selected</brief>
<description>$P_DRYRUN
Returns TRUE (1) if dry run feed is selected, or else FALSE (0).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFFN</name>
<brief>Programmed contour offset</brief>
<description>Programmed contour offset
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$PI</name>
<brief>Circle constant</brief>
<description>Variable $PI determines the circle constant PI = 3.1415927.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_PROG_EVENT</name>
<brief>Event-driven program call active</brief>
<description>System variable $P_PROG_EVENT can be used to query whether the program has been activated implicitly by an event configured with $MC_PROG_EVENT_MASK or $MN_SEARCH_RUN_MODE.

$P_PROG_EVENT supplies an integer value between 0 and 6 with the following meaning:
0:    Explicit activation by NC Start or ASUB Start via VDI or ASUB interface
1:    Implicit activation by "Part program start" event
2:    Implicit activation by "Part program end" event
3:    Implicit activation by "Operator panel reset" event
4:    Implicit activation by "Boot" event
5:    Implicit activation after output of last action block following block search
6:    Implicit activation of /_N_CST_DIR/_N_SAFE_SPF by "Boot" event (Power-on Safety Event)
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$P_PROGPATH</name>
<brief>Path of the current program</brief>
<description>Supplies the path where the program currently being processed is stored in the file system.

Example:
Subprogram "/_N_WKS_DIR/_N_WELLE_DIR/_N_MYSUB_SPF" is running.
$P_PROGPATH returns the string "/_N_WKS_DIR/_N_WELLE_DIR/".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_PROG</name>
<brief>Program name of a program level</brief>
<description>Supplies the name of the program on program level n.

Example:
$P_PROG[0]
Supplies the name of the program on program level 0 = main program name.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_STACK</name>
<brief>Current program level</brief>
<description>Supplies the program level on which the current part program is running.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_ISO_STACK</name>
<brief>Current program level in ISO mode</brief>
<description>The variable supplies the current program level in ISO mode. Unlike Siemens mode, not every subprogram or macro call changes the program level in ISO mode.

Subprogram/macro calls and their effect on $P_ISO_STACK:
M98 Pxx ,subprogram call   $P_ISO_STACK remains the same
G65 Pxx ,non-modal macro   $P_ISO_STACK is incremented
G66 Pxx ,modal macro       $P_ISO_STACK is incremented
M macro substitution       $P_ISO_STACK is incremented
M subprogram substitution  $P_ISO_STACK remains the same
T substitution             $P_ISO_STACK remains the same
G substitution             $P_ISO_STACK is incremented
802S/C:      Value range = [0,5]
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_PATH</name>
<brief>Path of a program level</brief>
<description>Supplies the path where the program being processed on program level n is stored in the file system.

Examples:
$P_PATH[0] supplies the directory of the main program, e.g. "/_N_WKS_DIR/_N_WELLE_WPD/".
$P_PATH[$P_STACK - 1] supplies the path of the calling program.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_ACTID</name>
<brief>Modal synchronized action is programmed</brief>
<description>Variable $P_ACTID[n] determines whether the first 16 modal synchronized actions with ID n are programmed.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_STAT</name>
<brief>Channel state</brief>
<description>-1: Invalid
0: Channel in Reset state
1: Channel interrupted
2: Channel active
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_PROG</name>
<brief>Program state</brief>
<description>-1: Invalid
0: Program in Reset state
1: Program stopped
2: Program active
3: Program waiting
4: Program interrupted
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_SYNA_MEM</name>
<brief>Free synchronized action elements</brief>
<description>Variable $AC_SYNA_MEM determines the number of free synchronized action elements. The maximum number of elements is configured by $MC_MM_NUM_SYNC_ELEMENTS.
The value is read from the part program without a preprocessing stop.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_IPO_BUF</name>
<brief>Fill level Ipo buffer</brief>
<description>Variable $AC_IPO_BUF determines the current fill level of the interpolator buffer.
The value is read from the part program without a preprocessing stop.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_BLOCKTYPE</name>
<brief>Block type</brief>
<description>Variable $AC_BLOCKTYPE determines the type of the current main run block.
The following values are possible:
0: Block is programmed block (main block).
1: Block was generated by the system as an intermediate block.
2: Block was generated by chamfers/rounding
3: Smooth approach and retraction (SAR)
4: Block was generated by tool offset
5: Block was generated by smoothing
6: Block was generated by TLIFT (tangential follow-up)
7: Block was generated by path segmentation
8: Block was generated by compile cycles
9: Block was generated due to orientation changes on path-relative interpolation of tool orientation (ORIPATH/ORIROTC)
10: Block was generated by pole treatment of orientation transformations which is activated by the the machine data $MC_POLE_ORI_MODE
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_BLOCKTYPEINFO</name>
<brief>Block type info</brief>
<description>System variable $AC_BLOCKTYPEINFO can be used to interrogate more detailed information about variable $AC_BLOCKTYPE. Depending on the value of system variable $AC_BLOCKTYPE, various values can be returned:

1. General, internally generated block: $AC_BLOCKTYPE = 1
$AC_BLOCKTYPEINFO = 1000 and contains no further information.

2. Chamfer/rounding: $AC_BLOCKTYPE = 2
2001: Straight
2002: Circle

3. SAR: $AC_BLOCKTYPE = 3
3001: Approach with straight line
3002: Approach with quadrant
3003: Approach with semicircle

4. Tool compensation: $AC_BLOCKTYPE = 4
4001: Approach block after STOPRE
4002: Connection blocks if intersection point not found
4003: Point-type circle on inner corners (with TRACYL only)
4004: Bypass circle (or conical cut) at outer corners
4005: Approach blocks with offset suppression
4006: Approach blocks on repeated WRC activation
4007: Block split due to excessive curvature
4008: Compensation blocks with 3D face milling (tool vector || area vector)

5. Smoothing: $AC_BLOCKTYPE = 5
5001: Smoothing contour by means of G641
5002: Smoothing contour by means of G642
5003: Smoothing contour by means of G643
5004: Smoothing contour by means of G644

6. TLIFT: $AC_BLOCKTYPE = 6
6001: TLIFT block with linear movement of tangential axis and without lift motion.
6002: TLIFT block with nonlinear movement of tangential axis (polynomial) and without lift movement.
6003: TLIFT block with lift motion, tangential axis motion and lift motion start simultaneously.
6004: TLIFT block with lift motion, tangential axis starts first if specific lift position is reached.

7. Path segmentation: $AC_BLOCKTYPE = 7
7001: Programmed path segmentation without active punching/nibbling
7002: Programmed path segmentation with active punching/nibbling
7003: Automatic, internally generated path segmentation

8. Compile cycles: $AC_BLOCKTYPE = 8
In this case, system variable $AC_BLOCKTYPEINFO contains the ID of the compile cycles Application which created the block

9. Path-relative interpolation of tool orientation (ORIPATH/ORIROTC)
9000: interpolation of tool orientation (ORIPATH)
9001: interpolation of rotation of tool (ORIROTC)

10: Pole treatment for orientstion transformations
10000: Look ahead of position of pole axis for orientation transformations
10001 Inserted block for traversing the pole cone at orientation transformations:
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_SPLITBLOCK</name>
<brief>-</brief>
<description>System variable $AC_SPLITBLOCK is capable of detecting all blocks generated internally and programmed blocks which were truncated as a result.

It can return the following values:
= 0 : It is an unchanged programmed block (a block generated by the compressor is viewed here as a programmed block).
&lt;&gt; 0: Block has been truncated or is an internally generated block, the variable can assume the following values (variable is bit-coded):
= 1:  It is an internally generated block or a truncated original block
= 3:  It is the last block in a chain of internally generated blocks or truncated original blocks
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TANEB</name>
<brief>Tangent angle at block end point</brief>
<description>$AC_TANEB determines the angle between the path tangent at the end of the current block and the path tangent at the start of the next block. This variable should only be applied to programmed main blocks. $AC_BLOCKTYPE can be used to determine whether the current block is a main block.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SYNC_ACT_LOAD</name>
<brief>Current runtime for synchronized actions</brief>
<description>Variable $AC_SYNC_ACT_LOAD supplies the current runtime for synchronized actions of the last interpolator cycle in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SYNC_MAX_LOAD</name>
<brief>Longest runtime for synchronized actions</brief>
<description>Variable $AC_SYNC_MAX_LOAD supplies the longest runtime for synchronized actions of an interpolator cycle in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SYNC_AVERAGE_LOAD</name>
<brief>Average runtime for synchronized actions</brief>
<description>Variable $AC_SYNC_AVERAGE_LOAD supplies the average runtime per interpolator cycle for synchronized actions in the channel.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_IW_STAT</name>
<brief>Position information for PTP</brief>
<description>Variable $AC_IW_STAT describes the
position information of the articulated joints (transformation-specific) for cartesian PTP travel.
The variable is relevant only for transformations which support PTP.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_IW_TU</name>
<brief>Position information of axes for PTP</brief>
<description>Variable $AC_IW_TU describes the position information of the axes (MCS) for cartesian PTP travel.
The variable is relevant only for transformations which support PTP.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TRANS_SYS</name>
<brief>Reference system for cart. manual trav. (trans.)</brief>
<description>Reference system for translation with cartesian manual travel
0: Axis-spec. manual trav. active
1: Cart. manual trav. in BCS
2: Cart. manual trav. in WCS
3: Cart. manual trav. in TCS
Only appropriate in connection with transformations which support cart. manual travel.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_JOG_COORD</name>
<brief>Coordinate system for manual travel</brief>
<description>Variable $AC_JOG_COORD is used to set the coordinate system frame for manual travel.
The following values are possible:
0: Manual travel in WCS
1: Manual travel in SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_ROT_SYS</name>
<brief>Reference system for cart. manual trav. (ori.)</brief>
<description>Reference system for orientation with cartesian manual travel
0: Axis-spec. manual trav. active
1: Cart. manual trav. in BCS
2: Cart. manual trav. in PCS
3: Cart. manual trav. in TCS
Only appropriate in connection with transformations which support cart. manual travel.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_MEA</name>
<brief>Probe has switched</brief>
<description>$AC_MEA[n]
As soon as all the trigger events programmed in a block have been fulfilled, both values ($AC_MEA[1] and $AC_MEA[2]) are set.)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TRAFO</name>
<brief>Active transformation</brief>
<description>$AC_TRAFO
Code number of active transformation according to machine data $MC_TRAFO_TYPE_n

Note special meaning in the case of parameterized persistent transformation (bit 1 of $MC_TRAFO_MODE_MASK set to 1):
The parameters of the first chained transformation are returned in the case of TRACON.
0 is returned if only the persistent transformation is active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TRAFO</name>
<brief>Programmed transformation</brief>
<description>Code number of programmed transformation according to machine data $MC_TRAFO_TYPE_n
.
Note special meaning in the case of parameterized persistent transformation (bit 1 of $MC_TRAFO_MODE_MASK set to 1):
The first chained transformation is returned in the case of TRACON.
0 is returned if only the persistent transformation is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TRAFO_PAR</name>
<brief>Transformation selection parameters</brief>
<description>$AC_TRAFO_PAR[n]
Selection parameters of active transformation

Please note special meaning when persistent transformation is configured
(Bit 1 of $MC_TRAFO_MODE_MASK is set to 1):
The parameters of the first chained transformation are returned in the case of TRACON.
0 is returned if only the persistent transformation is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TRAFO_PAR</name>
<brief>Progr. transformation selection parameters</brief>
<description>$P_TRAFO_PAR[n]
Selection parameters of programmed transformation

Please note special meaning when persistent transformation is configured
(Bit 1 of $MC_TRAFO_MODE_MASK is set to 1):
The parameters of the first chained transformation are returned in the case of TRACON.
0 is returned if only the persistent transformation is active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TRAFO_PARSET</name>
<brief>Transformation data set number</brief>
<description>The variable contains the value 0 if no kinematic transformation is active. If a conventionally defined transformation (i.e. not using kinematic chains) is active, the variable contains the number of the current transformation data set.

Note the special meaning with a parameterized persistent transformation
(Bit 1 of $MC_TRAFO_MODE_MASK is set to 1):
With TRACON, the number of the data set of the first chained transformation is returned.
If only the persistent transformation is active, 0 is returned.

If a transformation defined with kinematic chains is active, the variable contains the number of the $NT data set with an offset of 1000; this means that the first transformation returns the value 1001.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TRAFO_PARSET</name>
<brief>Transformation data set number</brief>
<description>The variable contains the value 0 if no kinematic transformation is active. If a conventionally defined transformation (i.e. not using kinematic chains) is active, the variable contains the number of the current transformation data set.

Note the special meaning with a parameterized persistent transformation
(Bit 1 of $MC_TRAFO_MODE_MASK is set to 1):
With TRACON, the number of the data set of the first chained transformation is returned.
If only the persistent transformation is active, 0 is returned.
If only the persistent transformation is active, 0 is returned.

If a transformation defined with kinematic chains is active, the variable contains the number of the $NT data set with an offset of 1000; this means that the first transformation returns the value 1001.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_LIFTFAST</name>
<brief>State of the liftfast</brief>
<description>Information about execution of rapid lift.
0: Initial state.
1: Rapid lift has been executed.
The variable is set internally to "1" by the NC at the beginning of the rapid lift process. The variable must be reset to its initial state ($AC_LIFTFAST=0) by the evaluating program (if one is configured) so that any subsequent rapid lift process can be detected again.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_LIFTFAST</name>
<brief>Status of liftfast</brief>
<description>Information about execution of rapid lift.
0: Initial state.
1: Rapid lift has been executed.
The variable is set internally to "1" by the NC at the beginning of the rapid lift process. The variable must be reset to its initial state ($AC_LIFTFAST=0) by the evaluating program (if one is configured) so that any subsequent rapid lift process can be detected again.
The variable is reset by writing $AC_LIFTFAST!
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_ASUP</name>
<brief>-</brief>
<description>Code number for the reason for activating an ASUB. The reasons are bit-coded and have the following meaning:

BIT0: Activation due to: user interrupt "ASUB with Blsync"
Activation by: VDI signal, digital-analog interface
Continued by: Freely selectable Reorg or Ret

BIT1: Activation due to: User interrupt "ASUB"
To continue the program with Repos, the position immediately prior to the interrupt is stored.
Activation by: VDI signal, digital-analog interface
Continued by: Freely selectable

BIT2: Activation due to: user interrupt "ASUB from channel state Ready"
Activation by: VDI signal, digital-analog interface
Continued by: Freely selectable

BIT3: Activation due to: user interrupt "ASUB in a manual mode and channel state not READY"
Activation by: VDI signal, digital-analog interface
Continued by: Freely selectable

BIT4: Activation due to: Activation due to: User interrupt "ASUB".
To continue the program with Repos, the current position at the moment of interrupt is stored.
Activation by: VDI signal, digital-analog interface
Continued by: Freely selectable

BIT5: Activation due to: Cancellation of subroutine repeat
Activation by: VDI signal
Continued by: Execution of system ASUB REPOS

BIT6: Activation due to: Activation of decoding single block
Activation by: VDI signal (+OPI)
Continued by:  Execution of system ASUB REPOS

BIT7: Activation due to: Activation of delete distance to go
Activation by: VDI signal
Continued by:  Execution of system ASUB Ret

BIT8: Activation due to: Activation of axis synchronization
Activation by: VDI signal
Continued by:  Execution of system ASUB REPOS

BIT9: Activation due to: Mode change
Activation by: VDI signal
Continued by: Execution of system ASUB REPOS or RET (see MD.)

BIT10: Activation due to: Program continuation under TeachIn or after TeachIn deactivation
Activation by: VDI signal
Continued by: Execution of system ASUB Ret

BIT11: Activation due to: Overstore selection
Activation by: Pi selection
Continued by: Execution of system ASUB REPOS

BIT12: Activation due to: Alarm with reaction 'offset block with Repos' (COMPBLOCKWITHREORG)
Activation by: Internal
Continued by: Execution of system ASUB REPOS

BIT13: Activation due to:  Retraction with G33 and Stop
Activation by: Internal
Continued by: Execution of system ASUB Ret

BIT14: Activation due to: Activation of dry run feedrate
Activation by: VDI
Continued by: Execution of system ASUB REPOS

BIT15: Activation due to: Deactivation of dry run feedrate
Activation by: VDI
Continued by: Execution of system ASUB REPOS

BIT16: Activation due to: Activation of block suppression
Activation by: VDI
Continued by: Execution of system ASUB REPOS

BIT17: Activation due to: Deactivation of block suppression
Activation by: VDI
Continued by: Execution of system ASUB REPOS

BIT18: Activation due to: Activate machine data
Activation by: Pi
Continued by: Execution of system ASUB REPOS

BIT19:  Activation due to: Activate tool offset
Activation by: Pi   "_N_SETUDT"
Continued by: Execution of system ASUB REPOS

BIT20:  Activation due to: System ASUB after search type SERUPRO has reached the search target.
Activation by: Pi "_N_FINDBL"  Parameter == 5
Continued by: Execution of system ASUB REPOS

BIT21:  Activation due to: Selection of external work offset
Activation by: VDI signal
Continued by: Execution of system ASUB REPOS
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_ISTEST</name>
<brief>Program  test  active</brief>
<description>Returns TRUE (1) if program test is active.
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$P_MMCA</name>
<brief>Task acknowledgement for MMC        command</brief>
<description>Task acknowledgement for MMC command
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$A_PROTO</name>
<brief>Activate logging function for 1st user</brief>
<description>Activate / deactivate logging function for the first user.
Corresponds to $A_PROTOC[0].
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_PROTOC</name>
<brief>Activate logging function for user</brief>
<description>Activate / deactivate logging function for a user.
Corresponds to OPI variable protocUserActive.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PROT_LOCK</name>
<brief>Disable/enable the logging function for a user</brief>
<description>Disable / enable logging function temporarily for a user
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO1</name>
<brief>1st FIFO stack</brief>
<description>Variable $AC_FIFO1[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO2</name>
<brief>2nd FIFO stack</brief>
<description>Variable $AC_FIFO2[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO3</name>
<brief>3rd FIFO stack</brief>
<description>Variable $AC_FIFO3[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO4</name>
<brief>4th FIFO stack</brief>
<description>Variable $AC_FIFO4[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO5</name>
<brief>5th FIFO stack</brief>
<description>Variable $AC_FIFO5[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO6</name>
<brief>6th FIFO stack</brief>
<description>Variable $AC_FIFO6[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO7</name>
<brief>7th FIFO stack</brief>
<description>Variable $AC_FIFO7[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO8</name>
<brief>8th FIFO stack</brief>
<description>Variable $AC_FIFO8[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO9</name>
<brief>9th FIFO stack</brief>
<description>Variable $AC_FIFO9[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FIFO10</name>
<brief>10th FIFO stack</brief>
<description>Variable $AC_FIFO10[n] is a stack with first in first out characteristics. This stack memory can be used for cyclic measuring operations.
$MC_NUM_AC_FIFO is used to define the number of FIFO variables $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO variables is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be accommodated:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
n = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
n=1: Access to the first element read
n=2: Access to the second element read
n=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
n=4: Number of elements available in the FIFO
n=5: Current write index relative to the start of the FIFO
n=6: Oldest element
n=7: Second oldest etc.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_IN</name>
<brief>Digital input</brief>
<description>Variable $A_IN[n] is used to interrogate digital inputs.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_OUT</name>
<brief>Digital output</brief>
<description>The variable $A_OUT[n] is used to access the digital outputs. If the output is disabled by the interface signal "Disable digital NC outputs", the value returned on reading the variable is always zero.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_INA</name>
<brief>Analog input</brief>
<description>Variable $A_INA[n] is used to access the analog inputs.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_OUTA</name>
<brief>Analog output</brief>
<description>The variable $A_OUTA[n] is used to access the analog outputs. When written, the value does not become effective until after the next IPO cycle, and it can then be read back. If the output is disabled by the interface signal "Disable analog NC outputs", the value returned on reading the variable is always zero.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_INCO</name>
<brief>Comparator input</brief>
<description>Variable $A_INCO[n] is used to access the comparator inputs.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DBB</name>
<brief>PLC data byte (unsigned)</brief>
<description>Array variable $A_DBB[n] is used to read and write a data byte (8 bits) from PLC. The byte is unsigned and can be read in the range from 0 to 255 and written in the range from -128 to 255. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
See also $A_DBSB[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DBW</name>
<brief>PLC data word (unsigned)</brief>
<description>Array variable $A_DBW[n] is used to read and write a data word (16 bits) from PLC. The byte is unsigned and can be read in the range from 0 to 65535 and written in the range from -32768 to 65535. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
See also $A_DBSW[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DBD</name>
<brief>PLC data doubleword (32 bits)</brief>
<description>Array variable $A_DBD[n] is used to read and write a data doubleword (32 bits) from PLC. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_DBR</name>
<brief>PLC Real data (32 bits)</brief>
<description>Array variable $A_DBR[n] is used to read and write Real data (32 bits) from PLC. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DLB</name>
<brief>Link variable byte</brief>
<description>Variable $A_DLB[n] enables reading and writing of a data byte (8 bits) which can be transmitted to other channels or NCUs across the NCU link. $MC_MM_NUM_LINKVAR_ELEMENTS is used to define the number of elements available to the user for programming link variables ($A_DLx). The negative value range of this variable applies to write operations only. The variable can thus store negative values. Only the corresponding positive value can be read back.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DLW</name>
<brief>Link variable word</brief>
<description>Variable $A_DLW[n] enables reading and writing of a data word (16 bits) which can be transmitted to other channels or NCUs across the NCU link. $MC_MM_NUM_LINKVAR_ELEMENTS is used to define the number of elements available to the user for programming link variables ($A_DLx). The negative value range of this variable applies to write operations only. The variable can thus store negative values. Only the corresponding positive value can be read back.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DLD</name>
<brief>Integer link variable</brief>
<description>Variable $A_DLD[n] enables reading and writing of a data doubleword (32 bits) which can be transmitted to other channels or NCUs across the NCU link. $MC_MM_NUM_LINKVAR_ELEMENTS is used to define the number of elements available to the user for programming link variables ($A_DLx).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_DLR</name>
<brief>Real link variable</brief>
<description>Variable $A_DLR[n] enables reading and writing of a Real value which can be transmitted to other channels or NCUs across the NCU link. $MC_MM_NUM_LINKVAR_ELEMENTS is used to define the number of elements available to the user for programming link variables ($A_DLx).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_LINK_TRANS_RATE</name>
<brief>Link data transfer rate</brief>
<description>The variable $A_LINK_TRANS_RATE determines the number of link variables which can still be transferred by the NCU link communication in the current interpolation cycle.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBB_IN</name>
<brief>PLC input byte</brief>
<description>Array variable $A_PBB_IN[n] is used to read and write a data byte (8 bits) from the PLC I/O.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBW_IN</name>
<brief>PLC input word</brief>
<description>Array variable $A_PBW_IN[n] is used to read and write a data word (16 bits) from the PLC I/O.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBD_IN</name>
<brief>PLC input doubleword</brief>
<description>Array variable $A_PBD_IN[n] is used to read a data doubleword (32 bits) from the PLC I/O.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_PBR_IN</name>
<brief>Real PLC input</brief>
<description>Array variable $A_PBR_IN[n] is used to read Real data (32 bits) from the PLC I/O.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBB_OUT</name>
<brief>PLC output byte</brief>
<description>Array variable $A_PBB_OUT[n] is used to write a data byte (8 bits) to the PLC I/O.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBW_OUT</name>
<brief>PLC output word</brief>
<description>Array variable $A_PBW_OUT[n] is used to write a data word (16 bits) to the PLC I/O.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PBD_OUT</name>
<brief>PLC output doubleword</brief>
<description>Array variable $A_PBD_OUT[n] is used to write a data doubleword (32 bits) to the PLC I/O.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_PBR_OUT</name>
<brief>Real PLC output</brief>
<description>Array variable $A_PBR_OUT[n] is used to write Real data (32 bits) to the PLC I/O.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$C_IN</name>
<brief>Signal from PLC to cycle</brief>
<description>$C_IN[n]
Signal from the PLC to cycle
Reserved for SIEMENS applications!
16 input signals (i.e. 2 bytes) are available. Data transfer is cyclic.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$C_OUT</name>
<brief>Signal from cycle to the PLC</brief>
<description>Signal from cycle to the PLC
Reserved for SIEMENS applications!
16 output signals (i.e. 2 bytes) are available. Data transfer is cyclic.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_CMDT</name>
<brief>Trigger, tool management outputs a command</brief>
<description>Trigger variable: $AC_TC_CMDT (CoMmadTrigger) assumes the value '1' for an interpolation cycle whenever a new command from the magazine management is output to the PLC.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_ACKT</name>
<brief>Trigger, PLC acknowledges a tool management command</brief>
<description>Trigger variable: $AC_TC_ACKT (ACKnowledgeTrigger) assumes the value '1' for an interpolation cycle whenever the PLC acknowledges a TM command.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_CMDC</name>
<brief>Number of commands output by the        tool management</brief>
<description>Counter variable: $AC_TC_CMDC (CoMmandCounter) is incremented
by 1 every time the TM sends a command to the PLC.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_ACKC</name>
<brief>Number of PLC acknowledgementsto tool management commands</brief>
<description>Counter variable: $AC_TC_CMDC (ACKnowledgeCounter) is incremented by 1 every time the PLC acknowledges a command from the TM.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_FCT</name>
<brief>Command number</brief>
<description>Command number. This specifies the requested operation.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_STATUS</name>
<brief>Current status of the command</brief>
<description>Current status of the command - to be read via $AC_TC_FCT.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_THNO</name>
<brief>toolholder for the new tool</brief>
<description>Number of the toolholder (specifically the spindle no.) to which the new tool is to be loaded.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_TNO</name>
<brief>internal T number of the new tool</brief>
<description>NCK internal T number of the new (to be loaded) tool.
0: There is no new tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MMYN</name>
<brief>Home magazine number of the new tool</brief>
<description>Home magazine number of the new (to be loaded) tool.
0: There is no new tool, or the new tool (if $AC_TC_TNO&gt; 0) is not loaded (manual tool).
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_LMYN</name>
<brief>Home location number of the new tool</brief>
<description>Home location number of the new (to be loaded) tool.
0: There is no new tool, or the new tool (if $AC_TC_TNO&gt; 0) is not loaded (manual tool).
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MFN</name>
<brief>Source magazine number of the new tool</brief>
<description>Source magazine number of the new tool.
0: There is no new tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_LFN</name>
<brief>Source location number of the new tool</brief>
<description>Source location number of the new tool.
0: There is no new tool.
-1: No TM command is active at the instant     the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MTN</name>
<brief>Target magazine number of the new tool</brief>
<description>Target magazine number of the new tool.
0: There is no new tool.
-1: No TM command is active at the instant     the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_LTN</name>
<brief>Target location number of the new tool</brief>
<description>Target location number of the new tool.
0: There is no new tool.
-1: No TM command is active at the instant     the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MFO</name>
<brief>Source magazine number of the old tool</brief>
<description>Source magazine number of the old (to be replaced) tool.
0: There is no old tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_LFO</name>
<brief>Source location number of the old tool</brief>
<description>Source location number of the old (to be replaced) tool.
0: There is no old tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MTO</name>
<brief>Target magazine number of the old tool</brief>
<description>Target magazine number of the old (to be replaced) tool.
0: There is no old tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_LTO</name>
<brief>Target location number of the old tool</brief>
<description>Target location number of the old (to be replaced) tool.
0: There is no old tool.
-1: No TM command is active at the instant the variable is read.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_YEAR</name>
<brief>System time: year</brief>
<description>System time year
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_MONTH</name>
<brief>System time: month</brief>
<description>System time month
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_DAY</name>
<brief>System time: day</brief>
<description>System time day
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_HOUR</name>
<brief>System  time:  hour</brief>
<description>System time hour
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_MINUTE</name>
<brief>System  time:  minute</brief>
<description>System time minute
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_SECOND</name>
<brief>System  time:  second</brief>
<description>System time second
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_MSECOND</name>
<brief>System time: millisecond</brief>
<description>System time millisecond
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TIME</name>
<brief>Time from block start</brief>
<description>Variable $AC_TIME determines the time from the block start in seconds.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TIMES</name>
<brief>-</brief>
<description>Time from block start (REAL) in seconds (excluding times for internally generated intermediate blocks). Each programmed block can be divided into a sequence of sub-blocks for sequential processing. $AC_TIMES is set to zero o_n_l_y during the 1st cycle of the 1st block in the sequence. It is then incremented in seconds. The variable therefore allows time measurements to be taken over the whole block sequence. The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TIMEC</name>
<brief>Interpolation cycles since block start</brief>
<description>Variable $AC_TIMEC determines the number of interpolation cycles which have elapsed since the block start.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TIMESC</name>
<brief>-</brief>
<description>Time from block start (Real) in IPO cycles (excluding cycles for internally generated intermediate blocks). Each programmed block can be divided into a sequence of sub-blocks for sequential processing. $AC_TIMESC is set to zero o_n_l_y during the 1st cycle of the 1st block in the sequence. It is then incremented in IPO cycles. The variable therefore allows time measurements to be taken over the whole block sequence. The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TIMER</name>
<brief>User timer</brief>
<description>Array variable $AC_TIMER[n] is an application-related timer. The time in seconds is counted in multiples of an interpolation cycle.

The timer is started by assigning a value:
$AC_TIMER[n]=&lt;start value&gt;

The timers can be stopped by assigning a negative value:
$AC_TIMER[n]=-1

The current timer count can be read while the time variable is running or stopped. When the time variable is stopped by assigning -1, the last count value remains stored in the variable and can continue to be read.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PRTIME_M</name>
<brief>Program run time (machining time)</brief>
<description>The variable $AC_PRTIME_M "ProgramRunTIME-Main" determines the machining time of the program runtime. During the simulation, the anticipated processing time of the blocks in the part program is calculated, and made available in this system variable and the OPI variable 'acPRTimeM'. This value is cleared by writing a value to the variable.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PRTIME_A</name>
<brief>Program run time (idle time)</brief>
<description>The variable $AC_PRTIME_A "ProgramRunTIME-Auxilary" determines the idle times for the program runtime. During the simulation, the anticipated processing time (idle times) of the blocks in the part program is calculated, and made available in this system variable and the OPI variable 'acPRTimeA'. This value is cleared by writing a value to the variable.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PRTIME_M_INC</name>
<brief>Increment ProgramRunTIME-Main</brief>
<description>The machining time in the program runtime can be incremented by writing the variable $AC_PRTIME_M_INC "ProgramRunTIME-Main-INCrement" During the simulation, the anticipated processing time of the blocks in the part program is calculated, and made available in the OPI variable 'acPRTimeM'. As certain times (e.g. PLC times) are not considered, the precalculated program runtime can be corrected by writing this variable explicitly.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PRTIME_A_INC</name>
<brief>Increment ProgramRunTIME-Aux.</brief>
<description>The idle time in the program runtime can be incremented by writing to the variable $AC_PRTIME_A_INC "ProgramRunTIME-Auxilary-INCrement". During the simulation, the anticipated processing time of the blocks in the part program is calculated, and made available in the OPI variable 'acPRTimeM'. As certain times (e.g. PLC times) are not considered, the precalculated program runtime can be corrected by writing this variable explicitly.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PATHN</name>
<brief>Normalized path parameter</brief>
<description>Variable $AC_PATHN is a normalized path parameter whose value varies between 0 at the block start and 1 at the block end.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_DTBW</name>
<brief>Distance from block start in WCS</brief>
<description>Variable $AC_DTBW determines the geometric distance from the block start in the workpiece coordinate system. The programmed position is used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_REPOS_PATH_MODE</name>
<brief>-</brief>
<description>Type of Repos mode
0         not defined.
1 == RMB  Repos approach to start of interrupted block
2 == RMI  Repos approach to interruption point in interrupted block
3 == RME  Repos approach to end of interrupted block
4 == RMN  Repos approach to next geometric point in interrupted block
The variable is defined if a REPOS command is currently being executed, or if a new REPOS mode has been specified via the VDI.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_DTBB</name>
<brief>Distance from block start in BCS</brief>
<description>Variable $AC_DTBB determines the geometric distance from the block start in the basic coordinate system. The programmed position is used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_DTEW</name>
<brief>Distance from block end in WCS</brief>
<description>Variable $AC_DTEW determines the geometric distance from the block end in the workpiece coordinate system. The programmed position is used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_DTEB</name>
<brief>Distance from block end in BCS</brief>
<description>Variable $AC_DTEB determines the geometric distance from the block end in the basic coordinate system. The programmed position is used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PLTBB</name>
<brief>Path from block start in BCS</brief>
<description>Variable $AC_PLTBB determines the path from the block start in the basic coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PLTEB</name>
<brief>Path to block end in BCS</brief>
<description>Variable $AC_PLTEB determines the path to the block end in the basic coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_DELT</name>
<brief>Path distance to go in WCS</brief>
<description>Variable $AC_DELT is used to read the stored path distance to go in the workpiece coordinate system after delete distance to go in motion-synchronous actions.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_APDV</name>
<brief>Position values for SAR are valid</brief>
<description>Returns True if the position values which can be read with $P_APR[X] or $P_AEP[X] (respectively starting point or contour point in the case of smooth approach and retraction) are valid.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_F</name>
<brief>Programmed path feed</brief>
<description>Variable $P_F is used to read the last programmed path feed F.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_F</name>
<brief>Active programmed path feed</brief>
<description>Variable $AC_F is used to read the active programmed path feed F.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_F_G0</name>
<brief>Max. rapid traverse in block</brief>
<description>Variable $AC_F_G0 returns the maximum rapid traverse velocity in the block.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OVR</name>
<brief>Path override can be specified via synchronized action</brief>
<description>The variable $AC_OVR determines the path override specifiable via synchronized action. The path override must be set by assigning a value cyclically to $AC_OVR in each interpolation cycle. Otherwise $AC_OVR is reset to 100%. The total path override can be read via $AC_TOTAL_OVR. The total path override without the programmable override (e.g. OVR = 10) is limited to the maximum value defined by the machine data $MN_OVR_FACTOR_LIMIT_BIN or $MN_OVR_FACTOR_FEEDRATE[30]. Values less than 0 are not allowed.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PLC_OVR</name>
<brief>PLC override</brief>
<description>The variable $AC_PLC_OVR determines the path override defined by the PLC. This is the feedrate override that is set via the Machine Control Panel. The rapid traverse override (settable on the Machine Control Panel) is effective with G0 blocks. If the rapid traverse reduction has been activated via the operator interface, then, with G0 blocks, $SC_OVR_RAPID_FACTOR is also taken into account multiplicatively.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TOTAL_OVR</name>
<brief>Overall path override</brief>
<description>The variable $AC_TOTAL_OVR supplies the total path override. The value is calculated from the override from the PLC, the synchronized action override ($AC_OVR) and the programmable override (e.g. OVR = 10).

  $AC_TOTAL_OVR = $AC_PLC_OVR * $AC_OVR * OVR / 10000.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_VC</name>
<brief>Additive path feed override</brief>
<description>The override value must be rewritten in every Ipo cycle or else a value of 0 is applied. The override value is ignored with an override of 0. Otherwise, the override value is applied independent of the override. The total feedrate cannot be made negative by an override value. An upper limit is applied to ensure that the maximum axis velocities and acceleration rates cannot be exceeded. The maximum feedrate is limited by $MN_OVR_FACTOR_LIMIT_BIN, $MN_OVR_FACTOR_FEEDRATE[30] (see machine data). The override value is not included in the calculation in the case of G0, G33, G331, G332 and G63. The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PATHACC</name>
<brief>Path acceleration for real-time events</brief>
<description>Defines an increased path acceleration for override changes and stop/start events. $AC_PATHACC is taken into account only if the value is higher than the prepared acceleration limit. A value of 0 deselects the function. Values which cause machine axis acceleration rates twice the rate configured in $MA_MAX_AX_ACCEL[..] are limited internally.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PATHJERK</name>
<brief>Path jerk for real-time events</brief>
<description>Defines an increased path jerk for override changes and stop/start events. $AC_PATHJERK is taken into account only if the value is higher than the prepared jerk limit. A value of 0 deselects the function.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_VACTB</name>
<brief>Path velocity of geometry axes</brief>
<description>Path velocity in the basic coordinate system.
The velocity is calculated from the velocities of the geometry axes - independent of FGROUP.
The variable can be accessed only from synchronized actions
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_VACTW</name>
<brief>WCS path velocity of geometry axes</brief>
<description>Path velocity in the workpiece coordinate system
The velocity is calculated from the velocities of the geometry axes - independent of FGROUP.
The variable can be accessed only from synchronized actions
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_S</name>
<brief>Programmed spindle speed</brief>
<description>Last programmed spindle speed
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_S</name>
<brief>Current spindle speed</brief>
<description>Actual spindle speed. The sign corresponds to the direction of rotation.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_CONSTCUT_S</name>
<brief>Programmed cutting rate</brief>
<description>Last programmed constant cutting rate
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_CONSTCUT_S</name>
<brief>Current constant cutting rate</brief>
<description>Current constant cutting rate.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_SEARCH_S</name>
<brief>Search  run: speed, cutting rate</brief>
<description>Last programmed spindle speed collected during block search or cutting rate
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SDIR</name>
<brief>Programmed direction of spindle rotation</brief>
<description>Programmed direction of spindle rotation in part program
3: CW spindle rotation
4: CCW spindle rotation
5: Spindle stop
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SDIR</name>
<brief>Current direction of spindle rotation within the meaning of M3/M4/M5</brief>
<description>Current direction of spindle rotation within the meaning of M3/M4/M5 in the part program, synchronized actions, PLC FC18, PLC DBB30.
3: CW spindle rotation
4: CCW spindle rotation
5: Spindle stop
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SEARCH_SDIR</name>
<brief>Block search: programmed direction of spindle rotation in part program</brief>
<description>Last programmed direction of spindle rotation collected during block search
3:   M3 CW spindle rotation
4:   M4 CCW spindle rotation
5:   M5 Spindle stop
-19: M19, SPOS, SPOSA spindle positioning, position and approach mode is read from SEARCH variables
70:  M70 Changeover to axis mode
-5:  No direction of rotation programmed, not output.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SMODE</name>
<brief>Spindle mode</brief>
<description>The spindle mode resulting from the last spindle programming action is returned.
0: No spindle programmed in channel, or spindle is active in another channel, or is being used by the PLC (FC18) or synchronized actions.
1: Speed control mode
2: Positioning mode
3: Synchronous mode
4: Axis mode
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SMODE</name>
<brief>Current  spindle mode</brief>
<description>Current spindle mode:
0: No spindle programmed in channel
1: Speed control mode
2: Positioning mode
3: Synchronous mode
4: Axis mode
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SGEAR</name>
<brief>Spindle: set gear stage</brief>
<description>Spindle gear stage last programmed or requested by S programming in the case of M40
1: 1. Gear stage requested
....
5: 5. Gear stage requested
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SGEAR</name>
<brief>Active spindle gear stage</brief>
<description>Active spindle gear stage
1: 1. Gear stage is active
....
5: 5. Gear stage is active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SAUTOGEAR</name>
<brief>Automatic gear stage change</brief>
<description>Automatic gear stage change (M40) is programmed.
0: Gear stages are requested by M41..M45
1: Gear stage is calculated and requested according to programmed speed (S)
(M40 automatic gear stage change is active)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SEARCH_SGEAR</name>
<brief>Search run: Gear stage M code</brief>
<description>Last programmed gear stage M function collected during block search
40: M40 automatic gear stage change
41: M41 1st gear stage requested
...
45: M45 5th gear stage requested
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_SEARCH_SPOS</name>
<brief>Search run: Spindle position, path</brief>
<description>Spindle position or traversing path last programmed via M19, SPOS or SPOSA and collected during block search.
Position: 0...359,999 if the value in MD 30330 MODULO_RANGE is 360.0 degrees
Path: -100000000 ... 100000000 degrees. The sign specifies the direction of travel.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SEARCH_SPOSMODE</name>
<brief>Search run: Position approach mode</brief>
<description>Position approach mode last programmed via M19, SPOS or SPOSA and collected during block search.
0: DC
1: AC
2: IC
3: DC
4: ACP
5: ACN
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_NUM_SPINDLES</name>
<brief>Number of spindles in channel</brief>
<description>Calculates the maximum number of spindles in the channel
0: No spindle programmed in channel.
1..n: Number of spindles in channel.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MSNUM</name>
<brief>Number  of  master spindle</brief>
<description>Returns the number of the master spindle.
0: No spindle programmed in channel
1..n: Number of master spindle
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MSNUM</name>
<brief>Number of master spindle</brief>
<description>Returns the number of the current master spindle.
0: No spindle configured
1..n: Number of master spindle
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MTHNUM</name>
<brief>-</brief>
<description>$P_MTHNUM - meaningful only when magazine management is active
Returns the number of the master toolholder.
0: No master toolholder configured
1..n: Number of master toolholder
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MTHNUM</name>
<brief>-</brief>
<description>$AC_MTHNUM - meaningful only when magazine management is active
Returns the number of the current master toolholder:
0: No master toolholder configured
1..n: Number of master toolholder
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_GWPS</name>
<brief>Constant grinding wheel peripheral  speed active</brief>
<description>Constant grinding wheel surface speed ON if TRUE
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT1LL</name>
<brief>Lower limit for 1st polynomial function</brief>
<description>Variable $AC_FCT1LL is used to define the lower limit for the first polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT2LL</name>
<brief>Lower limit for 2nd polynomial function</brief>
<description>Variable $AC_FCT2LL is used to define the lower limit for the second polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT3LL</name>
<brief>Lower limit for 3rd polynomial function</brief>
<description>Variable $AC_FCT3LL is used to define the lower limit for the third polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT1UL</name>
<brief>Upper limit for 1st polynomial function</brief>
<description>Variable $AC_FCT1UL is used to define the upper limit for the first polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT2UL</name>
<brief>Upper limit for 2nd polynomial function</brief>
<description>Variable $AC_FCT2UL is used to define the upper limit for the second polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FCT3UL</name>
<brief>Upper limit for 3rd polynomial function</brief>
<description>Variable $AC_FCT3UL is used to define the upper limit for the third polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT1C</name>
<brief>Coefficients for 1st polynomial function</brief>
<description>Array variable $AC_FCT1C[n] is used to program polynomial coefficients a0 - a3 for the first polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT2C</name>
<brief>Coefficients for 2nd polynomial function</brief>
<description>Array variable $AC_FCT2C[n] is used to program polynomial coefficients a0 - a3 for the second polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT3C</name>
<brief>Coefficients for 3rd polynomial function</brief>
<description>Array variable $AC_FCT3C[n] is used to program polynomial coefficients a0 - a3 for the third polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCTLL</name>
<brief>Lower limit of polynomial functions</brief>
<description>Array variable $AC_FCTLL[n] is used to define the lower limit for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCTUL</name>
<brief>Upper limit of polynomial functions</brief>
<description>Array variable $AC_FCTUL[n] is used to define the upper limit for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT0</name>
<brief>1st coefficient of polynomial functions</brief>
<description>Array variable $AC_FCT0[n] is used to program the a0 coefficient for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT1</name>
<brief>2nd coefficient of polynomial functions</brief>
<description>Array variable $AC_FCT1[n] is used to program the a1 coefficient for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT2</name>
<brief>3rd coefficient of polynomial functions</brief>
<description>Array variable $AC_FCT2[n] is used to program the a2 coefficient for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_FCT3</name>
<brief>4th coefficient of polynomial functions</brief>
<description>Array variable $AC_FCT3[n] is used to program the a3 coefficient for the nth polynomial function.
The polynomial function can also be defined by FCTDEF(polynomial no., lower limit, upper limit, a0, a1, a2, a3).
n: Number of the polynomial
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_ALARM_STAT</name>
<brief>Alarm responses</brief>
<description>Variable $AC_ALARM_STAT returns selected alarm responses.
The following bits are possible:
0x04    Channel status NOREADY
0x40    Stop due to alarm
0x200   Signal to PLC
0x11    Axes in follow-up
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AN_ESR_TRIGGER</name>
<brief>ESR trigger</brief>
<description>$AN_ESR_TRIGGER = 1
Trigger "Extended stop and retract"
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AC_ESR_TRIGGER</name>
<brief>ESR trigger</brief>
<description>$AC_ESR_TRIGGER = 1
Trigger "numerically controlled ESR"
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OPERATING_TIME</name>
<brief>Operating time of NC programs in AUTOMATIC mode</brief>
<description>$AC_OPERATING_TIME measures the total operating time of all NC programs in AUTOMATIC mode between NC Start and end of program / NC Reset (in seconds).

The measurement can be activated with channel MD 27860 $MC_PROCESSTIMER_MODE:
Bit 0 = 1    $AC_OPERATING_TIME measurement is active.

The following measurement conditions can be selected:
Bit 4 = 0    No measurement when dry run feed is active
Bit 4 = 1    Measurement even when dry run feed is active
Bit 5 = 0    No measurement during program test
Bit 5 = 1    Measurement even during program test
Bit 9 = 0    No measurement when override is 0%
Bit 9 = 1    Measurement even when override is 0%0

Use in NC program:
IF $AC_OPERATING_TIME &lt; 12000 GOTOB STARTMARK
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_CYCLE_TIME</name>
<brief>Execution time of the selected NC program</brief>
<description>$AC_CYCLE_TIME measures the operating time of the selected NC program between NC Start and end of program/NC Reset (in seconds).
The timer is cleared at each program start.

The measurement can be activated using channel MD 27860 $MC_PROCESSTIMER_MODE:
Bit 1 = 1    $AC_CYCLE_TIME measurement of current program runtime is active.

The following measurement conditions can be selected:
Bit 4 = 0    No measurement when dry run feed is active
Bit 4 = 1    Measurement even when dry run feed is active
Bit 5 = 0    No measurement during program test
Bit 5 = 1    Measurement even during program test
Bit 6 = 0    Cleared even with start by ASUB and PROG_EVENTs
Bit 6 = 1    Not cleared with start by ASUB and PROG_EVENTs
Bit 8 = 0    Not cleared by a jump to program start with GOTOS
Bit 8 = 1    Cleared by a jump to program start with GOTOS
Bit 9 = 0    No measurement when override is 0%
Bit 9 = 1    Measurement even when override is 0%

Use in NC program:
IF $AC_CYCLE_TIME&gt; 2400 GOTOF ALARM01
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_CUTTING_TIME</name>
<brief>Machining time</brief>
<description>$AC_CUTTING_TIME is used to measure the machining time (in seconds).
This time is defined as the operating time of the path axes (at least one is active) excluding periods when rapid traverse is active in all NC programs between NC Start and end of program / NC Reset optionally including/not including active tool. The measurement is also interrupted whenever a dwell time is active. The timer is automatically reset to zero each time the control boots with default values.

The measurement can be activated using channel MD 27860 $MC_PROCESSTIMER_MODE:
Bit 2 = 1    $AC_CUTTING_TIME measurement is active.

The following measurement conditions can be selected:
Bit 4 = 0    No measurement when dry run feed is active
Bit 4 = 1    Measurement even when dry run feed is active
Bit 5 = 0    No measurement during program test
Bit 5 = 1    Measurement even during program test
Bit 7 = 0    Measurement only with active tool
Bit 7 = 1    Measurement runs irrespective of the tool

Use in NC program:
IF $AC_CUTTING_TIME&gt; 6000 GOTOF ACT_M06
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_REQUIRED_PARTS</name>
<brief>Definition of the number of required workpieces</brief>
<description>$AC_REQUIRED_PARTS can be used to define the number of workpieces which, when reached, causes the number of actual workpieces $AC_ACTUAL_PARTS to be reset (workpiece target).

Channel MD 27880 $MC_PART_COUNTER can be used to activate the display alarm "workpiece target reached" and channel VDI signal "workpiece target reached":
Bit 0 = 1:    $AC_REQUIRED_PARTS counter is active

Further meaning of bit 1 only when bit 0 = 1:
Bit 1 = 0: Alarm/VDI output when $AC_ACTUAL_PARTS matches $AC_REQUIRED_PARTS
Bit 1 = 1:    Alarm/VDI output when $AC_SPECIAL_PARTS matches $AC_REQUIRED_PARTS

Use in NC program:
$AC_REQUIRED_PARTS = ACTUAL_LOS
e.g. for defining a batch size, a daily production output ...
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TOTAL_PARTS</name>
<brief>Total number of all machined workpieces</brief>
<description>The $AC_TOTAL_PARTS counter indicates the number of all workpieces machined since the start time. The counter is incremented by 1 when the MC command defined in channel MD 27882$MC_PART_COUNTER_MCODE[0] is output to the PLC. The counter is automatically reset only when the control boots with default values.

Channel MD 27880 $MC_PART_COUNTER can be used to activate the timer:
Bit 4 = 1:    $AC_TOTAL_PARTS counter is active

Further meaning of bits 5-6 only when bit 4 = 1:
Bit 5 = 0:    The $AC_TOTAL_PARTS counter is incremented by 1 on a VDI output of M02/M30
Bit 5 = 1:    The $AC_TOTAL_PARTS counter is incremented by 1 when the M command from MD PART_COUNTER_MCODE[0] is output.
Bit 6 = 0:    $AC_TOTAL_PARTS active even during program test/block search
Bit 6 = 1:    No processing of $AC_TOTAL_PARTS during program test/block search

Use in NC program:
IF $AC_TOTAL_PARTS&gt; SERVICE_COUNT GOTOF MARK_END
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_ACTUAL_PARTS</name>
<brief>Number of workpieces currently machined</brief>
<description>The $AC_ACTUAL_PARTS counter records the number of all workpieces machined since the start time. When the workpiece target is reached ($AC_REQUIRED_PARTS), the counter is automatically reset ($AC_REQUIRED_PARTS not equal to 0). The counter is incremented by 1 when the MC command defined in channel MD 27882$MC_PART_COUNTER_MCODE[1] is output to the PLC. The counter is automatically reset only when the control boots with default values.

Channel MD 27880 $MC_PART_COUNTER can be used to activate the timer:
Bit 4 = 1:    $AC_TOTAL_PARTS counter is active

Further meaning of bits 5-6 only when bit 4 = 1:
Bit 5 = 0:    The $AC_TOTAL_PARTS counter is incremented by 1 on a VDI output of M02/M30
Bit 5 = 1:    The $AC_TOTAL_PARTS counter is incremented by 1 when the M command from MD PART_COUNTER_MCODE[0] is output.
Bit 6 = 0:    $AC_TOTAL_PARTS active even during program test/block search
Bit 6 = 1:    No processing of $AC_TOTAL_PARTS during program test/block search

Use in NC program:
IF $AC_ACTUAL_PARTS == 0 GOTOF NEW_RUN
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SPECIAL_PARTS</name>
<brief>Number of workpieces counter by user</brief>
<description>The $AC_SPECIAL_PARTS counter allows the user to apply his own strategy for counting workpieces.

Channel MD 27880 $MC_PART_COUNTER can be used to activate the timer:
Bit 12 = 1: $AC_SPECIAL_PARTS counter is active

Further meaning of bits 13-15 only when bit 12 = 1:
Bit 13 = 0: The $AC_SPECIAL_PARTS counter is incremented by 1 on a VDI output of M02/M30
Bit 13 = 1: The $AC_SPECIAL_PARTS counter is incremented by 1 when the M command from MD PART_COUNTER_MCODE[2] is output.
Bit 14 = 0: $AC_SPECIAL_PARTS active even during program test/block search
Bit 14 = 1: No processing of $AC_SPECIAL_PARTS during program test/block search

Use in NC program:
$AC_SPECIAL_PARTS = R20
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_G0MODE</name>
<brief>Path traversal with G0</brief>
<description>0: G0 not active
1: G0 and linear interpolation active
2: G0 and non-linear interpolation active.

The response of the path axes to G0 depends on machine data $MC_G0_LINEAR_MODE (Siemens mode) or $MC_EXTERN_G0_LINEAR_MODE (ISO mode):
With linear interpolation, the path axes traverse together, With non-linear interpolation, the path axes are traversed as positioning axes.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_SEMA</name>
<brief>Semaphore to measurement interface</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_SEMA is used to synchronize measuring processes. The variable should be set to 1 before each assignment of the measurement interface and set to 0 when releasing it. Only one measurement interface is available for each channel and should be assigned only if the $AC_MEAS_SEMA contains the value 0.

Application:
if ($AC_MEAS_SEMA == 0)
   $AC_MEAS_SEMA = 1 ; Assign measurement interface
endif
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_MEAS_LATCH</name>
<brief>Unlatch measuring points</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_LATCH[n] is used to unlatch all current axis positions with reference to a selected coordinate system. Variable $AC_MEAS_P1_COORD is used to select the coordinate system. $AC_MEAS_P4_COORD.

Application:
$AA_MEAS_LATCH[0] = 1   ; Unlatch 1st measuring point of all axes
$AA_MEAS_LATCH[1] = 1   ; Unlatch 2nd measuring point of all axes
$AA_MEAS_LATCH[2] = 1   ; Unlatch 3rd measuring point of all axes
$AA_MEAS_LATCH[3] = 1   ; Unlatch 4th measuring point of all axes

The unlatched measuring point is stored in $AA_MEAS_POINT1[ax].
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_P1_COORD</name>
<brief>Coordinate system 1st measuring point</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_P1_COORD is used to set the coordinate system frame for the 1st measuring point.

Application:
$AC_MEAS_P1_COORD = 0 ; WCS
$AC_MEAS_P1_COORD = 1 ; BCS
$AC_MEAS_P1_COORD = 2 ; MCS
$AC_MEAS_P1_COORD = 3 ; SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_P2_COORD</name>
<brief>Coordinate system 2nd measuring point</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_P2_COORD is used to set the coordinate system frame for the 2nd measuring point.

Application:
$AC_MEAS_P2_COORD = 0 ; WCS
$AC_MEAS_P2_COORD = 1 ; BCS
$AC_MEAS_P2_COORD = 2 ; MCS
$AC_MEAS_P2_COORD = 3 ; SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_P3_COORD</name>
<brief>Coordinate system 3rd measuring point</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_P3_COORD is used to set the coordinate system frame for        the 3rd measuring    point.

Application:
$AC_MEAS_P3_COORD = 0 ; WCS
$AC_MEAS_P3_COORD = 1 ; BCS
$AC_MEAS_P3_COORD = 2 ; MCS
$AC_MEAS_P3_COORD = 3 ; SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_P4_COORD</name>
<brief>Coordinate system 4th measuring point</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_P4_COORD is used to set the coordinate system frame for the 4th measuring point.

Application:
$AC_MEAS_P4_COORD = 0 ; WCS
$AC_MEAS_P4_COORD = 1 ; BCS
$AC_MEAS_P4_COORD = 2 ; MCS
$AC_MEAS_P4_COORD = 3 ; SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_SET_COORD</name>
<brief>Coordinate system of position setpoint</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_SET_COORD is used to set the coordinate system for the position setpoint.

Application:
$AC_MEAS_SET_COORD = 0 ; WCS
$AC_MEAS_SET_COORD = 1 ; BCS
$AC_MEAS_SET_COORD = 2 ; MCS
$AC_MEAS_SET_COORD = 3 ; SZS
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_WP_SETANGLE</name>
<brief>Workpiece position angle setpoint</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AC_MEAS_WP_SETANGLE is used to define an angle setpoint for the workpiece position.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_CORNER_SETANGLE</name>
<brief>Cutting angle setpoint for workpiece corner</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_CORNER_SETANGLE is used to define an angle setpoint for the corner of a workpiece.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_DIR_APPROACH</name>
<brief>Approach direction to workpiece</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_DIR_APPROACH is used to define the direction of approach to the workpiece.

The following values are possible:
0:+x
1:-x
2:+y
3:-y
4:+z
5:-z
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_ACT_PLANE</name>
<brief>Working plane for workpiece</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_ACT_PLANE is used to define the working plane. The working plane is needed in order to define the tool orientation.

The following values are possible:
0: G17 working plane x/y infeed direction z
1: G18 working plane z/x infeed direction y
2: G19 working plane y/z infeed direction x
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_FINE_TRANS</name>
<brief>Fine offset</brief>
<description>Variable for workpiece and tool measurement.
When measuring workpieces, translation offsets can be entered in the fine offset component of the selected frame. Variable $AC_MEAS_FINE_TRANS is used for this purpose.

The following values are possible:
0: Translation offset is entered in coarse offset
1: Translation offset is entered in fine offset
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_FRAME_SELECT</name>
<brief>Frame selection for workpiece measurement</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_FRAME_SELECT is used to select the frame in which the calculated frame is entered.

The following values are possible:
0:           $P_SETFRAME
1:           $P_PARTFRAME
2:           $P_EXTFRAME
10..25:      $P_CHBFRAME[0..15]
50..65:      $P_NCBFRAME[0..15]
100..199:    $P_IFRAME
500:         $P_TOOLFRAME
501:         $P_WPFRAME
502:         $P_TRAFRAME
503:         $P_PFRAME
504:         $P_CYCFRAME
505:         $P_RELFRAME (PCS)
506:         $P_RELFRAME (ACS)
1010..1025:  $P_CHBFRAME[0..15], when G500 is active
1050..1065:  $P_NCBFRAME[0..15], when G500 is active
2000:        $P_SETFR
2001:        $P_PARTFR
2002:        $P_EXTFR
2010..2025:  $P_CHBFR[0..15]
2050..2065:  $P_NCBFR[0..15]
2100..2199:  $P_UIFR[0..99]
2500:        $P_TOOLFR
2501:        $P_WPFR
2502:        $P_TRAFR
2504:        $P_CYCFR
2505:        $P_RELFR (PCS)
2506:        $P_RELFR (ACS)
3010..3025:  $P_CHBFR[0..15], when G500 is active
3050..3065:  $P_NCBFR[0..15], when G500 is active
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_CHSFR</name>
<brief>Frame selection for system frames</brief>
<description>Variable for workpiece and tool measurement.
In order to convert a position from one coordinate system to another, $AC_MEAS_CHSFR can be used to define the composition of the desired frame chain. The value of the variable should be selected according to the system frame bitmask $MC_MM_SYSTEM_FRAME_MASK.

Application:
$AC_MEAS_CHSFR = 'B1001'
Only the system frames for preset actual value and TOROT are included in the calculation of the new overall frame.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_NCBFR</name>
<brief>Frame selection for global basic frames</brief>
<description>Variable for workpiece and tool measurement.
In order to convert a position from one coordinate system to another, $AC_MEAS_NCBFR can be used to define the composition of the desired frame chain. The value of the variable should be interpreted as a bitmask from 0x0 to 0xFFFF for the global basic frames (up to 16 frames in total).

Application:
$AC_MEAS_NCBFR = 'B11'
Only the first two global basic frames are included in the calculation of the new overall frame.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_CHBFR</name>
<brief>Frame selection for channel basic frames</brief>
<description>Variable for workpiece and tool measurement.
In order to convert a position from one coordinate system to another, $AC_MEAS_CHBFR can be used to define the composition of the desired frame chain. The value of the variable should be interpreted as a bitmask from 0x0 to 0xFFFF for the channel basic frames (up to 16 frames in total).

Application:
$AC_MEAS_CHBFR = 'B11'
Only the first two channel basic frames are included in the calculation of the new overall frame.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_UIFR</name>
<brief>Frame selection for settable frames</brief>
<description>Variable for workpiece and tool measurement.
In order to convert a position from one coordinate system to another, $AC_MEAS_UIFR can be used to define the composition of the desired frame chain. The variable range for the settable frames is from 0 to 99 (up to 100 in total).

Application:
$AC_MEAS_UIFR = 1
The G54 frame is included in the calculation of the new overall frame.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_PFRAME</name>
<brief>Frame selection for the prog. frame</brief>
<description>Variable for workpiece and tool measurement.
In order to convert a position from one coordinate system to another, $AC_MEAS_PFRAME can be used to define the composition of the desired frame chain.

The following values are allowed:
$AC_MEAS_PFRAME = 1 ; Programmable frame is not included in calculation
$AC_MEAS_PFRAME = 0 ; Programmable frame is included in calculation
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_T_NUMBER</name>
<brief>Tool selection</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_T_NUMBER is used to select the tool for workpiece and tool measurement. The tool number of the active tool must match the selected tool. The active tool is included in the calculation when T0 is selected. If no tool is selected, the tool selected by $AC_MEAS_T_NUMBER is used in the calculation.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_TOOL_MASK</name>
<brief>Tool position</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_TOOL_MASK specifies the tool position and considers the tool lengths for workpiece and tool measurement.

The following values are possible:
0x0:    Default setting; all tool lengths are included
0x1:    The radius of the tool is not included in the calculation
0x2:    The tool is positioned in the x direction (G19)
0x4:    The tool is positioned in the y direction (G18)
0x8:    The tool is positioned in the z direction (G17)
0x10:   The length of the tool is not included in the calculation.
0x20:   The length of the active tool is included in the transformation of the coordinates of a position.
0x40:   The tool is positioned in the x direction (G19)
0x80:   The tool is positioned in the y direction (G18)
0x100:  The tool is positioned in the z direction (G17)
0x200:  Differences in the tool lengths are subtracted.

Whether or not the radius of a milling tool is included in the calculation is determined from the tool position and direction of approach. If the direction of approach is not specified explicitly, it is derived from the selected plane. The direction of approach is in -z for G17, -y for G18 and -x for G19.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_D_NUMBER</name>
<brief>Cutting edge selection</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_D_NUMBER is used to select the tool cutting edge for workpiece and tool measurement. The tool cutting edge number of the active tool must match the selected cutting edge. The active cutting edge is included in the calculation when D0 is selected. If no tool is selected, the cutting edge selected by $AC_MEAS_D_NUMBER is used in the calculation.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_TYPE</name>
<brief>Measurement type selection</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_TYPE is used to select the type of measurement.

The following values are possible:
0:      Default setting
1:      x edge
2:      y edge
3:      z edge
4:      Corner 1
5:      Corner 2
6:      Corner 3
7:      Corner 4
8:      Hole
9:      Shaft
10:     Tool length
11:     Tool diameter
12:     Groove
13:     Web
14:     Preset actual value memory for geo and special axes
15:     Preset actual value memory for special axes only
16:     Inclined edge
17:     Plane_Angles (2 solid angles in one plane)
18:     Plane_Normal (3 solid angles in one plane with specified setpoint)
19:     Dimension_1 (1-dimensional setpoint specification)
20:     Dimension_2 (2-dimensional setpoint specification)
21:     Dimension_3 (3-dimensional setpoint specification)
22:     ToolMagnifier (ShopTurn: Measurement of tool lengths with magnifier)
23:     ToolMarkedPos (ShopTurn: Measurement of a tool length with marked position)
24:     Coordinate transformation of a position
25:     Rectangle
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_VALID</name>
<brief>Validity bits of measurement variables.</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_VALID is used to define which system variables are valid for the current measurement. The value should  be set to 0 before every measurement The individual bits are set implicitly when the corresponding variables are written.

Bit 0:   $AA_MEAS_POINT1[axis]
Bit 1:   $AA_MEAS_POINT2[axis]
Bit 2:   $AA_MEAS_POINT3[axis]
Bit 3:   $AA_MEAS_POINT4[axis]
Bit 4:   $AA_MEAS_SETPOINT[axis]
Bit 5:   $AC_MEAS_WP_SETANGLE
Bit 6:   $AC_MEAS_CORNER_SETANGLE
Bit 7:   $AC_MEAS_T_NUMBER
Bit 8:   $AC_MEAS_D_NUMBER
Bit 9:   $AC_MEAS_DIR_APPROACH
Bit 10:  $AC_MEAS_ACT_PLANE
Bit 11:  $AC_MEAS_FRAME_SELECT
Bit 12:  $AC_MEAS_TYPE
Bit 13:  $AC_MEAS_FINE_TRANS
Bit 14:  $AA_MEAS_SETANGLE[axis]
Bit 15:  $AC_MEAS_SCALEUNIT
Bit 16:  $AC_MEAS_TOOL_MASK
Bit 17:  $AC_MEAS_P1_COORD
Bit 18:  $AC_MEAS_P2_COORD
Bit 19:  $AC_MEAS_P3_COORD
Bit 20:  $AC_MEAS_P4_COORD
Bit 21:  $AC_MEAS_SET_COORD
Bit 22:  $AC_MEAS_CHSFR
Bit 23:  $AC_MEAS_NCBFR
Bit 24:  $AC_MEAS_CHBFR
Bit 25:  $AC_MEAS_UIFR
Bit 26:  $AC_MEAS_PFRAME
Bit 27:  $AC_MEAS_INPUT
Bit 28:  $AC_MEAS_GFR
Bit 29:  $AC_MEAS_ORIWKS
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$AC_MEAS_FRAME</name>
<brief>Result frame for workpiece measurement</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_FRAME is the result frame for workpiece measurement. This frame is calculated by the MEASURE() function or a PI service and is not part of the active frame chain. The calculated result frame can then be copied into the selected frame ($AC_MEAS_FRAME_SELECT) by the part program or a further PI service.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_WP_ANGLE</name>
<brief>Workpiece position angle</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_WP_ANGLE is the calculated workpiece position angle for workpiece measurement. The value specifies the relative position of the workpiece in the workpiece coordinate system (WCS).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_CORNER_ANGLE</name>
<brief>Angle of a corner</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_CORNER_ANGLE is the calculated cutting angle of the corner for workpiece measurement.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_DIAMETER</name>
<brief>Tool diameter</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_DIAMETER is the calculated diameter for tool measurement.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_MEAS_TOOL_LENGTH</name>
<brief>Tool length</brief>
<description>Variable for workpiece and tool measurement.
Variable $AC_MEAS_TOOL_LENGTH is the calculated tool length for tool measurement.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_MEAS_RESULTS</name>
<brief>Measurement results</brief>
<description>Variable for workpiece and tool measurement.
Array variable $AC_MEAS_RESULTS[n] contains the calculation results. The measurement type ($AC_MEAS_TYPE) determines which elements of the array are written.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_SCALEUNIT</name>
<brief>Measurement unit</brief>
<description>Variable for workpiece and tool measurement.
The variable $AC_MEAS_SCALEUNIT specifies the unit of measurement according to the configuration of the input and output values.

The following values are possible:
0: The unit of measurement depends on the active G code INCH: G70/G700 METRIC: G71/G710
1: The unit of measurement corresponds to the configuration (default setting)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_CHANNO</name>
<brief>-</brief>
<description>Interrogate current channel     number.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_SERUPRO</name>
<brief>-</brief>
<description>$AC_SERUPRO
Interrogate whether search type Serupro is active. (Serupro: "Block search  via  program test")
Can be used in Synacts and the part program
$AC_SERUPRO = 0  Search type Serupro is not active
$AC_SERUPRO = 1  Search type Serupro is active
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_VACTBF</name>
<brief>Path velocity in the BCS</brief>
<description>$AC_VACTBF supplies the path velocity in the basic coordinate system. FGroup and FGREF are taken into account.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_VACTWF</name>
<brief>Path velocity in the WCS</brief>
<description>Path velocity in workpiece coordinate system. FGROUP and FGREF are taken into account.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR0</name>
<brief>Access to 1st channel basic frame</brief>
<description>Access to 1st channel basic frame. Corresponds to $P_CHBFR[0].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR1</name>
<brief>Access to 2nd channel basic frame</brief>
<description>Access to 2nd channel basic frame. Corresponds to $P_CHBFR[1].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR2</name>
<brief>Access to 3rd channel basic frame</brief>
<description>Access to 3rd channel basic frame. Corresponds to $P_CHBFR[2].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR3</name>
<brief>Access to 4th channel basic frame</brief>
<description>Access to 4th channel basic frame. Corresponds to $P_CHBFR[3].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR4</name>
<brief>Access to 5th channel basic frame</brief>
<description>Access to 5th channel basic frame. Corresponds to $P_CHBFR[4].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR5</name>
<brief>Access to 6th channel basic frame</brief>
<description>Access to 6th channel basic frame. Corresponds to $P_CHBFR[5].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR6</name>
<brief>Access to 7th channel basic frame</brief>
<description>Access to 7th channel basic frame. Corresponds to $P_CHBFR[6].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR7</name>
<brief>Access to 8th channel basic frame</brief>
<description>Access to 8th channel basic frame. Corresponds to $P_CHBFR[7].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR8</name>
<brief>Access to 9th channel basic frame</brief>
<description>Access to 9th channel basic frame. Corresponds to $P_CHBFR[8].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR9</name>
<brief>Access to 10th channel basic frame</brief>
<description>Access to 10th channel basic frame. Corresponds to $P_CHBFR[9].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR10</name>
<brief>Access to 11th channel basic frame</brief>
<description>Access to 11th channel basic frame. Corresponds to $P_CHBFR[10].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR11</name>
<brief>Access to 12th channel basic frame</brief>
<description>Access to 12th channel basic frame. Corresponds to $P_CHBFR[11].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR12</name>
<brief>Access to 13th channel basic frame</brief>
<description>Access to 13th channel basic frame. Corresponds to $P_CHBFR[12].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR13</name>
<brief>Access to 14th channel basic frame</brief>
<description>Access to 14th channel basic frame. Corresponds to $P_CHBFR[13].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR14</name>
<brief>Access to 15th channel basic frame</brief>
<description>Access to 15th channel basic frame. Corresponds to $P_CHBFR[14].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFR15</name>
<brief>Access to 16th channel basic frame</brief>
<description>Access to 16th channel basic frame. Corresponds to $P_CHBFR[15].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR0</name>
<brief>Access to 1st NCU-global basic frame</brief>
<description>Access to 1st NCU-global basic frame. Corresponds to $P_NCBFR[0].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR1</name>
<brief>Access to 2nd NCU-global basic  frame</brief>
<description>Access to 2nd NCU-global basic frame.  Corresponds to $P_NCBFR[1].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR2</name>
<brief>Access to 3rd NCU-global basic frame</brief>
<description>Access to 3rd NCU-global basic frame. Corresponds to $P_NCBFR[2].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR3</name>
<brief>Access to 4th NCU-global basic frame</brief>
<description>Access to 4th NCU-global basic frame. Corresponds to $P_NCBFR[3].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR4</name>
<brief>Access to 5th NCU-global basic frame</brief>
<description>Access to 5th NCU-global basic frame. Corresponds to $P_NCBFR[4].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR5</name>
<brief>Access to 6th NCU-global basic frame</brief>
<description>Access to 6th NCU-global basic frame. Corresponds to $P_NCBFR[5].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR6</name>
<brief>Access to 7th NCU-global basic frame</brief>
<description>Access to 7th NCU-global basic frame. Corresponds to $P_NCBFR[6].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR7</name>
<brief>Access to 8th NCU-global basic frame</brief>
<description>Access to 8th NCU-global basic frame. Corresponds to $P_NCBFR[7].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR8</name>
<brief>Access to 9th NCU-global basic frame</brief>
<description>Access to 9th NCU-global basic frame. Corresponds to $P_NCBFR[8].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR9</name>
<brief>Access to 10th NCU-global basic frame</brief>
<description>Access to 10th NCU-global basic frame. Corresponds to $P_NCBFR[9].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR10</name>
<brief>Access to 11th NCU-global basic  frame</brief>
<description>Access to 11th NCU-global basic frame. Corresponds to $P_NCBFR[10].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR11</name>
<brief>Access to 12th NCU-global basic  frame</brief>
<description>Access to 12th NCU-global basic frame. Corresponds to $P_NCBFR[11].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR12</name>
<brief>Access to 13th NCU-global basic  frame</brief>
<description>Access to 13th NCU-global basic frame. Corresponds to $P_NCBFR[12].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR13</name>
<brief>Access to 14th NCU-global basic  frame</brief>
<description>Access to 14th NCU-global basic frame. Corresponds to $P_NCBFR[13].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR14</name>
<brief>Access to 15th NCU-global basic  frame</brief>
<description>Access to 15th NCU-global basic frame. Corresponds to $P_NCBFR[14].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFR15</name>
<brief>Access to 16th NCU-global basic  frame</brief>
<description>Access to 16th NCU-global basic frame. Corresponds to $P_NCBFR[15].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME0</name>
<brief>Access to 1st current channel basic frame</brief>
<description>Access to 1st current channel basic frame. Corresponds to $P_CHBFRAME[0].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME1</name>
<brief>Access to 2nd current channel basic frame</brief>
<description>Access to 2nd current channel basic frame. Corresponds to $P_CHBFRAME[1].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME2</name>
<brief>Access to 3rd current channel basic frame</brief>
<description>Access to 3rd current channel basic frame. Corresponds to $P_CHBFRAME[2].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME3</name>
<brief>Access to 4th current channel basic frame</brief>
<description>Access to 4th current channel basic frame. Corresponds to $P_CHBFRAME[3].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME4</name>
<brief>Access to 5th current channel basic frame</brief>
<description>Access to 5th current channel basic frame. Corresponds to $P_CHBFRAME[4].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME5</name>
<brief>Access to 6th current channel basic frame</brief>
<description>Access to 6th current channel basic frame. Corresponds to $P_CHBFRAME[5].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME6</name>
<brief>Access to 7th current channel basic frame</brief>
<description>Access to 7th current channel basic frame. Corresponds to $P_CHBFRAME[6].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME7</name>
<brief>Access to 8th current channel basic frame</brief>
<description>Access to 8th current channel basic frame. Corresponds to $P_CHBFRAME[7].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME8</name>
<brief>Access to 9th current channel basic frame</brief>
<description>Access to 9th current channel basic frame. Corresponds to $P_CHBFRAME[8].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME9</name>
<brief>Access to 10th current channel basic frame</brief>
<description>Access to 10th current channel basic frame. Corresponds to $P_CHBFRAME[9].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME10</name>
<brief>Access to 11th current channel basic frame</brief>
<description>Access to 11th current channel basic frame. Corresponds to $P_CHBFRAME[10].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME11</name>
<brief>Access to 12th current channel basic frame</brief>
<description>Access to 12th current channel basic frame. Corresponds to $P_CHBFRAME[11].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME12</name>
<brief>Access to 13th current channel basic frame</brief>
<description>Access to 13th current channel basic frame. Corresponds to $P_CHBFRAME[12].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME13</name>
<brief>Access to 14th current channel basic frame</brief>
<description>Access to 14th current channel basic frame. Corresponds to $P_CHBFRAME[13].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME14</name>
<brief>Access to 15th current channel basic frame</brief>
<description>Access to 15th current channel basic frame. Corresponds to $P_CHBFRAME[14].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CHBFRAME15</name>
<brief>Access to 16th current channel basic frame</brief>
<description>Access to 16th current channel basic frame. Corresponds to $P_CHBFRAME[15].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME0</name>
<brief>1. 1st current NCU-global basic frame</brief>
<description>Access to 1st current NCU-global basic frame. Corresponds to $P_NCBFRAME[0].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME1</name>
<brief>2. 1st current NCU-global basic frame</brief>
<description>Access to 2nd current NCU-global basic frame. Corresponds to $P_NCBFRAME[1].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME2</name>
<brief>3. 1st current NCU-global basic frame</brief>
<description>Access to 3rd current NCU-global basic frame. Corresponds to $P_NCBFRAME[2].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME3</name>
<brief>4. 1st current NCU-global basic frame</brief>
<description>Access to 4th current NCU-global basic frame. Corresponds to $P_NCBFRAME[3].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME4</name>
<brief>5. 1st current NCU-global basic frame</brief>
<description>Access to 5th current NCU-global basic frame. Corresponds to $P_NCBFRAME[4].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME5</name>
<brief>6. 1st current NCU-global basic frame</brief>
<description>Access to 6th current NCU-global basic frame. Corresponds to $P_NCBFRAME[5].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME6</name>
<brief>7. 1st current NCU-global basic frame</brief>
<description>Access to 7th current NCU-global basic frame. Corresponds to $P_NCBFRAME[6].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME7</name>
<brief>8. 1st current NCU-global basic frame</brief>
<description>Access to 8th current NCU-global basic frame. Corresponds to $P_NCBFRAME[7].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME8</name>
<brief>9. 1st current NCU-global basic frame</brief>
<description>Access to 9th current NCU-global basic frame. Corresponds to $P_NCBFRAME[8].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME9</name>
<brief>10. 1st current NCU-global basic frame</brief>
<description>Access to 10th current NCU-global basic frame. Corresponds to $P_NCBFRAME[9].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME10</name>
<brief>11. 1st current NCU-global basic frame</brief>
<description>Access to 11th current NCU-global basic frame. Corresponds to $P_NCBFRAME[10].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME11</name>
<brief>12. 1st current NCU-global basic frame</brief>
<description>Access to 12th current NCU-global basic frame. Corresponds to $P_NCBFRAME[11].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME12</name>
<brief>13. 1st current NCU-global basic frame</brief>
<description>Access to 13th current NCU-global basic frame. Corresponds to $P_NCBFRAME[12].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME13</name>
<brief>14. 1st current NCU-global basic frame</brief>
<description>Access to 14th current NCU-global basic frame. Corresponds to $P_NCBFRAME[13].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME14</name>
<brief>15. 1st current NCU-global basic frame</brief>
<description>Access to 15th current NCU-global basic frame. Corresponds to $P_NCBFRAME[14].
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_NCBFRAME15</name>
<brief>16. 1st current NCU-global basic frame</brief>
<description>16th current NCU-global basic frame Corresponds to $P_NCBFRAME[15].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_TRAFO_CHAIN</name>
<brief>Programmed chained transformation</brief>
<description>Code numbers of chained transformations of programmed TRACON according to machine data $MC_TRAFO_TYPE_m.

Supplies the code number of the nth chained transformation of the programmed TRACON, starting with n=0.
$P_TRAFO_CHAIN[0] is the 1st chained transformation if a TRACON is programmed. If a TRACON command is not programmed, the code number of the programmed transformation is returned (e.g. 257 for TRANSMIT). If there is no transformation programmed, the value '0' is returned.
$P_TRAFO_CHAIN[1] is the 2nd chained transformation if a TRACON is programmed. Otherwise a '0' is returned.
The same applies accordingly for $P_TRAFO_CHAIN[2] and $P_TRAFO_CHAIN[3].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_TRAFO_CHAIN</name>
<brief>Active chained transformation</brief>
<description>Code numbers of chained transformations of active TRACON according to machine data $MC_TRAFO_TYPE_m.

Supplies the code number of the nth chained transformation of the active TRACON, starting with n=0.
$AC_TRAFO_CHAIN[0] is the 1st chained transformation if a TRACON is programmed. If a TRACON command is not active, the code number of the programmed transformation is returned (e.g. 257 for TRANSMIT). If no transformation is active, the value '0' is returned.
$AC_TRAFO_CHAIN[1] is the 2nd chained transformation if a TRACON is active. Otherwise a '0' is returned.
The same applies accordingly for $AC_TRAFO_CHAIN[2] and $AC_TRAFO_CHAIN[3].
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_MEAS_INPUT</name>
<brief>Measuring input parameter</brief>
<description>Variable for workpiece and tool measurement.
Array variable $AC_MEAS_INPUT[n] is used to enter measuring input parameters for workpiece and tool measurement. The control effect of the parameters is documented in the measurement variants.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DBSB</name>
<brief>PLC data byte (signed)</brief>
<description>Array variable $A_DBSB[n] is used to read and write a data byte (8 bits) from PLC. The byte is signed and can be read and written in the range from -128 to 127. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
See also $A_DBB[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DBSW</name>
<brief>PLC data word (signed)</brief>
<description>Array variable $A_DBSW[n] is used to read and write a data word (16 bits) from PLC. The word is signed and can be read and written in the range from -32768 to 32767. A memory area is reserved in the communications buffer of these modules (DPR) for high-speed data exchange between PLC and NC. The PLC uses function calls (FC) and the NCK uses $ variables to access this memory.
See also $A_DBW[n].
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SUB_AXFCT</name>
<brief>Substitution active</brief>
<description>Returns a bitmask according to machine data $MA_AXIS_LANG_SUB_MASK. An enabled bit means that the substitution of the corresponding function is active:
Bit 0 = 1:  Automatic gear stage change (M40) and direct gear stage change (M41-M45)
Bit 1 = 1:  Spindle positioning with SPOS/SPOSA/M19
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SUB_GEAR</name>
<brief>Programmed gear stage</brief>
<description>Returns the programmed or calculated gear stage in the substitution subprogram of an NC language substitution configured with $MA_AXIS_LANG_SUB_MASK. Outside the substitution subprogram, the variable returns the gear stage of the master spindle.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SUB_AUTOGEAR</name>
<brief>Automatic gear stage change active</brief>
<description>In the substitution subprogram of an NC language substitution configured with $MA_AXIS_LANG_SUB_MASK, this variable indicates whether an automatic gear stage change (M40) was active in the part program line which initiated the substitution process. Outside the substitution process, the variable returns the current setting in the interpreter.
</description>
</parameter>

<parameter type="AXIS" dim="0">
<name>$P_SUB_LA</name>
<brief>Leading spindle of active coupling</brief>
<description>In the substitution subprogram of an NC language substitution configured with $MA_AXIS_LANG_SUB_MASK, this variable supplies the axis identifier of the leading spindle of the active coupling which initiated the substitution process. Outside the substitution process, the variable aborts program execution and triggers an alarm.
</description>
</parameter>

<parameter type="AXIS" dim="0">
<name>$P_SUB_CA</name>
<brief>Following spindle of active coupling</brief>
<description>In the substitution subprogram of an NC language substitution configured with $MA_AXIS_LANG_SUB_MASK, this variable supplies the axis identifier of the following spindle of the active coupling which initiated the substitution process. Outside the substitution process, the variable aborts program execution and triggers an alarm.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_BLOCKNO</name>
<brief>Modal block number level-specific</brief>
<description>Supplies the last programmed block number of program level n.

Example:
$P_BLOCKNO[0]
Supplies the modal block number of the program on program level 0 = main program name.
MD 10284 $MN_DISPLAY_FUNCTION_MASKBit0 must be = 1.
Block numbers programmed during DISPLOF cannot be read with $P_BLOCKNO.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_LINENO</name>
<brief>Line number level-specific</brief>
<description>Supplies the last programmed line number of program level n.

Example:
$P_LINENO[0]
Supplies the line number of the program on program level 0 = main program level.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_AUTO_JOG_STATE</name>
<brief>Status Jog in Auto</brief>
<description>1: Automatic is selected, $MN_JOG_MODE_MASK is set and the mode group is "BAG-Reset".
   By actuating the +/- buttons or the handwheel, you can jog in Auto mode.
2: After a JOG movement has been performed, this mode group was switched by the system to JOG.
   The VDI and OPI still display Automatic mode.
0: Other

Remark:
This information covers the whole mode group and is available to each mode group channel via $AC_AUTO_JOG_STATE.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_FIFO</name>
<brief>FIFO stack</brief>
<description>Variable $AC_FIFO[n,m] access the n-th. first in first out stack. See also $AC_FIFO1 .. $AC_FIFO10.
$MC_NUM_AC_FIFO is used to define the range of n values and thus the number of FIFO Stacks $AC_FIFO1 - $AC_FIFO10.
The elements of the stack memory are saved in R variables. The length of all FIFO stacks is configured with $MC_LEN_AC_FIFO.
$MC_START_AC_FIFO is used to specify the number of the start R variable, from which the FIFO elements are stored.
R variables assigned to FIFO areas should not be written elsewhere.
The number of R variables must be set in machine data $MC_MM_NUM_R_PARAM such that all FIFO variables can be stored:
$MC_MM_NUM_R_PARAM = $MC_MM_START_FIFO + $MC_NUM_AC_FIFO * ($MC_LEN_AC_FIFO + 6)
The FIFO variable is an array variable.
Indices 0 - 5 have special meanings:
m = 0: When written with index 0, a new value is stored in the FIFO.
When read with index 0, the oldest element is read and removed from the FIFO.
m=1: Access to the first element read
m=2: Access to the last element read
m=3: Total of all FIFO elements if Bit0 in $MC_MM_MODE_FIFO is set.
m=4: Number of elements available in the FIFO
m=5: Current write index relative to the start of the FIFO
m=6: Oldest element
m=7: Second oldest etc.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_M_VALUE</name>
<brief>Value of active m-auxiliary function</brief>
<description>The array variable $AC_AUXFU_M_VALUE[n] is used to read the value of the M auxiliary function that has been collected last for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 determines the value of the M auxiliary function output last for the 1st group. If an auxiliary function has not yet been output for the group specified, the variable returns the value -1. The relevant extension can be determined with the variable $AC_AUXFU_M_EXT[n]. The variable $AC_AUXFU_M_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_M_EXT</name>
<brief>Extension of active m-auxiliary function</brief>
<description>The array variable $AC_AUXFU_M_EXT[n] is used to read the extension of the M auxiliary function that has been collected last for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 determines the extension of the M auxiliary function output last for the 1st group. If an auxiliary function has not yet been output for the group specified, the variable returns the value -1. The relevant value of the auxiliary function can be determined with the variable $AC_AUXFU_M_VALUE[n]. The variable $AC_AUXFU_M_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_M_STATE</name>
<brief>Output state of axtive m-auxiliary function</brief>
<description>The array variable $AC_AUXFU_M_STATE[n] is used to read the output status of the M auxiliary function that has been collected last for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 determines the status of the M auxiliary function output last for the 1st group. If an auxiliary function has not yet been output for the group specified, the variable returns the value 0. If the value is greater than 0, the relevant auxiliary function value can be determined with the variable $AC_AUXFU_M_VALUE[n]. The variable $AC_AUXFU_M_EXT[n] determines the current extension of the auxiliary function.

The variable returns the following values:
0: Auxiliary function not available
1: M-auxiliary function collected via search run
2: M-auxiliary function output to the PLC
3: M-auxiliary function output to the PLC, transfer has been acknowledged.
4: M-auxiliary function managed by the PLC and integrated into the PLC.
5: M-auxiliary function managed by the PLC, function has been acknowledged.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_THREAD_PITCH</name>
<brief>programmed thread pitch</brief>
<description>$P_THREAD_PITCH provides the lead with G33, G34, G35, G331 and G332 programmed under the address I, J or K. Value 0 is supplied in the RESET state or if no lead has been programmed. With G33, G34 and G35 a positive value is always returned. With G331 and G332, the sign results from the spindle rotation direction: positive in clockwise direction (as with M3) or negative in counterclokckwise direction (as with M4).

In the following example, $P_THREAD_PITCH provides the value "1.5".
...
N11 M4 S500
N12 G33 Z10 K1.4
N13 G33 Z12 K1.5
N14 R1=$P_THREAD_PITCH       ;R1=1.5
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_THREAD_PITCH_INC</name>
<brief>programmed thread pitch increment</brief>
<description>$P_THREAD_PITCH_INC supplies the value programmed under the address F for the lead change (G34/G35). Value 0 is supplied in the RESET state or if no lead change has been programmed. The returned value is positive in the case of G34 or negative in the case of G35.

Example:
M3 S400
G35 F2 Z10 K5
R1=$P_THREAD_PITCH_INC       ;R1= -2
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_THREAD_PITCH</name>
<brief>programmed thread pitch</brief>
<description>$AC_THREAD_PITCH provides the lead for G33, G34, G35, G331 and G332 programmed under address I, J or K. In the RESET state or if no lead has been programmed, the value 0 is given. With G33, G34 and G35, a positive value is always returned. With G331 and G332, the sign from the spindle rotating direction is as follows: positive for clockwise rotation (as with M3) or negative for counterclockwise rotation (as with M4).

In the following example, $AC_THREAD_PITCH provides the value "1.5" :
...
N11 M4 S500
N12 G33 Z10 K1.4
N13 G33 Z12 K1.5
N14 R1=$AC_THREAD_PITCH           ;R1= 1.5
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_THREAD_PITCH_INC</name>
<brief>current thread pitch increment</brief>
<description>$AC_THREAD_PITCH_INC provides the value programmed under the address F for lead change (G34/G35). In the RESET state or if a change in lead has not been programmed, the value 0 is supplied. The returned value is positive for G34 and negative for G35.

Example:
M3 S400
G34 F4 Z10 K2
R1=$P_THREAD_PITCH_INC         ;R1= 4
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_THREAD_PITCH_ACT</name>
<brief>current thread pitch just now</brief>
<description>$AC_THREAD_PITCH_ACT provides the current value for the lead. This value is continuously updated in blocks with G34 or G35 according to the value programmed under F. Only with thread blocks (G33, G34, G35, G331 and G332) a value unequal zero is supplied.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOOLROT</name>
<brief>Programmed tool rotation direction</brief>
<description>$P_TOOLROT[n]
Programmed tool rotation vector
Normalized vector with length 1 and the components
(n = 1, 2, 3) in the range - 1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following unit vector is returned, depending on the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOLR_ACT</name>
<brief>Active tool rotation direction</brief>
<description>$AC_TOOLR_ACT[n]
Active command rotation vector
Normalized vector with length 1 and the components
(n = 1, 2, 3) in the range - 1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following unit vector is returned, depending on the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOLR_END</name>
<brief>End rotation direction vector</brief>
<description>$AC_TOOLR_END[n]
End rotation vector of active block
Normalized vector with length 1 and the components
(n = 1, 2, 3) in the range - 1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following unit vector is returned, depending on the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TOOLR_DIFF</name>
<brief>Remaining angle of the tool rotation direction</brief>
<description>Remaining angle of tool rotation in active block in degree in the range 0 ... 180 degree.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VC_TOOLR</name>
<brief>Actual rotation direction vector</brief>
<description>$VC_TOOLR[n]
Actual tool rotation
Normalized vector with length 1 and the components
(n = 1, 2, 3) in the range - 1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following unit vector is returned, depending on the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$VC_TOOLR_DIFF</name>
<brief>Angle between set and actual rotation</brief>
<description>Angle between command and actual tool rotation in degree in the range 0 ... 180 degree.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$VC_TOOLR_STAT</name>
<brief>Status of actual rotation direction vector</brief>
<description>Status of calculation of actual tool rotation:
0: MCS -&gt; BCS Transformation in one ipo cycle
-1: MCS -&gt; BCS transformation not in one ipo cycle possible
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SIMUL</name>
<brief>Simulation search run active</brief>
<description>Value==TRUE
The part program is executed in the control under the Simulation search run mode. The simulation search run is a search run (with calculation) which is aborted with an internal M30 once the end of the program has been reached. The control is internally in search run mode, the variables $P_SEARCH, $P_SEARCH1, $P_SEARCH2 and $P_SEARCHL are also correctly supplied. Parts program adjustments can be made through variables $P_SEARCH* or $P_SIMUL. $P_SIMUL is designed only for adjustments restricted to the simulation search run.

Value==FALSE
No simulation search run is active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SUB_STAT</name>
<brief>state of substitution subroutine</brief>
<description>A replacement of the tool programming has been configured (address D, DL, T or M function through which the tool change cycle is called up). $P_SUB_STAT now permits polling to see if the substitution process is active and if the process is executed at the start or the end of the block:
0: Substitution subprogram not active
1: Substitution subprogram active,
   call-up at start of block
2: Substitution subprogram active,
   call-up at end of block
The system variable is influenced by machine data $MN_T_NO_FCT_CYCLE_MODE bit1 and 2.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_USEDND</name>
<brief>Workpiece counts for cutting edges</brief>
<description>$A_USEDND[ toolHolder ]
The number of cutting edges used in tool holder s, counted since the last setpiece command, including the currently active cutting edge.
toolHolder=1,...,maximum tool holder number
toolHolder=0 = The master tool holder is selected

Result:
&gt;0 = Number of cutting edges that have been used.
 0 = There have been no cuts since the last setpiece command.
-1 = Tool Management Tool Monitoring is not active.
-2 = toolHolder is not the value of a defined tool holder.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_USEDT</name>
<brief>Workpiece counts for cutting edges</brief>
<description>$A_USEDT[ toolHolder, usedCuttingEdgeIndex ]
T number of the i-th tool, of the cutting edges that have been used or are still being used on the tool holder s since the last workpiece count.
toolHolder=1,...,maximum tool holder number
toolHolder=0 = Designates the master tool holder
usedCuttingEdgeIndex= 1 - $A_USEDND[ toolHolder ]

Result:
&gt;0 = T number (can occur several times) (if different D offsets of the tool were used).
 0 = No more cutting edges used since the last workpiece count.
-1 = Tool monitoring function is not active.
-2 = toolHolder is the value of an undefined tool holder.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_USEDD</name>
<brief>Workpiece counts for cutting edges</brief>
<description>$A_USEDD[ toolHolder, usedCuttingEdgeIndex ]
D number of the i-th tool, of the cutting edges that have been used or are still being used on the tool holder s since the last workpiece count.
toolHolder=1,...,maximum tool holder number
toolHolder=0 = Designates the master tool holder
usedCuttingEdgeIndex =  1 - $A_USEDND[ toolHolder ]

Result:
&gt;0 = D number (can occur several times) (if different D offsets of the tool were used).
 0 = No more cutting edges used since the last workpiece count.
-1 = Tool monitoring function is not active.
-2 = toolHolder is the value of an undefined tool holder.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_M_TICK</name>
<brief>Time stamp of active M auxiliary function</brief>
<description>Field variable $AC_AUXFU_M_TICK[n] is used to read the time stamp of the M auxiliary function collected (search run) or output last for an auxiliary function group. Auxiliary functions are assigned to groups. The index corresponds to a group number decremented by one. Index 0 therefore determines the value of the M auxiliary function of the 1st group, which was output last. If no auxiliary function has been output for the specific group, the variable indicates value -1. The respective value can be determined using variable $AC_AUXFU_M_VALUE[n] and the respective extension using variable $AC_AUXFU_M_EXT[n]. Variable $AC_AUXFU_M_STATE[n] determines the current output state.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_CONE_ANGLE</name>
<brief>Cone angle</brief>
<description>$AC_CONE_ANGLE
Currently active cone angle for cone turning. The cone angle is set by default via the setting data $SC_CONE_ANGLE and is active in JOG
mode only.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_TECCYCLE</name>
<brief>Context query in technology cycles</brief>
<description>To control the context-specific interpretation of program parts in technology cycles, preprocessing variable $P_TECCYCLE is available. Using this variable, programs can be subdivided into synchronized action program parts and preprocessing program parts.

Example:
if ($P_TECCYCLE == TRUE)
; Program sequence for a technology cycle in synchronized action
else
; Program sequence for parts program cycle
endif
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_WORKAREA_CS_PLUS_ENABLE</name>
<brief>Active coord.-specific working area limitation, positive valid</brief>
<description>TRUE: The limitation in the positive direction for the specified axis in the active coordinate system-specific working area limitation is valid.
(s. $AC_WORKAREA_CS_LIMIT_PLUS[ax])
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_WORKAREA_CS_MINUS_ENABLE</name>
<brief>Active coord.-specific working area limitation, negative valid</brief>
<description>TRUE: The limitation in the negative direction for the specified axis in the active coordinate system-specific working area limitation is valid.
(s. $AC_WORKAREA_CS_LIMIT_MINUS[ax])
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_WORKAREA_CS_LIMIT_PLUS</name>
<brief>Coordinate system-specific working area limitation positive</brief>
<description>The limitation in the positive direction for the specified axis in the active coordinate system-specific working area limitation. This value is only evaluated, if $AC_WORKAREA_CS_PLUS_ENABLE = TRUE.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_WORKAREA_CS_LIMIT_MINUS</name>
<brief>Coordinate system-specific working area limitation negative</brief>
<description>The limitation in the negative direction for the specified axis in the active coordinate system-specific working area limitation. This value is only evaluated, if $AC_WORKAREA_CS_MINUS_ENABLE = TRUE.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_WORKAREA_CS_COORD_SYSTEM</name>
<brief>Coordinate system applies to the active working area limitation</brief>
<description>Coordinate system in which the active, coordinate-specific working area limitation applies.

The following values apply:
   Working area limitation applies in the WCS
   Working area limitation applies in the SZS
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_WORKAREA_CS_GROUP</name>
<brief>Group no. of the active, coord.-specific working area limitation</brief>
<description>Number of the active group of the coordinate system-specific working area limitation. The value is determined in the NC program by the G code WALCS0-WALCS10.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO1FRAME</name>
<brief>Active system frame for ISO G51.1 mirroring</brief>
<description>Variable $P_ISO1FRAME is used to program the active system frame for ISO G51.1 mirroring.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit7 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO2FRAME</name>
<brief>Active system frame for ISO G68 2DROT</brief>
<description>The variable $P_ISO2FRAME is used to program the active system frame for ISO G68 2DROT.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit8 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO3FRAME</name>
<brief>Active system frame for ISO G68 3DROT</brief>
<description>The variable $P_ISO3FRAME is used to program the active system frame for ISO G68 3DROT.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit9 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO4FRAME</name>
<brief>Active system frame for ISO G51 Scale</brief>
<description>The variable $P_ISO4FRAME is used to program the active system frame for ISO G51 Scale.

On a Reset, the activation of the system frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
Bit10 in $MC_CHSFRAME_RESET_MASK
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ACSFRAME</name>
<brief>Active frame between BCS and SZS</brief>
<description>The variable $P_ACSFRAME determines the active chained total frame between BCS and SZS.

The following applies to $MC_FRAME_ACS_SET = 0:
$P_ACSFRAME = $P_PARTFRAME : $P_SETFRAME : $P_EXTFRAME : $P_ISO1FRAME : $P_ISO2FRAME : $P_ISO3FRAME : $P_ACTBFRAME : $P_IFRAME : $P_GFRAME : $P_TOOLFRAME : $P_WPFRAME

The following applies to $MC_FRAME_ACS_SET = 1:
$P_ACSFRAME = $P_PARTFRAME : $P_SETFRAME : $P_EXTFRAME : $P_ISO1FRAME : $P_ISO2FRAME : $P_ISO3FRAME : $P_ACTBFRAME : $P_IFRAME : $P_GFRAME : $P_TOOLFRAME : $P_WPFRAME : $P_TRAFRAME : $P_PFRAME : $P_ISO4FRAME
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_CUT_INV</name>
<brief>Invert direction of spindle rotation</brief>
<description>This system variable is used to indicate whether or not the direction of spindle rotation has to be inverted for machining with the currently active tool.

The variable has the value TRUE if the four following conditions are fulfilled:
1. A turning tool is active (tool types 500 to 599).
2. The cutting edge influencing has been activated with the language command CUTMOD = 1 or CUTMOD =2.
3. A tool carrier with orientation capability is active.
4. The tool carrier with orientation capability rotates the tool so that the resulting normal of the tool cutting edge to the initial position is rotated more than 90 degrees (typically 180 degrees).

The content of the variable is FALSE if at least one of the four conditions has not been fulfilled.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AC_CUT_INV</name>
<brief>Invert direction of spindle rotation</brief>
<description>This system variable $AC_CUT_INV is used to indicate whether or not the direction of spindle rotation has to be inverted for machining with the currently active tool.

The variable has the value TRUE if the four following conditions are fulfilled:
1. A turning tool is active (tool types 500 to 599).
2. The cutting edge influencing has been activated with the language command CUTMOD = 1 or CUTMOD =2.
3. A tool carrier with orientation capability is active.
4. The tool carrier with orientation capability rotates the tool so that the resulting normal of the tool cutting edge to the initial position is rotated more than 90 degrees (typically 180 degrees).

The content of the variable is FALSE if at least one of the four conditions has not been fulfilled.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_CUTMOD</name>
<brief>The last programmed value of CUTMOD</brief>
<description>Reads the current valid value that was last programmed with the language command CUTMOD (number of the tool carrier for which the cutting edge data modification is to be activated). If the last programmed value was CUTMOD = -2 (activation with the currently active tool carrier with orientation capability), $P_CUTMOD does not return the value -2 but the number of the active tool carrier with orientation capability at the time of programming.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_CUTMOD</name>
<brief>The value of CUTMOD in the current block.</brief>
<description>$AC_CUTMOD
Reads the currently valid  value of the language command CUTMOD in the current block (number of the tool carrier for which the cutting edge data modification is to be activated).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_CUTMOD_ANG</name>
<brief>Tool rotation angle in the active machining plane</brief>
<description>The variable $P_CUTMOD_ANG reads the angle through which a tool has been rotated in the active machining plane, and on which the determination of modified cutting edge data with the functions CUTMOD and/or $SC_CUTDIRMOD is based.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_CUTMOD_ANG</name>
<brief>Tool rotation angle in the active machining plane</brief>
<description>The variable $AC_CUTMOD_ANG determines the angle through which a tool has been rotated in the active machining plane and on which the determination of modified cutting edge data for the functions CUTMOD and/or $SC_CUTDIRMOD is based.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SUB_SPOS</name>
<brief>Language substitution for SPOS command active</brief>
<description>Returns an NC language substitution TRUE (1) configured with $MA_AXIS_LANG_SUB_MASK bit1 = 1 in the substitution subprogram if the substitution was activated by the SPOS command.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SUB_SPOSA</name>
<brief>Language substitution for SPOSA command active</brief>
<description>Returns an NC language substitution TRUE (1) configured with $MA_AXIS_LANG_SUB_MASK bit1 = 1 in the substitution subprogram if the substitution was activated by the SPOSA command.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_SUB_M19</name>
<brief>Language substitution M19 active.</brief>
<description>Returns an NC language substitution TRUE (1) configured with $MA_AXIS_LANG_SUB_MASK bit1 = 1 in the substitution subprogram if the substitution was activated by M19.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_SUB_SPOSIT</name>
<brief>SPOS/SPOSA position with language substitution</brief>
<description>Returns the programmed position of an NC language substitution configured with $MA_AXIS_LANG_SUB_MASK bit1 = 1 in the substitution subprogram. If the variable is called outside this substitution process, the program execution is canceled with alarm 14055.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SUB_SPOSMODE</name>
<brief>Position approach mode with language substitution</brief>
<description>The variable $P_SUB_SPOSMODE determines, with a language substitution:
$MA_AXIS_LANG_SUB_MASK bit1 = 1
configured in the substitution subprogram, the position approach mode for the spindle position returned by $P_SUB_SPOSIT.
0: DC
1: AC
2: IC
3: DC
4: ACP
5: ACN
If the variable is called outside this substitution process, the program execution is canceled with alarm 14055.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_SAFE_SYNA_MEM</name>
<brief>Free safety synchronized action elements</brief>
<description>The variable $AC_SAFE_SYNA_MEM determines the number of free synchronized action elements for Safety Integrated. The maximum number of elements is configured by $MC_MM_NUM_SAFE_SYNC_ELEMENTS. The value is read from the part program without a preprocessing stop.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_ACT_PROG_NET_TIME</name>
<brief>Execution time of the selected NC program</brief>
<description>The current net runtime of the current program, in other words, the time during which the program was stopped has been deducted. If a part program is restarted in automatic mode from the channel status RESET, $AC_ACT_PROG_NET_TIME is automatically reset to zero. $AC_ACT_PROG_NET_TIME is reset to zero when M30 is reached. The net runtime does not include the time during which the program stops because Override=0. $AC_ACT_PROG_NET_TIME can be further manipulated with $AC_PROG_NET_TIME_TRIGGER. Note: The RESET key does not reset $AC_ACT_PROG_NET_TIME to zero, it merely stops $AC_ACT_PROG_NET_TIME.

$AC_ACT_PROG_NET_TIME is not reset by default with GOTOS (except with the 828D). If GOTOS is to behave like program end M30, bit 0 of machine data $MC_PROG_NET_TIMER_MODE must be set. When an ASUB is started, $AC_ACT_PROG_NET_TIME is set to zero, and counts the runtime of the ASUB. $AC_ACT_PROG_NET_TIME is not reset when Prog-Events is started. $AC_ACT_PROG_NET_TIME is additionally increased only with a start event, M30 ProgEvent and search run ProgEvent. At the end of an ASUB, $AC_ACT_PROG_NET_TIME behaves the same as the RESET button, this means that.
$AC_ACT_PROG_NET_TIME is only stopped, it is not set to 0.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OLD_PROG_NET_TIME</name>
<brief>Runtime of the last NC program</brief>
<description>$AC_OLD_PROG_NET_TIME is the net runtime of the program that has just finished correctly, this means that the program was not canceled with RESET, it was ended normally with M30. If a new program is started, $AC_OLD_PROG_NET_TIME remains unaffected until M30 is reached again.
The implicit copying process from $AC_ACT_PROG_NET_TIME to $AC_OLD_PROG_NET_TIME takes place only if $AC_PROG_NET_TIME_TRIGGER is not written.

Note:
$AC_OLD_PROG_NET_TIME is reset to zero by PI "Select program". $AC_OLD_PROG_NET_TIME is set to zero if the currently selected program is edited. $AC_OLD_PROG_NET_TIME is not changed at the end of an ASUB or a Prog-Event.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_PROG_NET_TIME_TRIGGER</name>
<brief>Trigger for runtime measurement</brief>
<description>$AC_PROG_NET_TIME_TRIGGER is used to selectively measure program sections. This means that by writing
$AC_PROG_NET_TIME_TRIGGER the program can switch time measurement on and off.
In order to exploit all trigger possibilities, certain values of $AC_PROG_NET_TIME_TRIGGER are assigned a special function:
0 = Neutral: The trigger is not active, the value is taken from Reset with the start button.
1 = Exit: Exits the measurement and copies $AC_ACT_PROG_NET_TIME to $AC_OLD_PROG_NET_TIME. $AC_ACT_PROG_NET_TIME is set to zero, and then starts running again.
2 = Start: Starts the measurement and sets $AC_ACT_PROG_NET_TIME to zero. $AC_OLD_PROG_NET_TIME is not changed.
3 = Stop: Stops the measurement, does not change $AC_OLD_PROG_NET_TIME, and holds $AC_ACT_PROG_NET_TIME constant until continue.
4 = Continue: Continuation of the measurement, this means that a measurement that has been stopped is resumed.
$AC_ACT_PROG_NET_TIME continues to run. $AC_OLD_PROG_NET_TIME is not changed.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_OLD_PROG_NET_TIME_COUNT</name>
<brief>Change counter for $AC_OLD_PROG_NET_TIME</brief>
<description>$AC_OLD_PROG_NET_TIME_COUNT is zero in the Power ON status. $AC_OLD_PROG_NET_TIME_COUNT is always increased when the NCK has newly written $AC_OLD_PROG_NET_TIME. This enables the user to ensure that $AC_OLD_PROG_NET_TIME has been written. This means that, if the user cancels the current program with reset, $AC_OLD_PROG_NET_TIME and $AC_OLD_PROG_NET_TIME_COUNT remain unchanged. As oldProgNetTime is reset when a new program is selected, in this case oldProgNetTimeCount is also increased.

Note:
Two programs running consecutively can have identical runtimes and be correctly terminated. The user can then only detect this by the changed $AC_OLD_PROG_NET_TIME_COUNT.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_OPMODE</name>
<brief>Selected mode</brief>
<description>The variable $P_OPMODE determines the mode selected via the PLC.
The variable returns the following values:
0: JOG (manual traverse)
1: MDA (Manual Data Automatic)
2: AUTOMATIC
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOFF</name>
<brief>Programmed tool length offset</brief>
<description>The variable returns the tool length offset which is assigned to the geometry axis defined as an index. The system variable returns the offset values assigned to the tool length components irrespective of whether the offsets have been programmed with TOFFL or TOFF.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOFFL</name>
<brief>Programmed tool length offset</brief>
<description>The variable returns the offset assigned in $AC_TOFFL[1] to the tool length component L1. The same applies to indices 2 and 3. $AC_TOFFL[0] accesses the offset of the length component L1 in the same way as $AC_TOFFL[1]. The system variable returns the offset values assigned to the tool length components irrespective of whether the offsets have been programmed with TOFFL or TOFF.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOFFL</name>
<brief>Programmed tool length offset</brief>
<description>The variable returns the offset assigned to the tool length component L1 in $P_TOFFL[1]. The same applies to indices 2 and 3. $P_TOFFL[0] accesses the offset of the length component L1 in the same way as $P_TOFFL[1]. The system variable returns the offset values assigned to the tool length components irrespective of whether the offsets have been programmed with TOFFL or TOFF.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOFF</name>
<brief>Programmed tool length offset</brief>
<description>The variable returns the tool length offset which is assigned to the geometry axis defined as an index.The system variable returns the offset values assigned to the tool length components irrespective of whether the offsets have been programmed with TOFFL or TOFF.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AC_JOG_CIRCLE_SELECTED</name>
<brief>JOG circles selected</brief>
<description>TRUE: JOG in circles is selected.
The function is selected via the NC/PLC interface signal DB21-30 DBX30.6 (no tool change commands), and the selection is confirmed via DB21.DBB377.6.

The maximum and minimum circles and the machining characteristics are defined by setting data:
- $SC_JOG_CIRCLE_CENTRE defines the center of the circle,
- $SC_JOG_CIRCLE_RADIUS the radius of the circle
- $SC_JOG_CIRCLE_MODE the machining characteristics
   (Traversing clockwise or anticlockwise on a circular path, internal or external machining;
   Limitation of the circle with or without taking the tool radius compensation into account).
- $SC_JOG_CIRCLE_START_ANGLE defines the starting angle
- $SC_JOG_CIRCLE_END_ANGLE defines the end angle
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_TOFFR</name>
<brief>Programmed tool radius offset</brief>
<description>The variable returns the tool radius offset programmed with TOFFR.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TOFFR</name>
<brief>Programmed tool radius offset</brief>
<description>The variable returns the tool radius offset programmed with TOFFR.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_STOP_COND</name>
<brief>Events for the machining stop</brief>
<description>The field variable $AC_STOP_COND[n] determines the events that led to machining stopping in the channel. The events are coded as positive numerical values in the field elements (see user documentation for meanings). The field element with the field index 0 corresponds to the highest priority event, higher indexed elements return correspondingly lower priority events. If the nth field element returns the value 0, this means that there are no further stop events.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_RELFRAME</name>
<brief>Active system frame for relative coordinate systems</brief>
<description>The variable $P_RELFRAME is used for programming the active system frame for relative coordinate systems.

The system frame is configured in the following machine data:
Bit 11 in $MC_MM_SYSTEM_FRAME_MASK
Bit 11 in $MC_MM_SYSTEM_DATAFRAME_MASK
Bit 11 in $MC_CHSFRAME_RESET_MASK
Bit 11 in $MC_CHSFRAME_RESET_CLEAR_MASK
Bit 11 in $MC_CHSFRAME_POWERON_MASK
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_INCOAP_B</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$P_INCOAP_C</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_INCOAP_I</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_INCOAP_R</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_INCOAP_S16</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_INCOAP_S32</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_INCOAP_S160</name>
<brief>Parameters for COA application</brief>
<description>Defining and return parameters of the COA application "Cutting generator".
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_INCOAP_SIZE</name>
<brief>Size of parameter fields for COA application</brief>
<description>$P_INCOAP_SIZE[ ] returns the currently available array size of the defining and return parameter $P_INCOAP_&lt;type&gt; of the COA application "Cutting generator". The array size is variable, and is defined by the COA application during power-up.

The following assignments apply:
$P_INCOAP_SIZE[0] returns the array size of $P_INCOAP_B[ ]
$P_INCOAP_SIZE[1] returns the array size of $P_INCOAP_C[ ]
$P_INCOAP_SIZE[2] returns the array size of $P_INCOAP_I[ ]
$P_INCOAP_SIZE[3] returns the array size of $P_INCOAP_R[ ]
$P_INCOAP_SIZE[4] returns the array size of $P_INCOAP_S16[ ]
$P_INCOAP_SIZE[5] returns the array size of $P_INCOAP_S32[ ]
$P_INCOAP_SIZE[6] returns the array size of $P_INCOAP_S160[ ]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_SMAXVELO</name>
<brief>Maximum possible spindle speed</brief>
<description>The variable returns the maximum possible spindle speed for the spindle mode. This is taken from the lowest value of the active speed limitations, and cannot be exceeded by speed programming or override &gt; 100%. A speed limitation is displayed by the VDI interface signal DB31..,DBX83.1 'Setpoint speed limited' and by $AC_SPIND_STATE, bit 10 (speed limitation active). The cause of the speed limitation can also be determined with the system variable $AC_SMAXVELO_INFO. In oscillation mode (gear stage change), the variable returns the value for the spindle mode (speed-control mode).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SMAXVELO_INFO</name>
<brief>Identifier for the speed-limiting data</brief>
<description>The system variable is additional information to $AC_SMAXVELO, and returns the definitive data as an identifier/index. The value read can be used to determine the speed limiting data from the following table.
0    No limitation (SERUPRO)
1    Maximum speed (chuck speed) of the spindle MD 35100 SPIND_VELO_LIMIT
2    The speed is limited to the maximum speed in the current gear stage MD 35130 GEAR_STEP_MAX_VELO_LIMIT
3    The speed is limited by position control to 90% of the lowest value contained in MD 35100 and MD 35130 (SPCON, SPOS, possibly with COUPON,..)
4    The speed is limited by position control to MD 35135 GEAR_STEP_PC_MAX_VELO_LIMIT
5    The speed is limited to SD 43220 SPIND_MAX_VELO_G26 (G26 S.. or preset by HMI)
6    The speed is limited to MD 35160 SPIND_EXTERN_VELO_LIMIT because of set VDI interface signal DB31,...DBX3.6
7    The speed is limited to SD 43230 SPIND_MAX_VELO_LIMS with constant cutting speed (G96, G961, G962, G97, LIMS)
8    The speed is limited to safe speed (SS) by Safety Integrated
9    The speed is limited by preparation calculations
10    Limited to the maximum speed of the drive by drive parameter (e.g. SINAMICS p1082, p2000)
11    The speed is limited to MD 36300 ENC_FREQ_LIMIT at functions that require a functioning measuring system, for example, with position control and G95, G96, G97, G973, G33, G34, G35 for the master spindle. The limitation takes into account the encoder speed, the master spindle arrangement (direct/indirect), the master spindle limiting frequency and the current parameter set
12    The speed is limited by the axis mode. In the case of a synchronized spindle, axis mode is forced by the leading spindle.
13    The speed of the overlaid motion of the following spindle is limited to the dynamics remaining after the coupling. A larger motion component of the overlaid motion can be achieved by reducing the leading spindle speed, for example, by programming G26 S, VELOLIM for the leading spindle or VELOLIMA for the following spindle. The coupling factor has to be taken into account.
14    The speed of the leading spindle is limited by lack of dynamics of the following spindle or a high gear ratio
15    The speed of the master spindle is limited to MD 35550 DRILL_VELO_LIMIT when tapping with G331, G332.
16    The speed is limited by the programming of VELOLIM.
17    The speed is limited by tool parameter $TC_TP_MAX_VELO
18    Not used
19    Not used
20    The speed is limited by the NCU link.
21    The speed is limited by SD43235 SD_SPIND_USER_VELO_LIMIT, speed limited on the user side, e.g. by clamping device, chuck speed
22    The speed is limited by the programming of VELOLIMA
23    The speed is limited by the clamping state of the tool. If there is a Weiss spindle, the clamping state can be read from $VA_MOT_CLAMPING_STATE[axn].
In oscillation mode (gear stage mode), the variable returns the value for spindle mode (speed-control mode)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_SMINVELO</name>
<brief>Minimum possible spindle speed</brief>
<description>The variable returns the minimum possible spindle for open-loop speed control mode. This is formed from the highest speed increase, and cannot be undershot by speed programming or override &lt; 100% A speed increase is displayed by the VDI interface signal DB31..,DBX83.2 'Setpoint speed increased' and by $AC_SPIND_STATE, bit 11 (setpoint speed increased). The cause of the increase in speed (machine or setting data, G code, VDI interface etc.) can also be determined with the system variable $AC_SMINVELO_INFO. The increase in speed is effective only if the spindle is in open-loop speed control mode. The system variable always returns the definitive value for the open-loop speed control mode, even if the spindle is in positioning or axis mode.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SMINVELO_INFO</name>
<brief>Identifier for the speed-raising data</brief>
<description>The system variable is additional information to $AC_SMINVELO, and returns the speed-increasing data as an identifier/index for the speed control mode. The index can be used to determine the speed-increasing data from the following table.
0    Not used
1    Not used
2    Lower speed limit (minimum speed) of the current gear stage MD 35140 GEAR_STEP_MIN_VELO_LIMIT
3    Not used
4    Not used)
5    Lower speed limit (minimum speed) from SD 43210 SPIND_MIN_VELO_G25 (G25 S.. or preset by HMI)
In oscillation mode (gear stage change) and in axis mode, the variable returns values from the spindle mode.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_SMAXACC</name>
<brief>Effective acceleration of the spindle</brief>
<description>The variable returns the active acceleration of the spindle for the spindle mode.
$AC_SPIND_STATE, bit 14 (spindle accelerating) is set for the duration of the acceleration to the defined setpoint speed.
$AC_SPIND_STATE, bit 15 (spindle braking) is set for the duration of the braking to the defined setpoint speed.
The data defining the acceleration can be determined with the system variable $AC_SMAXACC_INFO.
In oscillation mode (gear stage change), the variable returns the value for the spindle mode (speed-control mode).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SMAXACC_INFO</name>
<brief>Identifier for the active spindle acceleration data</brief>
<description>The system variable is additional information to $AC_SMAXACC, and returns the definitive data as an identifier/index. The index can be used to determine the active acceleration data from the following table. The number range is the same as that in the system variable $AC_SMAXVELO_INFO:
0   No acceleration limitation (SERUPRO)
1   Not used
2   Acceleration in speed control mode without position control in the current gear stage MD 35200 GEAR_STEP_SPEEDCTRL_ACCEL
3   Not used
4   Acceleration in the current gear stage on account of position control MD 35210 GEAR_STEP_POSCTRL_ACCEL (SPCON, SPOS, possibly with COUPON,..)
5   Not used
6   Not used
7   Not used
8   Not used
9   Acceleration limited by the preparation calculations
10  Not used
11  Not used
12  Acceleration limited by axis mode. In the case of a synchronized spindle, axis mode is forced by the leading spindle.
13  Acceleration of the overlaid motion of the following spindle is limited to the dynamics remaining after the coupling.
14  Acceleration of the leading spindle is limited by lack of dynamics in the following spindle or a high gear ratio
15  Acceleration of the master spindle MD 35212 GEAR_STEP_POSCTRL_ACCEL2 while tapping with G331, G332 (only with correspond ing configuration of the second data record)
16  Acceleration limited by programming of ACC or ACCFXS (synchronized action)
17  Acceleration limited by tool parameter $TC_TP_MAX_ACCEL
18  Not used
19  MD 32301 MA_JOG_MAX_ACCEL limits the acceleration in JOG mode.
20  Acceleration limited by NCU link.
21  Not used
22  Acceleration limited by programming of ACCLIMA
23  Not used
In oscillation mode (gear stage change), the variable returns the value for spindle mode (speed-control mode).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SPIND_STATE</name>
<brief>Status of the spindle in speed control mode</brief>
<description>The variable $AC_SPIND_STATE returns the selected states of the spindle. For positioning and axis mode, the variable $AA_INPOS_STAT[Sn] can also be read.
Bit 0: "Constant cutting speed active" (VDI interface signal DB31..,DBX84.0)
Bit 1: "GWPS active" (VDI interface signal DB31..,DBX84.1)
Bit 2: "CLGON active" (VDI interface signal DB31..,DBX84.2)
Bit 3: "Tapping without compensating chuck" (VDI interface signal DB31..,DBX84.3)
Bit 4: "Synchronous mode" (following spindle with synchronous spindle coupling) (VDI interface signal DB31..,DBX84.4)
Bit 5: "Positioning mode" (VDI interface signal DB31..,DBX84.5)
Bit 6: "Oscillation mode" (gear stage change) (VDI interface signal DB31..,DBX84.6)
Bit 7: "Open-loop speed control mode" (VDI interface signal DB31..,DBX84.7)
Bit 8: "Spindle programmed" (e.g. M3, M4 S.., FC18, ..) (VDI interface signal DB31..,DBX64.4/5 or 6/7)
Bit 9: "Speed limit exceeded" (VDI interface signal DB31..,DBX83.0)
Bit 10: "Setpoint speed limited" (VDI interface signal DB31..,DBX83.1) active if, as a result of programming or override, the speed would exceed the maximum possible speed ($AC_SMAXVELO)
Bit 11: "Setpoint speed increased" (VDI interface signal DB31..,DBX83.2) active when, as a result of programming or override, the speed would fall below the minimum possible speed (system variable $AC_SMINVELO)
Bit 12: "Spindle in setpoint range" (VDI interface signal DB31..,DBX83.5)
Bit 13: "Actual direction of rotation right" (VDI interface signal DB31..,DBX83.7)
Bit 14: "Spindle accelerates" is active as long as the spindle is accelerating to the defined setpoint speed on the setpoint side.
Bit 15: "Spindle brakes" is active as long as the spindle is braking to the defined setpoint speed or to a stop on the setpoint side.
Bit 16: "Spindle stationary" (VDI interface signal DB31..,DBX61.4)
Bit 17: "Tool with dynamic limitation active" (VDI interface signal DB31..,DBX85.0)
Bit 18: Reserved
Bit 19: "Spindle in position" (VDI interface signal DB31..,DBX85.5)
Bit 20: "Position control active" (VDI interface signal DB31..,DBX61.5)
Bit 21: "Referenced/synchronized 1" (VDI interface signal DB31..,DBX60.4)
Bit 22: "Referenced/synchronized 2" (VDI interface signal DB31..,DBX60.5)
Bit 23: The direction of rotation of the spindle is inverted due to the VDI interface signal "Invert M3/M4 " (DB31..,DBX17.6)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_ISO2_HNO</name>
<brief>H number in ISO2 mode</brief>
<description>Contains the offset numbers of H selected for the 3 geometry dimensions. (Tool length offset) Indexing corresponding to $P_TOOLL[n].
= -1: H99 is programmed, or it has been activated in Siemens mode D1.
= -2: A D&gt;2 has been programmed in Siemens mode
= -3: It cannot be activated in ISO2 mode.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_ISO2_DNO</name>
<brief>D number in ISO2 mode</brief>
<description>Contains the offset number D selected for the radius
= -1: H99 is programmed, or it has been activated in Siemens mode D1.
= -2: A D&gt;2 has been programmed in Siemens mode
= -3: It cannot be activated in ISO2 mode.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_ISO3_DNO</name>
<brief>D number in ISO3 mode</brief>
<description>Contains the offset number of H selected for ISO3 mode
= -1: H99 is programmed, or it has been activated in Siemens mode D1.
= -2: A D&gt;2 has been programmed in Siemens mode
= -3: It cannot be activated in ISO2 mode.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_ACT_LOAD</name>
<brief>Current preprocessing runtime</brief>
<description>The variable $AC_PREP_ACT_LOAD returns the current preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_MAX_LOAD</name>
<brief>Longest  preprocessing runtime</brief>
<description>The variable $AC_PREP_MAX_LOAD returns the longest net preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_MIN_LOAD</name>
<brief>Shortest preprocessing runtime</brief>
<description>The variable $AC_PREP_MIN_LOAD returns the shortest net preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_ACT_LOAD_GROSS</name>
<brief>Current preprocessing runtime</brief>
<description>The variable $AC_PREP_ACT_LOAD_GROSS returns the current gross preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_MAX_LOAD_GROSS</name>
<brief>Longest preprocessing runtime</brief>
<description>The variable $AC_PREP_MAX_LOAD_GROSS returns the longest gross preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PREP_MIN_LOAD_GROSS</name>
<brief>Shortest preprocessing runtime</brief>
<description>The variable $AC_PREP_MIN_LOAD_GROSS returns the shortest, gross preprocessing runtime in the channel.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_IPO_STATE</name>
<brief>Status identifier of active functions</brief>
<description>The variable returns selected information about whether specific functions are active:
Bit 0: Free-form surfaces mode is active
Bit 1: Compressor active
Bit 2: Vector interpolation (e.g. large circle interpolation) is active for tool orientation
Bit 3: Reserved for smoothing

Note:
This variable can only be read in synchronized actions, and not directly in the part program.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_CTOL</name>
<brief>Active contour tolerance</brief>
<description>$AC_CTOL defines the contour tolerance for compressors and smoothing with which the current main run block was prepared.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OTOL</name>
<brief>Active orientation tolerance</brief>
<description>$AC_OTOL defines the orientation tolerance for compressors and smoothing with which the current main run block was prepared.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_CTOL</name>
<brief>Programmed contour tolerance</brief>
<description>$P_CTOL states the contour tolerance for compressors and smoothing programmed with CTOL in the part program. If no value is programmed, the variable returns -1.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OTOL</name>
<brief>Programmed orientation tolerance</brief>
<description>$P_OTOL states the orientation tolerance for compressors and smoothing programmed with OTOL in the part program. If no value is programmed, the variable returns -1.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_FGROUP_MASK</name>
<brief>Bit-coded value of axes that contribute to the path velocity</brief>
<description>The variable returns a bit-coded value of channel axes programmed with the FGROUP command that contribute to the path velocity.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_FGROUP_MASK</name>
<brief>Bit-coded mask of axes that contribute to the path velocity</brief>
<description>The variable returns a bit-coded value from programmed channel axes that contribute to the path velocity via the FGROUP command.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_EXT</name>
<brief>Extension of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_EXT[n] is used to read the extension of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 thus determines the extension of the last output auxiliary function of the 1st group. If an auxiliary function has not yet been output for the specified group, then the variable returns the value -1. The associated value of the auxiliary function can be determined by the variable $AC_AUXFU_VALUE[n]. The variable $AC_AUXFU_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_STATE</name>
<brief>Output status of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_STATE[n] is used to read the output status of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 thus determines the status of the last output auxiliary function of the 1st group. If an auxiliary function has not yet been output for the specifed group, then the variable returns the value 0. If the value is greater than zero, then the value  of the associated auxiliary function can be determined by the variable $AC_AUXFU_VALUE[n]. The variable $AC_AUXFU_EXT[n] determines the current extension of the auxiliary function.

The variable returns the following values:
0: Auxiliary function not available
1: Auxiliary function has been collected by means of a search run
2: Auxiliary function has been output to the PLC
3: Auxiliary function has been output to the PLC and the transport acknowledgement has been made.
4: Auxiliary function has been accepted is being managed by the PLC.
5: Auxiliary function is being managed by the PLC and the function acknowledgement has been made.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_AUXFU_VALUE</name>
<brief>Value of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_VALUE[n] is used to read the value of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 thus determines the value of the last output auxiliary function of the 1st group. If an auxiliary function has not yet been output for the specified group, then the variable returns the value -1. The associated extension can be determined by the variable $AC_AUXFU_EXT[n]. The variable $AC_AUXFU_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$AC_AUXFU_TICK</name>
<brief>Output counter of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_TICK[groupIndex, n] is used to read the three output counters of the last auxiliary function collected for an auxiliary function group (search run) or output. The variable is changed each time an auxiliary function is changed.

n = 0:    Output sequence counter (all outputs within one IPO cycle)
n = 1:    Package counter within an output sequence in the interpolation cycle
n = 2:    Auxiliary function counter within a package

An auxiliary function package consists of a maximum of 10 auxiliary functions. Two packages per channel can be executed in each IPO cycle during SERUPRO. An output sequence of up to 20 packages can be executed through all channels in one IPO cycle. All the auxiliary functions collected in one IPO cycle have the same sequence counter. All the auxiliary functions collected in one package (block or synact) have the same package counter. The auxiliary function counter is incremented for each auxiliary function collected.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$AC_AUXFU_TYPE</name>
<brief>Types of active auxiliary function</brief>
<description>The array variable $AC_AUXFU_TYPE[n] is used to read the types M, H, S, T, D, F, L of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 thus determines the types of the last output auxiliary function of the 1st group. If an auxiliary function has not yet been output for the specifed group, then the variable returns the value "". The associated value of the auxiliary function can be determined by the variable $AC_AUXFU_VALUE[n]. The variable $AC_AUXFU_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_PREDEF_INDEX</name>
<brief>Predefined index of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_PREDEF_INDEX[n] is used to read the predefined index of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The array index corresponds to the group number decremented by one. The index 0 thus determines the predefined index of the last output auxiliary function of the 1st group. If an auxiliary function has not yet been output for the specifed group or if the auxiliary function is a user-defined auxiliary function, then the variable returns the value -1. The associated value of the auxiliary function can be determined by the variable $AC_AUXFU_VALUE[n]. The variable $AC_AUXFU_STATE[n] determines the current output status.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_AUXFU_SPEC</name>
<brief>Output specification of the active auxiliary function</brief>
<description>The array variable $AC_AUXFU_SPEC[n] is used to read the output specification corresponding to $MC_AUXFU_PREDEF_SPEC[n], $MC_AUXFU_ASSIGN_SPEC[n] of the last auxiliary function collected for an auxiliary function group (search run) or output. Auxiliary functions are assigned to groups. The index corresponds to the group number decremented by one. The index 0 thus determines the specification of the last output auxiliary function of the 1st group. The associated value of the auxiliary function can be determined by the variable $AC_AUXFU_VALUE[n]. The variable $AC_AUXFU_STATE[n] determines the current output status.

The output specification is bit-coded:
Bit 0 = 1   acknowledgment "normal" after an OB1 cycle
Bit 1 = 1   acknowledgment "quick" with OB40
Bit 2 = 1   No predefined auxiliary function
Bit 3 = 1   No output to the PLC
Bit 4 = 1   Spindle reaction after acknowledgement by the PLC
Bit 5 = 1   Output before the motion
Bit 6 = 1   Output during the motion
Bit 7 = 1   Output at end of block
Bit 8 = 1   No output after block search types 1, 2, 4
Bit 9 = 1   Collection during block search type 5 (SERUPRO)
Bit10 = 1   No output during block search type 5 (SERUPRO)
Bit 11 = 1  Cross-channel auxiliary function (SERUPRO)
Bit 12 = 1  Output via synchronized action
Bit 13 = 1  Implicit auxiliary function
Bit 14 = 1  Active M01
Bit 15 = 1  No output during running-in test
Bit 16 = 1  Nibbling off
Bit 17 = 1  Nibbling on
Bit 18 = 1  Nibbling
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TRAFRAME_P</name>
<brief>Frame of the workpiece component of an active orientation transformation</brief>
<description>This variable returns the frame, which describes the current rotation and offset of the workpiece part of an active kinematic orientation transformation. Here, workpiece part means the kinematic chain defined between machine zero and workpiece reference point.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TRAFRAME_T</name>
<brief>Frame of the workpiece component of an active orientation transformation</brief>
<description>This variable returns the frame, which describes the current rotation and offset of the tool part of an active kinematic orientation transformation. Here, tool part means the kinematic chain defined between machine zero and tool reference point.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_FZ</name>
<brief>Programmed tooth feed</brief>
<description>The variable $P_FZ is used to read the last programmed tooth feed FZ.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_FZ</name>
<brief>Active programmed tooth feed</brief>
<description>The variable $AC_FZ is used to read the active programmed tooth feed FZ.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_F_TYPE</name>
<brief>Types of programmed feed</brief>
<description>The variable $P_F_TYPE is used to read the type of the last programmed feed.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_F_TYPE</name>
<brief>Types of active programmed feed</brief>
<description>The variable $AC_F_TYPE is used to read the type of the active programmed feed.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_SVC</name>
<brief>Programmed cutting speed</brief>
<description>The variable $P_SVC[n] is used to read the last programmed cutting speed SVC.
n: Number of the spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_SVC</name>
<brief>Active programmed cutting speed</brief>
<description>The variable $AC_SVC is used to read the active programmed cutting speed SVC.
n: Number of the spindle
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_S_TYPE</name>
<brief>Type of spindle programming</brief>
<description>The variable $P_S_TYPE is used to read the type of spindle programming.
   0  Spindle not programmed
   1  Spindle speed S in rpm
   2  Cutting speed SVC in m/min or ft/min
   3  Constant cutting speed S in m/min or ft/min
   4  Constant grinding wheel peripheral speed S in m/s or ft/s
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_S_TYPE</name>
<brief>Types of active spindle programming</brief>
<description>The variable $P_S_TYPE is used to read the active type of spindle programming.
   0  Spindle not programmed
   1  Spindle speed S in rpm
   2  Cutting speed SVC in m/min or ft/min
   3  Constant cutting speed S in m/min or ft/min
   4  Constant grinding wheel peripheral speed S in m/s or ft/s
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VC_SGEAR</name>
<brief>Currently activated spindle gear stage</brief>
<description>The variable $VC_SGEAR[spino] determines the currently activated spindle gear stage. $AC_SGEAR[spino] determines the set gear stage in the main run. In the case of the search run, the actual gear stage can vary from the set gear stage, as a gear stage change cannot take place during the search run. Using $VC_SGEAR[spino] and $AC_SGEAR[spino], it can be checked whether a gear stage change should take place following a search run.

The following values are possible:
1: 1. Gear stage is active
....
5: 5. Gear stage is active
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_ORI_POS</name>
<brief>Positions of the orientation axes in the case of orientation programming</brief>
<description>The angles of the orientation axes, which result from orientation programming. In this case, the first index (0 or 1) refers to the solution, whereas the second index (0..2) refers to the orientation axis, see also $P_ORI_SOL and $P_ORI_STAT. When the function ORISOLH is called in the mode "Direct tool alignment", the variables $P_ORI_POS[0 /1, 1] and P_ORI_POS[0 /1, 2] contain the values of the two angles BETA und GAMMA belonging to both solutions.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_ORI_DIFF</name>
<brief>Deviation of axis positions from theor. value in the case of orientation progr.</brief>
<description>The difference between the exact positions of the orientation axes and those provided in $P_ORI_POS, which result from orientation programming. The content may be unequal to zero only if the positions are gridded (Hirth tooth system), i.e if the system data $NT_HIRTH_INCR of the affected axis is unequal to zero and if this axis is a manual rotary axis. In this case, the first index (0 or 1) refers to the solution, whereas the second index (0..2) refers to the orientation axis, see also $P_ORI_SOL.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_ORI_SOL</name>
<brief>Number of solutions in the case of orientation programming</brief>
<description>If the axis positions are calculated for an orientation transformation with more than one orientation axis which should result in a specified orientation, there is generally more than one solution. This system data contains the number of valid solutions together with additional status information.

The content of $P_ORI_SOL is coded as follows:

Negative values: General error states.
-1:   No solutions have been calculated for the active transformation (missing call of ORISOL).
-2: No transformation is active or the active transformation is not an orientation transformation, which is able to return positions for a specified orientation programming.
-5:   On calling ORISOLH for "Swivel direct", no solution was found.
-6:   On calling ORISOLH for "Swivel direct", the angle GAMMA was too large.
-7:   On calling ORISOLH for "Swivel direct", an angle was specified that could not be set because of the Hirth tooth system.

Units digit: Number of mathematically possible solutions without considering axis limits and possible error conditions.
0:    A solution does not exist, i.e. the required orientation cannot be set.
1:    One solution exists.
2:    Two solutions exist.
9:    An infinite number of solutions exist, i.e. the position of at least one orientation axis is not specified. The unspecified axis can be determined from the hundreds digit or from the system variable $P_ORI_STAT.
Tens digit: Bit-coded display for violated axis limits. The exact cause of the error can be determined from the system variable $P_ORI_STAT.

Bit 0 (value 10): At least one axis limit of the 1st orientation axis is violated for at least one solution.
Bit 1 (value 20): At least one axis limit of the 2nd orientation axis is violated for at least one solution.
Bit 2 (value 40): At least one axis limit of the 3rd orientation axis is violated for at least one solution.

Hundreds digit: Bit-coded display for non-defined axis positions (can only occur if there are an infinite number of solutions, i.e. if the units digit is equal to 9).
Bit 0 (value 100): The position of the 1st orientation axis is not defined.
Bit 1 (value 200): The position of the 2nd orientation axis is not defined.
Bit 2 (value 400): The position of the 3rd orientation axis is not defined.

The identifiers 1st, 2nd and 3rd orientation axis refer to the definition of the axes in the transformation data $NT_ROT_AX_NAME.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_ORI_STAT</name>
<brief>Status of the orientation axes</brief>
<description>The system variable contains the status of each orientation axis following the call of ORISOL. The index n of $P_ORI_STAT[n] corresponds to the index of the affected orientation axis in the transformation data $NT_ROT_AX_NAME[n].

The content of $P_ORI_SOL is coded as follows:

Negative values: General error states.
-1:   The status is not defined (missing call of ORISOL).
-2:   No transformation is active or the active transformation is not an orientation transformation, which is able to return positions for a specified orientation programming.
-3:   The axis is not contained in the active transformation.
-4:   The position of the axis cannot be calculated, because the desired orientation cannot be achieved with the specified kinematics, even with any assumed traversing range of the axis.
-5:   On calling the function ORISOLH for "Swivel direct", axis positions were specified in such a way that either the orientation vector or the orientation normal vector of the tool was aligned parallel to the first orientation axis, the position of which is to be calculated. In these cases, the position of this axis is not defined.
-6:   On calling ORISOLH for "Swivel direct", the angle GAMMA was too large.
-7:   On calling ORISOLH for "Swivel direct", an angle was specified that could not be set because of the Hirth tooth system.
-8:   The first orientation axis must not be parameterized as a Hirth axis.
-9:   Both the second and third rotary axes are parameterized as Hirth axes. A maximum of only one of the two axes may be a Hirth axis.
-10:  No adaptation to the Hirth tooth system was found.

Units digit: Bit-coded display for violated axis limits of the first solution.
Bit 0 (value 1):    The first solution violates the lower axis limit.
Bit 1 (value 2):    The first solution violates the upper axis limit.

Tens digit: Bit-coded display for violated axis limits of the second solution.
Bit 0 (value 10):   The second solution violates the lower axis limit.
Bit 1 (value 20):   The second solution violates the upper axis limit.

Hundreds digit: Displays a non-defined axis position.
Bit 0 (value 100):  The position of the orientation axis is not defined, i.e. the required orientation is achieved through any setting of the rotary axis (pole setting). This information is also contained the system variable $P_ORI_SOL.

Several fault codes, which display violation of the axis limits, can occur simultaneously. As, in the case of violation of an axis limit, an attempt is made to achieve a position within the permitted axis limits by adding or subtracting multiples of 360 degrees, if this is not possible - it is not clearly defined, whether the lower or upper axis limit was violated.If a solution is not available for the desired orientation ($P_ORI_SOL equals 0), the status of the orientation axes contained in the transformation is 0.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MTOOLN</name>
<brief>Number of defined Multitools</brief>
<description>$P_MTOOLN
Number of defined Multitools, which are assigned to the channel
OPI block type= MTV
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MTOOLMT</name>
<brief>Multitool number</brief>
<description>$P_MTOOLMT[i]
i-te Multitool number
OPI block type= MTV
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MTOOLNT</name>
<brief>Number of tools in Multitool</brief>
<description>$P_MTOOLNT
Number of tools in Multitool
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$P_MTOOLT</name>
<brief>T number of the i-th tool in MT</brief>
<description>$P_MTOOLT
T number of the i-th tool in  Multitool
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MYMTN</name>
<brief>MT number of the proprietary multitool  of a tool</brief>
<description>$A_MYMTN[t]
MT number of the proprietary multitool of the tool with the T no. t.
&gt;0      The tool with the T number t is a multitool with the MT number
=0      The tool with the T number t is not a multitool
= -1 TMMG function inactive
= -2 Multitool function inactive
= -3 t is not WZ_T_Nr.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_TOOLMTN</name>
<brief>-</brief>
<description>$A_TOOLMTN[t]
Multitool number of tool t
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MYMTLN</name>
<brief>-</brief>
<description>$A_MYMTLN[t]
Number of the proprietary Multitool tool location with the T No. t.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_TOOLMTLN</name>
<brief>-</brief>
<description>$A_TOOLMTLN[t]
Multitool location number  of tool t
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_TOOLIS</name>
<brief>Is a simple tool or a Multitool transported?</brief>
<description>$AC_TC_TOOLIS
-1: At the time of reading, no tool command is active.
0: the transported tool is an individual tool.
1: the transported tool is an MT with a location number as distance coding.
2: the transported tool is an MT with length distance as distance coding.
3: the transported tool is an MT with angle distance as distance coding.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_TC_MTDIST</name>
<brief>Distance between tool in Multitool  and  the reference point</brief>
<description>$AC_TC_MTDIST
Distance between tool in Multitool and the reference point.
-1.0: At the time of reading, no tool management command is active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MTNLOC</name>
<brief>Number of locations for tool change and tool transport contained in the MT</brief>
<description>$AC_TC_MTNLOC
Number of locations for tool change and tool transport contained in the MT.
 -1: At the time of reading, no tool management command is active.
  0: The new tool of the command at the PLC is a single tool.
&gt;=2: The new tool of the command at the PLC is an MT with the specified number of locations.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MTTN</name>
<brief>Number of the Multitool with the new tool</brief>
<description>$AC_TC_MTTN
Number of the Multitool with the new tool
-1: At the time of reading, no tool management command is active.
 0: The new tool of the command at the PLC is a single tool.
&gt;0: The new tool of the command at the PLC is an MT with this number.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_TC_MTLTN</name>
<brief>Number of the Multitool location with  the  new tool</brief>
<description>$AC_TC_MTLTN
Number of the Multitool location with the new tool.
-1: At the time of reading, no tool management command is active.
 0: The new tool of the command at the PLC is a single tool.
&gt;0: MT location number of the target location of the new tool.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_PRTIME_B</name>
<brief>Program runtime per block</brief>
<description>The variable $AC_PRTIME_B "ProgramRunTIME-Block" determines the program runtime per block. During the simulation, the anticipated processing time of the blocks in the part program is calculated, and made available in this system variable and the OPI variable 'acPRTimeB'.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_STOLF</name>
<brief>Active G00 tolerance factor</brief>
<description>$AC_STOLF names the G00 tolerance factor for compressors and smoothing, which was used to prepare the current main run record. If a G00 tolerance factor is not programmed with STOLF = &lt;...&gt;, the value of machine data $MC_G0_TOLERANCE_FACTOR is read. If rapid traverse (G00) is not active, this variable will return the value 1.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_STOLF</name>
<brief>Programmed G00 tolerance factor</brief>
<description>$P_STOLF names the G00 tolerance factor, which is programmed with STOLF in the part program for compressors and smoothing. If a value is not programmed, the variable returns the value of MD $MC_G0_TOLERANCE_FACTOR. If fast motion (G00) is not active, this variable returns the value 1.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_TMNOIS</name>
<brief>Actual number, T number, magazine number or MT number</brief>
<description>$P_TMNOIS[t]
3 = Index is the number of a defined tool
    and the number of a defined magazine
2 = Index is the number of a defined magazine
1 = Index is the T number of a defined tool
0 = Index is the MT number of a defined Multitool
-3 = invalid index. Is neither the number of a tool nor the number of a Multitool.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_BLOCK_PROGINFO</name>
<brief>Block information</brief>
<description>The variable $AC_BLOCK_PROGINFO returns information about the current main run block.
The variable is bit-coded.
Bit 0: Block is end of main program ( M02, M17, M30 or RET(ASUB) )
Bit 1: Block is end of subprogram
Bit 2: Block is last initializing block
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_WP_STAT</name>
<brief>Error status after calling the WORKPIECE process</brief>
<description>Contains the error status of the last call of the WORKPIECE process
The variable is coded as follows:
0: No error occurred when the function was called.
1: There is no memory space available for creating a workpiece protection zone.
2: The name of the specified kinematic chain was not found.
3: The name of the specified kinematic chain link was not found.
4: An invalid frame name was specified (only the identifiers of programmable frames are allowed).
5: The specified protection zone type cannot be interpreted by the NCK.
6: Invalid name of the workpiece protection zone. Workpiece protection zones must start with __WORKP.
7: No protection zone definition with the specified name was found.
8: Reserved (error code not assigned).
9: Reserved (error code not assigned).
10: No protection zone type specified.
11: Less than three parameters were specified for the protection zone type "Box".
12: Less than two parameters were specified for the protection zone type "CYLINDER".
-
The error status is reset to 0 on Reset, but it is only changed when the WORKPIECE process is called again.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_FIX_STAT</name>
<brief>Error status after calling the Fixture procedure</brief>
<description>Contains the error status of the last call of the FIXTURE process
The variable is coded as follows:
0: No error occurred when the function was called.
1: There is no memory space available for creating a workholder protection zone.
2: The name of the specified kinematic chain was not found.
3: The name of the specified kinematic chain link was not found.
4: An invalid frame name was specified (only the identifiers of programmable frames are allowed).
5: The specified protection zone type cannot be interpreted by the NCK.
6: Reserved (error code not assigned).
7: No protection zone definition with the specified name was found.
8: The name of the workholder protection zone was not specified.
9: Invalid name of workholder protection zone. Workholder protection zones must start with __FIXTURE.
10: No protection zone type specified.
11: Less than three parameters were specified for the protection zone type "Box".
12: Less than two parameters were specified for the protection zone type "CYLINDER".
-
The error status is reset to 0 on Reset, but it is only changed when the FIXTURE process is called again.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PC_TRAFO_ROT_CHAIN_INDEX</name>
<brief>Index of the i-th rotary axis in the kinematic chain</brief>
<description>Supplies the position of a rotary axis (orientation axis) in the internal representation of a transformation.

The position of the orientation axis is defined as follows:
If one runs through the kinematic forces of an active transformation from the table to the tool, then the first orientation axis receives index 0, the second orientation axis index 1 etc. It makes (presently) sense only to apply this system variable if an orientation transformation is active with specified kinematic chains. if this requirement is not met, the return value is -1.

Example:
$NT_ROT_AX_NAME[n, 0] = "ORI_TOOL"
$NT_ROT_AX_NAME[n, 1] = "ORI_PART"
$NT_ROT_AX_NAME[n, 2] = ""

If "ORI_TOOL" - as the name implies - rotates the tool and "ORI_PART" the workpiece, one receives the following values as a result from reading out $PC_TRAFO_ROT_CHAIN_INDEX:
_INDEX = $PC_TRAFO_ROT_CHAIN_INDEX[0] = 1    ; _INDEX = 1, since the first orientation axis is the second orientation axis in the kinematic chain.
_INDEX = $PC_TRAFO_ROT_CHAIN_INDEX[1] = 0    ; _INDEX = 0, since the second orientation axis is the first orientation axis in the kinematic chain.
_INDEX = $PC_TRAFO_ROT_CHAIN_INDEX[2] = -1   ; _INDEX = -1 since no third orientation axis is defined (5-axis transformation).
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$PC_TRAFO_ROT_CHAN_AX_IN</name>
<brief>Channel axis of the n-th rotary axis of a transformer</brief>
<description>Supplies the channel axis identifier of the i-th rotary axis (orientation axis) in the internal representation of a transformation.

The i-th orientation axis is defined as follows:
If one runs through the kinematic chain of an active transformation from workpiece to tool, the first orientation axis will receive index 0, the second orientation axis index 1 etc. Index i can be determined with the help of system variable $PC_TRAFO_ROT_CHAIN_INDEX from the entry in system date $NT_ROT_AX_NAME[n, j].

Example:

DEF AXIS B_AX_CHAN
DEF INT CHAIN_INDEX
.
.
$NT_ROT_AX_NAME[n, 0] = "ROT_TOOL_B"              ; refers e.g. to a kinematic chain element describing machine axis B11.
.
.
TRAFOON("ORI_TRAFO_TEST")                         ; activate orientation transformation
CHAIN_INDEX = $PC_TRAFO_ROT_CHAIN_INDEX[0]        ; supplies e.g. value 1 if B11 rotates the tool in a 5-axis transformation.
B_AX_CHAN = $PC_TRAFO_ROT_CHAN_AX[CHAIN_INDEX]    ; detemine channel axis identifier of machine axis B11
G0 AX[B_AX_CHAN] = 45.                            ; traverse axis as a channel axis

It only makes sense (presently) to apply this system variable if the orientation transformation is active. If this requirement is not met, alarm 14782 will be output.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$PC_TRAFO_ROT_CHAN_AX_EX</name>
<brief>Channel axis of the n-th rotary axis of a transformer</brief>
<description>Supplies the channel axis identifier of the rotary axis (orientation axis) defined in the transformation date $NT_ROT_AX_NAME[n, i] of the currently active transformation. Is the currently active orientation transformation not defined with the help of kinematic chains, then the return value of this system variable is the same as with system variable $PC_TRAFO_ROT_CHAN_AX_IN. This system variable can (presently) be applied only sensibly if the orientation transformation is active. If this requirement is not met, alarm 14782 will be output.
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$AC_TRAFO_TYPE_NAME</name>
<brief>Transformation type (string)</brief>
<description>Examples: "TRANSMIT" and "TRAORI_STAT"
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$PC_TRAFO_TYPE_NAME</name>
<brief>Transformation type (string)</brief>
<description>Examples: "TRANSMIT" and "TRAORI_STAT"
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$P_CUTMODK</name>
<brief>Last programmed value of CUTMODK</brief>
<description>$P_CUTMODK
Reads the currently valid value which was last programmed with the language command CUTMODK (Name of the orientation transformation defined by kinematic chains for which the cutting edge data modification is to be activated).
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$AC_CUTMODK</name>
<brief>Valid value of CUTMODK in current block</brief>
<description>$AC_CUTMODK
Reads the currently valid value of the language command CUTMODK in the current block (name of the orientation transformation defined by kinematic chains, for which the cutting edge data modification is to be activated).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SIM_TIME_STEP</name>
<brief>Time step in the simulation</brief>
<description>The variable $AC_SIM_TIME_STEP determines the current time interval in seconds during the simulation, A time interval corresponds to 1..n interpolation cycles in the real machining time. Each time interval in the simulation is executed in an interpolation cycle. The value of the variable is greater than zero if bit 4 is set in $MN_PROG_TEST_MASK and the simulation is selected.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_SIM_TIME_BLOCK</name>
<brief>Current real machining time of a block</brief>
<description>The variable $AC_SIM_TIME_BLOCK determines the current real machining time of a block in seconds during the simulation. The real machining time of a block is the time that passes in the case of normal program execution, and not the time that passes during the simulation. The value of the variable is greater than zero if bit 4 is set in $MN_PROG_TEST_MASK and the simulation has been selected.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_SIM_MODE</name>
<brief>Simulation mode</brief>
<description>The variable $P_SIM_MODE determines the simulation mode. The following values are possible:
0: No simulation active.
1: Simulation mode is active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_SIM_MODE</name>
<brief>Simulation mode</brief>
<description>The variable $AC_SIM_MODE determines the simulation mode. The following values are possible:
0: No simulation active.
1: Simulation mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_COLLPOS</name>
<brief>Collision position in world coordinate system</brief>
<description>Point of contact of two collision bodies when a collision alarm occurs.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_CUTMOD_ERR</name>
<brief>Error condition after last call of CUTMOD</brief>
<description>Error condition after the last call of the CUTMOD function (the CUTMOD function can also be called implicitly on tool change). The variable is reset to zero on RESET. It is initially reset at each tool change, and rewritten if required.

The variable is bit-coded. The bits have the following meanings:
Bit 0:  No valid cutting direction is defined for the active tool.
Bit 1:  The edge angles (clearance angle and holder angle) of the active tool are both zero.
Bit 2:  The clearance angle of the active tool has an impermissible value (less than 0 degrees or greater than 180 degrees).
Bit 3:  The holder angle of the active tool has an impermissible value (less than 0 degrees or greater than 90 degrees).
Bit 4:  The cutting tip angle of the active tool has an impermissible value (less than 0 degrees or greater than 90 degrees).
Bit 5:  The cutting edge position - holder angle combination of the active tool is impermissible (with cutting edge positions 1 through 4, the holder angle must be less than or equal to 90 degrees, with cutting edge positions 5 through 8, it must greater than or equal to 90 degrees).
Bit 6:  Impermissible rotation of the active tool (the tool was rotated through +/-90 degrees (with a tolerance of about 1 degree) out of the active machining plane. As a result, the cutting edge position is no longer defined in the machining plane.
Bit 7:  The cutting plate does not lie in the machining plane, and the angle between cutting plate and machining plane exceeds the upper limit specified in the setting data $SC_CUTMOD_PLANE_TOL.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_ATD</name>
<brief>Cutting edge parameters of the stated cutting edge, active tool</brief>
<description>$P_ATD[n, dNo]
Active tool offsets of cutting edge dNo
n: Parameter number 1 to 36
n = 1-25  $TC_DP1 to $TC_DP25
n = 26    $TC_DPCE  Number of the cutting edge (function: Unique D number)
n = 27    $TC_DPH   H number of the cutting edge (function: ISO mode)
n = 28    $TC_DPV   Tool orientation (function: Tool orientation)
n = 29    $TC_DPV3  Component 1 of the tool orientation (function: Tool orientation)
n = 30    $TC_DPV4  Component 2 of the tool orientation (function: Tool orientation)
n = 31    $TC_DPV5  Component 3 of the tool orientation (function: Tool orientation)
n = 32    $TC_DPVN3 Normal vector component 1 (function: Tool orientation)
n = 33    $TC_DPVN4 Normal vector component 2 (function: Tool orientation)
n = 34    $TC_DPVN5 Normal vector component 3 (function: Tool orientation)
n = 35    $TC_DPNT  Number of teeth on the cutting edge
n = 36    $TC_DPROTBase angle of rotation of the cutting edge
If an offset parameter belongs to a function that is not active, an alarm is output.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_ATDT</name>
<brief>Active tool offsets of the stated cutting edge (active tool)</brief>
<description>$P_ATDT[n]
Active tool offsets
n: Parameter numbers 1 - 36
n = 1-25  $TC_DP1 to $TC_DP25
n = 26    $TC_DPCENumber of the cutting edge (function: Unique D number)
n = 27    $TC_DPH   H number of the cutting edge (function: ISO mode)
n = 28    $TC_DPV   Tool orientation (function: Tool orientation)
n = 29    $TC_DPV3  Component 1 of the tool orientation (function: Tool orientation)
n = 30    $TC_DPV4  Component 2 of the tool orientation (function: Tool orientation)
n = 31    $TC_DPV5  Component 3 of the tool orientation (function: Tool orientation)
n = 32    $TC_DPVN3 Normal vector component 1 (function: Tool orientation)
n = 33    $TC_DPVN4 Normal vector component 2 (function: Tool orientation)
n = 34    $TC_DPVN5 Normal vector component 3 (function: Tool orientation)
n = 35    $TC_DPNT  Number of teeth on the cutting edge
n = 36    $TC_DPROTBase angle of rotation of the cutting edge
An alarm is issued if a compensation parameter belongs to a function that is not active.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PC_GCC_STATE</name>
<brief>Status of the G code converter</brief>
<description>The variable $PC_GCC_STATUS indicates the status of the G code converter.

The value of the variable has to be interpreted as follows:
0 = G code converter is not selected.
1 = The G code converter is selected via HMI, the active program will be converted at the next NC start.
2 = The G code conversion is active, the selected program is being processed.
3 = The G code converter was interrupted by the language command GCCDISABLE, no trace output to the GCC file.

Note:
The variable is automatically set to 0 on reset. If the variable is set to 0 via the OPI during conversion, the conversion is terminated.
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$AC_TRAFO_NAME</name>
<brief>Transformation name (string)</brief>
<description>Example: "6-axis transformation"
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_TH_OF_D</name>
<brief>Tool holder or spindle that determines the active offset D</brief>
<description>Tool holder or spindle on which the active tool is mounted, which contains the active D offset.
&gt;0:   Successful read access
 0:   No tool holder or spindle available as reference because, for example, no D offset is active.
-1:   Function is not available because TMFD is active.
If read as an OPI variable, this applies to the status in the current main run block.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_MTHNUM_BEFORE_SEARCH</name>
<brief>Master tool holder or spindle before search run</brief>
<description>Tool holder or spindle before search run or test mode was started.
&gt;0:   Successful read access
 0:   No tool holder or spindle available as reference because, for example, no D offset is active.
-1:   Function is not available because TMFD is active.
If the search run or test mode has ended, as from the next D programming, this variable contains the same value as $P_MTHNUM. If read as an OPI variable, this applies to the status in the current main run block.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_D_BEFORE_SEARCH</name>
<brief>active offset D before search run</brief>
<description>The active D offset before search run or test mode was started.
&gt;0:   Successful read access
 0:   No tool holder or spindle available as reference because, for example, no D offset was or is active.
-1:   Function is not available because TMFD is active.
If the search run or test mode has ended, as from the next D programming, this variable contains the same value as $P_TOOL. If read as an OPI variable, this applies to the status in the current main run block.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_DL_BEFORE_SEARCH</name>
<brief>active offset DL before search run</brief>
<description>The active setup or sum offset before search run or test mode was started.
&gt;0:   Successful read access
 0:   No tool holder or spindle available as reference because, for example, no DL offset was or is active.
-1:   Function is not available because TMFD is active.
If the search run or test mode has ended, as from the next D or DL programming, this variable contains the same value as $P_DLNO. If read as an OPI variable, this applies to the status in the current main run block.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_O_ACT</name>
<brief>Active setpoint orientation</brief>
<description>$AC_TOOL_O_ACT[n,i]
Active set orientation in various coordinate systems.
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_O_END</name>
<brief>Final orientation of the active block</brief>
<description>$AC_TOOL_O_END[n,i]
End orientation of the active block in various coordinate systems:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOL_O_DIFF</name>
<brief>Remaining angle to the orientation in the active block</brief>
<description>$AC_TOOL_O_DIFF[i]
Residual angle of the tool orientation in the active block in various coordinate systems:
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
Residual angle of the tool orientation in the active block
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_TOOL_O</name>
<brief>Active tool orientation</brief>
<description>$P_TOOL_O[n,i]
Active tool orientation in various coordinate systems:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$VC_TOOL_O</name>
<brief>Actual orientation</brief>
<description>$VC_TOOLO[n,i]
Actual orientation in various coordinate systems
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VC_TOOL_O_DIFF</name>
<brief>Angle between set and actual orientation</brief>
<description>$VC_TOOL_O_DIFF[i]
Angle between set and actual orientation in various coordinate systems:
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_R_ACT</name>
<brief>Active tool rotation direction</brief>
<description>$AC_TOOL_R_ACT[n,i]
Active set direction of rotation vector in various coordinate systems
Vector scaled to the length 1 with the components
(n = 1, 2, 3) with the value range  -1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following directional vectors are returned as a function of the current plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_R_END</name>
<brief>End rotation direction vector</brief>
<description>$AC_TOOL_R_END[n,i]
End direction of rotation vector of the active block in various coordinate systems
Vector scaled to the length 1 with the components
(n = 1, 2, 3) with the value range  -1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following directional vectors are returned as a function of the current plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_TOOL_R_DIFF</name>
<brief>Remaining angle of the tool rotation direction</brief>
<description>$AC_TOOL_R_DIFF[i]
Residual angle of the rotational direction of tool in the active block, value range 0 ... 180 degrees
in various coordinate systems:
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
Residual angle of the rotational direction of tool in the active block, value range 0 ... 180 degrees.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_TOOL_R</name>
<brief>Programmed tool rotation direction</brief>
<description>$P_TOOL_R[n,i]
Programmed rotational direction of tool in various coordinate systems
Vector scaled to the length 1 with the components
(n = 1, 2, 3) with the value range  -1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following directional vectors are returned as a function of the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
G19: (0, 0, 1)
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$VC_TOOL_R</name>
<brief>Actual rotation direction vector</brief>
<description>$VC_TOOL_R[n,i]
Actual direction of rotation vector in various coordinate systems
Vector scaled to the length 1 with the components
(n = 1, 2, 3) with the value range  -1, ..., 1.
1: x-component
2: y-component
3: z-component
If no tool is active, the following directional vectors are returned as a function of the active plane:
G17: (0, 1, 0)
G18: (1, 0, 0)
G19: (0, 0, 1)
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VC_TOOL_R_DIFF</name>
<brief>Angle between set and actual rotation</brief>
<description>$VC_TOOL_R_DIFF[i]
Angle between set and actual direction of rotation of the tool in degrees, value range 0 ... 180 degrees in various coordinate systems:
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
Angle between set and actual direction of rotation of the tool in degrees, value range 0 ... 180 degrees.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_EXTBUF</name>
<brief>Name of the reload buffer of a program level for Execute from external</brief>
<description>$P_EXTBUF[n]
Returns the name of the reload buffer in the passive file system for program level n for Execute from external. If program level n is not processed in the mode "Execute from external", $P_EXTBUF[n] returns an empty string.

Examples:

The main program MAIN.MPF is selected in the first channel by HMI Operate for Execute from external:
$P_EXTBUF[0] returns the program name "_N_MAIN_MPF".

In the first subprogram level, a part program is executed by means of the EXTCALL command:
$P_EXTBUF[1] returns the program name "_N_EXTBUF11_SYF".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_EXTPATH</name>
<brief>Path of the reload buffer of a program level for Execute from external</brief>
<description>$P_EXTPATH[n]
Returns the path of the reload buffer in the passive file system for program level n for Execute from external. If program level n is not processed in the mode "Execute from external", $P_EXTPATH[n] returns an empty string.

Examples:

The main program MAIN.MPF is selected in the first channel by HMI Operate for Execute from external:
$P_EXTPATH[0] returns the path "/_N_EXT_DIR/_N_EXTMOD_DIR/_N_CHAN1_DIR/".

In the first subprogram level, a part program is executed by means of the EXTCALL command:
$P_EXTPATH[1] returns the path "/SYF_DIR/".
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_OFF_O</name>
<brief>Programmed offset for tool orientation</brief>
<description>$P_OFF_O[n]
Programmed offset for the tool orientation
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_OFF_R</name>
<brief>Programmed offset for rotation of tool</brief>
<description>$P_OFF_R[n]
Programmed offset for the rotation of the tool (only with 6-axis kinematics)
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFF_LEAD</name>
<brief>Programmed  offset  for  LEAD   angle</brief>
<description>The interpretation of the LEAD angle is defined by MD $MC_ORIPATH_MODE. The offset angle only becomes effective if the geo axes move.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFF_TILT</name>
<brief>Programmed offset for TILT angle</brief>
<description>The interpretation of the LEAD angle is defined by MD $MC_ORIPATH_MODE. The offset angle only becomes effective if the geo axes move.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFF_THETA</name>
<brief>Programmed offset for THETA angle</brief>
<description>The offset angle THETA only becomes effective if the geo axes move and there are 6-axis kinematics.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_OFF_O</name>
<brief>Offset for tool orientation</brief>
<description>$AC_OFF_O[n]
Offset for the current tool orientation
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_OFF_R</name>
<brief>Offset for  rotating the tool</brief>
<description>$AC_OFF_R[n]
Offset for the current rotation of the tool
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OFF_LEAD</name>
<brief>Current offset for LEAD angle</brief>
<description>The interpretation of the LEAD angle is defined by MD $MC_ORIPATH_MODE. The offset angle only becomes effective if the geo axes move.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OFF_TILT</name>
<brief>Current offset for TILT angle</brief>
<description>The interpretation of the TILT angle is defined by MD $MC_ORIPATH_MODE. The offset angle only becomes effective if the geo axes move.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OFF_THETA</name>
<brief>Current offset for THETA angle</brief>
<description>The offset angle THETA only becomes effective if the geo axes move and there are 6-axis kinematics.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_OFF_ORI_LIMIT</name>
<brief>Maximum possible override of tool orientation reached</brief>
<description>The maximum possible deviation is set by the angle in $SC_OFF_ORI_LIMIT[i].
i = 0: Maximum possible deviation of the tool orientation has been reached.
i = 1: Maximum deviation of the rotation vector has been reached (only with 6-axis kinematics).
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_O_CORR</name>
<brief>Total set orientation</brief>
<description>$AC_TOOL_O_CORR[n,i]
Total current set orientation in various coordinate systems, including any existing overrides of the orientation:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
The vector is scaled to the length 1.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_R_CORR</name>
<brief>Total rotational direction of tool</brief>
<description>$AC_TOOL_O_CORR[n,i]
Total active direction of rotation of the tool in various coordinate systems, including any existing overrides:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
The vector is scaled to the length 1.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_O_CORRD</name>
<brief>Active override of the orientation</brief>
<description>$AC_TOOL_O_CORRD[n,i]
Active override in various coordinate systems:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
This vector is the difference between the two vectors $AC_TOOL_O_CORR and $AC_TOOL_O_ACT.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TOOL_R_CORRD</name>
<brief>Active override of the tool rotation</brief>
<description>$AC_TOOL_R_CORRD[n,i]
Active override of the rotation of the tool in various coordinate systems:
n = 1, 2, 3: components of the vector
i = 0, 1, 2: coordinate system (0 : BCS, 1: PCS, 2: SZS)
This vector is the difference between the two vectors $AC_TOOL_R_CORR and $AC_TOOL_R_ACT.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SEARCH_SMODE</name>
<brief>Block search: spindle mode</brief>
<description>The spindle mode from the last spindle programming in the block search is returned.
0: No spindle present in the channel or spindle is active in another channel or is being used by PLC (FC18) or synchronized actions.
1: Speed control mode
2: Positioning mode
3: Synchronous mode
4: Axis mode
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$P_IS_EES_PATH</name>
<brief>Determine type of path notation</brief>
<description>$P_IS_EES_PATH[n]
Query whether the path returned by $P_PATH[n] or the program name returned by $P_PROG[n] corresponds to the NCK notation (FALSE) or the EES notation (TRUE) (EES: Execution from External Storage):

FALSE (0):
$P_PATH[n] and $P_PROG[n] return NCK notation. That means each identifier has a prefix "_N_". The separator for the extension is "_". Example of a path and a program name in NCK notation: "/_N_WKS_DIR/_N_MYWPD_WPD/" and "_N_MYPROG_MPF" respectively
Note: A path in NCK notation can refer to both the passive file system as well as to the global part program memory (GDIR) in EES mode.

TRUE (1):
$P_PATH[n] and $P_PROG[n] return EES notation. That means the identifiers do not have a prefix "_N_". The separator for the extension is ".". Example of a path and a program name in EES notation: "//DEV1:/WKS.DIR/MYWPD.WPD/" and "MYPROG.MPF" respectively
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$P_CUTMODKA</name>
<brief>Modification of tool point direction active with CUTMODK</brief>
<description>Modification of tool point direction active for a transformation defined with kinematic chains.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AC_CUTMODKA</name>
<brief>Modification of tool point direction active with CUTMODK</brief>
<description>Modification of tool point direction active for a transformation defined with kinematic chains.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_M_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for milling tools</brief>
<description>The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) for milling tools, which is assigned to the geometry axis which was transferred as an index. Milling tools in this context are all tools with a tool type not lying between 400 and 599. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the active plane and the setting data SD42950 $SC_TOOL_LENGTH_TYPE and SD42940 $SC_TOOL_LENGTH_CONST. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. Adapter transformations are not taken into account because they are tool-specific.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_M_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for milling tools</brief>
<description>The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) for milling tools, which is assigned to the geometry axis which was transferred as an index. Milling tools in this context are all tools with a tool type not lying between 400 and 599. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the active plane and the setting data SD42950 $SC_TOOL_LENGTH_TYPE and SD42940 $SC_TOOL_LENGTH_CONST. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. Adapter transformations are not taken into account because they are tool-specific.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_T_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for turning tools</brief>
<description>The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) for turning and grinding tools, which is assigned to the geometry axis which was transferred as an index. Turning and grinding tools in this context are all tools with a tool type lying between 400 and 599. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the active plane and the setting data SD42950 $SC_TOOL_LENGTH_TYPE, SD42940 $SC_TOOL_LENGTH_CONST and SD42942 $SC_TOOL_LENGTH_CONST_T. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST or the hundreds digit of setting data SD42942 $SC_TOOL_LENGTH_CONST_T is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. Adapter transformations are not taken into account because they are tool-specific.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_T_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for turning tools</brief>
<description>$AC_T_TOOL_LENGTH_INDEX
The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) for turning and grinding tools, which is assigned to the geometry axis which was transferred as an index. Turning and grinding tools in this context are all tools with a tool type lying between 400 and 599. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the active plane and the setting data SD42950 $SC_TOOL_LENGTH_TYPE, SD42940 $SC_TOOL_LENGTH_CONST and SD42942 $SC_TOOL_LENGTH_CONST_T. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST or the hundreds digit of setting data SD42942 $SC_TOOL_LENGTH_CONST_T is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. Adapter transformations are not taken into account because they are tool-specific.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_ACT_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for the active tool</brief>
<description>$P_ACT_TOOL_LENGTH_INDEX
The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) of the active tool, which is assigned to the geometry axis which was transferred as an index. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the type of the active tool, the active plane, any active adapter transformation and the setting data SD42950 $SC_TOOL_LENGTH_TYPE, SD42940 $SC_TOOL_LENGTH_CONST and SD42942 $SC_TOOL_LENGTH_CONST_T. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST or the hundreds digit of setting data SD42942 $SC_TOOL_LENGTH_CONST_T is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. This system variable also takes adapter transformations into account. If no tool is active, the value 0 is returned.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_ACT_TOOL_LENGTH_INDEX</name>
<brief>Assignment of tool length components for the active tool</brief>
<description>$AC_ACT_TOOL_LENGHT_INDEX
The system variable returns the number of the tool length components (1, 2 or 3 corresponding to the length components L1, L2, L3) of the active tool, which is assigned to the geometry axis which was transferred as an index. The assignment does not take into account any rotations (e.g. as a result of kinematic transformations) or frames. It depends on the type of the active tool, the active plane, any active adapter transformation and the setting data SD42950 $SC_TOOL_LENGTH_TYPE, SD42940 $SC_TOOL_LENGTH_CONST and SD42942 $SC_TOOL_LENGTH_CONST_T. Active mirrorings of a frame can affect the output value if setting data SD42900 $SC_MIRROR_TOOL_LENGTH is set, see below. If the tool length component is active with a negative sign, the index is output with a negative sign. This can be the case if the hundreds digit of setting data SD42940 $SC_TOOL_LENGTH_CONST or the hundreds digit of setting data SD42942 $SC_TOOL_LENGTH_CONST_T is equal to 1, or if mirroring of the affected axis is active on account of setting data $SC_MIRROR_TOOL_LENGTH. If both causes are active simultaneously, the resulting sign is positive once more. This system variable also takes adapter transformations into account. If no tool is active, the value 0 is returned.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_TOOLBIN</name>
<brief>Active binormal vector of the tool orientation</brief>
<description>$P_TOOLBIN[n]
This system variable returns the binormal vector of the tool orientation scaled to length 1.
The vector is equal to the (scaled) cross product of the vector $P_TOOLROT (normal tool vector) and $P_TOOLO (tool orientation). If $P_TOOLROT and $P_TOOLO are at right-angles to each other, $P_TOOLBIN (abscissa), $P_TOOLROT (ordinate) and $P_TOOLO (applicate) form a clockwise, orthogonal coordinate system. This condition has to be fulfilled unless the tool orientation and normal tool vector are explicitly specified otherwise by tool data $TC_DPV... or $TC_DPVN.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_GFR</name>
<brief>Frame selection for grinding frames</brief>
<description>Variable for workpiece and tool measurement.
The composition of the desired frame chain can be specified using the variable $AC_MEAS_GFR in order to convert one position into a position in another coordinate system. The value of the variable ranges from 1 to 100 for the up to 100 settable frames.

Application:
$AC_MEAS_GFR = 1
The GS1 frame is included in the calculation of the new total frame.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_GFRAME</name>
<brief>Active grinding frame</brief>
<description>The variable $P_GFRAME is used to program the active grinding frame. A grinding data management frame $P_GFR[n] becomes the active grinding frame as a result of the execution of GFRAME0 to GFRAME100.

On reset, the activation of a grinding frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[63]
$MC_GCODE_RESET_VALUES[63]
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_GFRNUM</name>
<brief>Number of active grinding frame</brief>
<description>The variable $P_GFRNUM determines the number of the active grinding frame. A grinding data management frame $P_GFR[n] becomes the active grinding frame as a result of the execution of GFRAME0 to GFRAME100.
GFRAME0: $P_GFRNUM = 0
GFRAME100: $P_GFRNUM = 100

On reset, the activation of a grinding frame depends on the following machine data:
Bit0 in $MC_RESET_MODE_MASK
$MC_GCODE_RESET_MODE[63]
$MC_GCODE_RESET_VALUES[63]
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_IN_KEY_G</name>
<brief>Grinding: Reading in of grinding input[n]</brief>
<description>The variable enables the corresponding value for the NCK grinding input[n] to be read in from the PLC. Writing by the PLC user program is only successful if write is enabled by $AC_IN_KEY_G_ENABLE[n] and the PLC interface.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_IN_KEY_G_ISENABLE</name>
<brief>Grinding: Enable status of grinding input[n]</brief>
<description>The variable for the specific grinding input[n] the logic operation (AND) of the enable states of PLC and NCK.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_IN_KEY_G_RUN_OUT</name>
<brief>Grinding: Status (NCK) of grinding function[n]</brief>
<description>The variable enables activation/deactivation of the specific grinding function[n] in the part program.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_IN_KEY_G_ENABLE</name>
<brief>Grinding: Enable grinding input[n]</brief>
<description>The variable issues the enable signal of the corresponding grinding input[n] on the NCK side. A program reset automatically blocks all inputs.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_IN_KEY_G_RUN_IN</name>
<brief>Grinding: Status (PLC) of grinding function[n]</brief>
<description>The variable enables the status bit of the PLC for the specific grinding function[n] to be read in the PLC.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_IPO_BUFLA</name>
<brief>Fill level of IPO buffer in percent without Look Ahead proportion</brief>
<description>The $AC_IPO_BUFLA variable determines the useful fill level of the IPO buffer in percent without the Look Ahead component. The value is read from the part program without preprocessing stop.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_CORR_ELEM_P</name>
<brief>Offset of a correction element in the part chain of a transformation.</brief>
<description>The variable supplies vector $NK_OFF_DIR[..] of a correction element in the part chain of an active orientation transformation defined using kinematic chains. The first index of the system variable refers to the section of the part chain with the specified index. For information about the terms "Correction element" and "Section", refer to the documentation on the CORRTRAFO measuring function. The second index is the index of the vector component.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_CORR_ELEM_T</name>
<brief>Offset of a correction element in the tool chain of a transformation.</brief>
<description>The variable supplies vector $NK_OFF_DIR[..] of a correction element in the part chain of an active orientation transformation defined using kinematic chains. The first index of the system variable refers to the section of the part chain with the specified index. For information about the terms "Correction element" and "Section", refer to the documentation on the CORRTRAFO measuring function. The second index is the index of the vector component
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_ORIAX_DIR_P</name>
<brief>Axis vector of an orientation axis in the part chain of a transformation.</brief>
<description>The variable supplies vector $NK_OFF_DIR[..] (direction vector) of an orientation axis in the part chain of an active orientation transformation defined using kinematic chains. The first index of the system variable specifies the index of the orientation axes when counting from the start of the chain to the end of the chain. The second index is the index of the vector component.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_ORIAX_DIR_T</name>
<brief>Axis vector of an orientation axis in the tool chain of a transformation.</brief>
<description>The variable supplies vector $NK_OFF_DIR[..] (direction vector) of an orientation axis in the part chain of an active orientation transformation defined using kinematic chains. The first index of the system variable specifies the index of the orientation axes when counting from the start of the chain to the end of the chain. The second index is the index of the vector component.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_TRAFO_ORIAX_LOC</name>
<brief>Index of an orientation axis in the kin. chain of an orientation transformation.</brief>
<description>The variable supplies the decimal-coded index of an orientation axis in the kinematic chain of an orientation transformation. The tens location designates the subchain in which the orientation axis is contained (0: part chain; 1: tool chain) - and the ones location, the index of the axis when counting from the origin of the chain to the end of the chain. The parameter must have the channel axis name (type AXIS) of a rotary axis, which is defined as orientation axis in an active orientation transformation.

When reading, the following error codes can occur:
-1 no transformation is active.
-2 no orientation transformation defined using kinematic chains is active.
-3 the specified channel axis is not an orientation axis of the active transformation.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_SECTION_P</name>
<brief>Section in the part chain of a transformation.</brief>
<description>The variable supplies the vector of the section in the part chain of an active orientation transformation defined using kinematic chains in global coordinates. The first index of the system variable refers to the section of the part chain with the specified index. For the "Section" term, refer to the documentation on measuring function CORRTRAFO. The second index is the index of the vector component.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AC_TRAFO_SECTION_T</name>
<brief>Section in the tool chain of a transformation.</brief>
<description>The variable supplies the vector of the section in the part chain of an active orientation transformation defined using kinematic chains in global coordinates. The first index of the system variable refers to the section of the part chain with the specified index. For the "Section" term, refer to the documentation on measuring function CORRTRAFO The second index is the index of the vector component
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_PROG_NAME</name>
<brief>Program name of a program level without prefix and suffix</brief>
<description>$P_PROG_NAME[n]
Supplies the name of the program at program level n without prefix "_N_" and without suffix (file extension) and suffix separator.
If the program level is executed in the "Execute from external", then the $P_PROG_NAME refers to the name of the post load buffer.

Examples:

In program level 0 = main program name, program_N_MYPROG_MPF is executed $P_PROG_NAME[0] supplies the name of the program at program level 0 without prefix and suffix, i.e. "MYPROG".

At program level 1 in the post load buffer /_N_SYF_DIR/_N_EXTBUF11_SYF, an NC program is executed with EXTCALL command $P_PROG_NAME[1] supplies the name of the program at program level 1 without prefix and suffix, i.e. "EXTBUF11".
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_PROG_SUFFIX</name>
<brief>Suffix of the program name of a program level</brief>
<description>$P_PROG_SUFFIX[n]
Supplies the file extension (suffix) of the program name at program level n without suffix separator. The file extension is always three characters long. In the passive filesystem, "_" is used as suffix separator and for program names in the EES-notation "." (EES: Execution from External Storage). If the program level is executed in the "Execute from external" mode, then $P_PROG_SUFFIX refers to the post load buffer.

Examples:

At program level 0 = main program name, program_N_MYPROG_MPF is executed $P_PROG_SUFFIX[0] supplies the file extension of the program at program level 0, i.e. "MPF".

At program level 1 in the post load buffer/_N_SYF_DIR/_N_EXTBUF11_SYF, an agency program is executed with EXTCALL command $P_PROG_SUFFIX[1] supplies the file extension of the program at program level 1, i.e. "SYF".
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AC_SYNA_STATE</name>
<brief>Status of a synchronized action</brief>
<description>You can read the status of a synchronized action using variable $AC_SYNA_STATE[ID]. The index ID is the ID of the modal or static synchronized action, for which the status should be read. The value is bit coded.

Bit description:
Bit 0 = 0: No lock
Bit 0 = 1 PLC or synchronized actions are locked
Bit 1 = 0: PLC is locked
Bit 1 = 1: Lock from PLC
Bit 2 = 0: Synchronized action is not locked
Bit 2 = 1: Synchronized action is locked
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AC_MEAS_ORIWKS</name>
<brief>Transformation behavior of the measuring interface</brief>
<description>Variable for the frame transformation of orientation axis coordinates. The variable $AC_MEAS_ORIWKS specifies the frame transformation behavior of the measuring interface in respect of the orientation axis coordinates.

The following values are possible:
0: Orientation axis coordinates are transformed as ORIMKS
1: Orientation axis coordinates are transformed as ORIWKS
2: The frame transformation of the orientation axis coordinates depends on the active G code ORIMKS or ORIWKS.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_ACT_ORI_TOOL_LENGTH</name>
<brief>Current tool length in the BCS</brief>
<description>The variable returns the tool length components of the active tool in the basic coordinate system (BCS). This takes into account the tool orientation, including adapter data, mirroring and a possibly active, orientable tool carrier (TCARR).

The indices designate the geometry axes with the assignment:
1: X-axis (abscissa)
2: Y-axis (abscissa)
3: Z-axis (abscissa)

The tool lengths (deviating from standard) are measured from the tool reference point to the tool tip. This means that, if no additional rotation is active, the components are output with inverted sign compared to the corresponding cutting edge data.
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$PC_TRAFO_NAME</name>
<brief>Transformation name (string)</brief>
<description>Example: "6-axis transformation"
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_OFF_O_DIR</name>
<brief>Programmed rotation vector for tool orientation</brief>
<description>$P_OFF_O_DIR[n]
Programmed rotation vector for offset of the tool orientation
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_OFF_R_DIR</name>
<brief>Programmed rotation vector for rotation of the tool</brief>
<description>$P_OFF_R_DIR[n]
Programmed rotation vector for the offset of the rotation of the tool (only with 6-axis kinematics)
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
3: z-component of the vector
Is only relevant with 6-axis kinematics.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFF_O_ANGLE</name>
<brief>Programmed angle of rotation for offset  of the orientation</brief>
<description>$P_OFF_O_ANGLE
Programmed angle of rotation for rotation around the vector $P_OFF_O_DIR for offset of the tool orientation.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$P_OFF_R_ANGLE</name>
<brief>Programmed angle of rotation for rotation of the orientation</brief>
<description>$P_OFF_R_ANGLE
Programmed angle of rotation for rotation around the vector $P_OFF_R_DIR for offset of the rotation of the tool orientation (only with 6-axis kinematics).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_OFF_O_DIR</name>
<brief>Rotation vector for offset of the tool  orientation</brief>
<description>$AC_OFF_O_DIR[n]
Rotation vector for offset for the current tool orientation
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
3: z-component of the vector
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_OFF_R_DIR</name>
<brief>Rotation vector for offset of the tool  rotation</brief>
<description>$AC_OFF_R_DIR[n]
Rotation vector for offset for the current tool rotation
n = 1, 2, 3
1: x-component of the vector
2: y-component of the vector
3: z-component of the vector
Is only relevant for 6-axis kinematics.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OFF_O_ANGLE</name>
<brief>Current angle of rotation for offset of  the  orientation</brief>
<description>Current angle of rotation for rotation around the vector $AC_OFF_O_DIR for offset of the orientation.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AC_OFF_R_ANGLE</name>
<brief>Current angle of rotation for offset of  the  rotation vector</brief>
<description>Current angle of rotation for rotation around the vector $AC_OFF_R_DIR for offset of the rotation vector of the tool. Is only relevant for 6-axis kinematics.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PC_TCARR_OFFSET</name>
<brief>Vector component n of offset vector m of the active tool carrier</brief>
<description>When a tool carrier is active, a maximum of 4 offset vectors (l1 to l4) are defined. This system variable can be used to read out the vector components. The first index designates the index of the offset vector (1...4), the second index the vector component (0...3). If no tool carrier is active, every read access returns the value 0.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PC_TCARR_AX_VECT</name>
<brief>Vector component n of the rotary axis vector m of the active tool carrier</brief>
<description>When a tool carrier is active, a maximum of 2 rotary axes (v1 to v2) are defined. This system variable can be used to read out the vector components. The first index designates the index of the rotary axis vector (1...2), the second index the vector component (0...3). If no tool carrier is active, every read access returns the value 0.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PC_TCARR_AX_OFFSET</name>
<brief>Basic position of the rotary axis.</brief>
<description>When a tool carrier is active, a maximum of 2 rotary axes are defined. This system variable can be used to read out the positions of the rotary axes in relation to the basic position. The index designates the index of the rotary axis (1...2). If no tool carrier is active, every read access returns the value 0.
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_UIFR</name>
<brief>Settable data management frames</brief>
<description>Array variable $P_UIFR[n] is used to program settable data management frames. G500, G54 .. G599 can be used to activate the corresponding data management frame. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
The number of settable frames in configured with $MC_MM_NUM_USER_FRAMES.
0: G500
1: G54
2: G55
3: G56
4: G57
5: G505
6: G506
..
99: G599
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_CHBFR</name>
<brief>Channel-specific basic frames in the data management system</brief>
<description>Array variable $P_CHBFR[n] is used to program channel-specific basic frames in the data management system. G500, G54 .. G599 can be used to activate the data management frames. All active basic frames are chained together to produce the overall basic frame $P_ACTBFRAME. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_SETFR</name>
<brief>Data management frame for preset actual value memory</brief>
<description>Variable $P_SETFR is used to program the system frame in the data management system for preset actual value memory and scratching. This frame should only be manipulated and activated by the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On a Reset, the system frame can be cleared by configuring Bit 0 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_EXTFR</name>
<brief>Data management frame for external frame</brief>
<description>Variable $P_EXTFR is used to program the system frame in the data management system for the external work offset. This frame is activated by the PLC. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On a Reset, the system frame can be cleared by configuring Bit 1 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_PARTFR</name>
<brief>Data management frame for TCARR and PAROT</brief>
<description>Variable $P_PARTFR is used to program the system frame in the data management system for TCARR and PAROT. This frame should only be manipulated and activated by the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TOOLFR</name>
<brief>Data management frame for TOROT and TOFRAME</brief>
<description>Variable $P_TOOLFR is used to program the system frame in the data management system for TOROT and TOFRAME. This frame should only be manipulated and activated by the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_WPFR</name>
<brief>Data management frame for workpiece</brief>
<description>Variable $P_WPFR is used to program the system frame in the data management system for workpiece reference points. The data management frames are stored in SRAM and can be read in and out using the data backup feature.On a Reset, the system frame can be cleared by configuring Bit 4 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_CYCFR</name>
<brief>Data management frame for cycles</brief>
<description>Variable $P_CYCFR is used to program the system frame in the data management system for cycles. This frame should only be manipulated and activated by cycles. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On a Reset, the system frame can be cleared by configuring Bit 5 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_TRAFR</name>
<brief>Data management frame for transformations</brief>
<description>Variable $P_TRAFR is used to program the system frame in the data management system for transformations. This frame should only be manipulated and activated by the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO1FR</name>
<brief>Data management frame for ISO G51.1 mirroring</brief>
<description>Variable $P_ISO1FR is used to program the system frame in the data management for the ISO G code G51.1 mirroring.This frame should only be manipulated and activated via the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On reset, the system frame can be deleted via the configuration of bit 0 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO2FR</name>
<brief>Data management frame for ISO G68 2DROT</brief>
<description>Variable $P_ISO2FR is used to program the system frame in the data management for the ISO G68 2DROT.This frame should only be manipulated and activated via the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On reset, the system frame can be deleted via the configuration of bit 0 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO3FR</name>
<brief>Data management frame for ISO G68 3DROT</brief>
<description>Variable $P_ISO3FR is used to program the system frame in the data management for the ISO G68 3DROT.This frame should only be manipulated and activated via the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On reset, the system frame can be deleted via the configuration of bit 0 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_ISO4FR</name>
<brief>Data management frame for ISO G51 Scale</brief>
<description>Variable $P_ISO4FR is used to program the system frame in the data management for the ISO G code G51 Scale.This frame should only be manipulated and activated via the system function. The data management frames are stored in SRAM and can be read in and out using the data backup feature. On reset, the system frame can be deleted via the configuration of bit 0 in $MC_CHSFRAME_RESET_CLEAR_MASK.
</description>
</parameter>

<parameter type="FRAME" dim="0">
<name>$P_RELFR</name>
<brief>Data management frame for relative coordinate systems</brief>
<description>The variable $P_RELFR is used for programming the system frame in the data management for relative coordinate systems. This frame should only be activated and manipulated via the system function. The data management frames are stored in the SRAM, and can be read in and out via the data backup.

The system frame is configured in the following machine data:
Bit 11 in $MC_MM_SYSTEM_FRAME_MASK
Bit 11 in $MC_MM_SYSTEM_DATAFRAME_MASK
Bit 11 in $MC_CHSFRAME_RESET_MASK
Bit 11 in $MC_CHSFRAME_RESET_CLEAR_MASK
Bit 11 in $MC_CHSFRAME_POWERON_MASK
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_NCBFR</name>
<brief>Global basic frames in the data management system</brief>
<description>Array variable $P_NCBFR[n] is used to program global basic frames in the data management system. G500, G54 .. G599 can be used to activate the data management frames. All active basic frames are chained together to produce the overall basic frame $P_ACTBFRAME. The data management frames are stored in SRAM and can be read in and out using the data backup feature.
</description>
</parameter>

<parameter type="FRAME" dim="1">
<name>$P_GFR</name>
<brief>Data management frames for grinding applications</brief>
<description>The field variable $P_GFR[n] is used to program data management frames for grinding applications. The appropriate data management frame can be activated via GFRAME1 to GFRAME100. The data management frames are stored in SRAM, and can be read in and out via the data backup.

The number of grinding frames is configured via $MC_MM_NUM_G_FRAMES.
0: GFRAME0 no grinding frame active
1: GFRAME1
..
100: GFRAME100
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$SC_PA_ACTIV_IMMED</name>
<brief>Protection zone immediately active</brief>
<description>$SC_PA_ACTIV_IMMED[n]
n: Number of the protection area
Protection area immediately active after boot
TRUE: The protection area is activated immediately after the control has booted and the axes have been referenced
FALSE: The protection area is not immediately active
Note: This variable can only be written as a system variable and is not affected by the NC commands between NPROTDEF(..) and EXECUTE(n).
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$SC_PA_T_W</name>
<brief>Protection zone specific to workpiece/tool</brief>
<description>$SC_PA_T_W[n]
n: Number of the protection area
Protection area specific to workpiece/tool
0: Workpiece-specific protection area
3: Tool-specific protection area
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SC_PA_ORI</name>
<brief>Orientation of protection zone</brief>
<description>$SC_PA_ORI[n]
n: Number of the protection area
Orientation of protection area
0: Polygon curve in the plane formed by the 1st and 2nd geo axes (G17)
1: Polygon curve in the plane formed by the 3rd and 1st geo axes (G18)
2: Polygon curve in the plane formed by the 2nd and 3rd geo axes (G19)
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SC_PA_LIM_3DIM</name>
<brief>Scope of application-limiting protection zone</brief>
<description>$SC_PA_LIM_3DIM[n]
n: Number of the protection area
Identifier for limitation of protection area in the axis perpendicular to the polygon curve
0: No limitation
1: Limitation in the positive direction
2: Limitation in the negative direction
3: Limitation in both directions
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$SC_PA_PLUS_LIM</name>
<brief>Limitation of protection zone applicate plus</brief>
<description>$SC_PA_PLUS_LIM[n]
n: Number of the protection area
Positive limitation of protection areas in the axis perpendicular to the polygon curve.
Effective only if $SC_PA_LIM_3DIM[n]=1 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$SC_PA_MINUS_LIM</name>
<brief>Limitation of protection zone applicate minus</brief>
<description>$SC_PA_MINUS_LIM[n]
n: Number of the protection area
Negative limitation of protection area in minus direction in the axis perpendicular to the polygon curve
Effective only if $SC_PA_LIM_3DIM[n]=2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SC_PA_CONT_NUM</name>
<brief>Number of valid contour elements</brief>
<description>$SC_PA_CONT_NUM[n]
n: Number of the protection area
Protection areas need at least 2 contour elements for a complete description.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$SC_PA_CONT_TYP</name>
<brief>Type of the contour element</brief>
<description>$SC_PA_CONT_TYP"[n,m]
n: Number of the protection area
m: Number of the contour element (0 - MAXNUM_CONTOURNO_PROTECTAREA)
Type (G1, G2, G3) of contour element
=0: Contour not defined
=1: Straight
=2: Circle element (clockwise)
=3: Circle element (counterclockwise)
The end point is determined by $SC_PA_CONT_ORD or $SC_PA_CONT_ABS. With contour types G2 and G3, $SC_PA_CENT_ORD or $SC_PA_CENT_ABS determines the center point of the circle element.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SC_PA_CONT_ORD</name>
<brief>End point of contour element (ordinate)</brief>
<description>$SC_PA_CONT_ORD[n,m]
n: Number of the protection area
m: Number of the contour element (0 - MAXNUM_CONTOURNO_PROTECTAREA)
End point of contour element (ordinate)
See also description of $SC_PA_CONT_TYP
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SC_PA_CONT_ABS</name>
<brief>End point of contour element (abscissa)</brief>
<description>$SC_PA_CONT_ABS[n,m]
n: Number of the protection area
m: Number of the contour element (0 - MAXNUM_CONTOURNO_PROTECTAREA)
End point of contour element (abscissa)
See also description of $SC_PA_CONT_TYP
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SC_PA_CENT_ORD</name>
<brief>Center point of contour element (ordinate)</brief>
<description>$SC_PA_CENT_ORD[n,m]
n: Number of the protection area
m: Number of the contour element (0 - MAXNUM_CONTOURNO_PROTECTAREA)
Center point of contour element (ordinate)
Relevant only if $SC_PA_CONT_TYP[n,m] = 2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SC_PA_CENT_ABS</name>
<brief>Center point of contour element (abscissa)</brief>
<description>$SC_PA_CENT_ABS[n,m]
n: Number of the protection area
m: Number of the contour element (0 - MAXNUM_CONTOURNO_PROTECTAREA)
Center point of contour element (abscissa)
Relevant only if $SC_PA_CONT_TYP[n,m] = 2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_CHAx_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
        CHAx: x=channel no.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR1</name>
<brief>X component of offset vector l1</brief>
<description>$TC_CARR1[n]
x component of offset vector l1
Attention! All system parameters beginning with '$TC_' are parameters belonging to the TOA area.
The special characteristic of this area is that machine data 28085 = MM_LINK_TOA_UNIT can be set to allow different NCK channels to access these parameters. If this type of parameter setting has been selected by the NCK, you must be aware that changing these data can have a negative impact on other channels. Before you change any data settings, make sure that the changes will have only a local effect on the channel in which they are made.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR2</name>
<brief>Y component of offset vector l1</brief>
<description>$TC_CARR2[n]
Y component of offset vector l1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR3</name>
<brief>Z component of offset vector l1</brief>
<description>$TC_CARR3[n]
Z component of offset vector l1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR4</name>
<brief>X component of offset vector l2</brief>
<description>$TC_CARR4[n]
X component of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR5</name>
<brief>Y component of offset vector l2</brief>
<description>$TC_CARR5[n]
Y component of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR6</name>
<brief>Z component of offset vector l2</brief>
<description>$TC_CARR6[n]
Z component of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR7</name>
<brief>X component of rotary axis v1</brief>
<description>$TC_CARR7[n]
X component of rotary axis v1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR8</name>
<brief>Y component of rotary axis v1</brief>
<description>$TC_CARR8[n]
Y component of rotary axis v1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR9</name>
<brief>Z component of rotary axis v1</brief>
<description>$TC_CARR9[n]
Z component of rotary axis v1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR10</name>
<brief>X component of rotary axis V2</brief>
<description>$TC_CARR10[n]
X component of rotary axisv2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR11</name>
<brief>Y component of rotary axis v2</brief>
<description>$TC_CARR11[n]
Y component of rotary axis v2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR12</name>
<brief>Z component of rotary axis v2</brief>
<description>$TC_CARR12[n]
Z component of rotary axis v2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR13</name>
<brief>Angle of rotation alpha1 (in degrees)</brief>
<description>$TC_CARR13[n]
Angle of rotation alpha1 (in degrees)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR14</name>
<brief>Angle of rotation alpha2 (in degrees)</brief>
<description>$TC_CARR14[n]
Angle of rotation alpha2 (in degrees)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR15</name>
<brief>X component of offset vector l3</brief>
<description>$TC_CARR15[n]
X component of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR16</name>
<brief>Y component of offset vector l3</brief>
<description>$TC_CARR16[n]
Y component of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR17</name>
<brief>Z component of offset vector l3</brief>
<description>$TC_CARR17[n]
Z component of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR18</name>
<brief>X component of offset vector l4</brief>
<description>$TC_CARR18[n]
X component of offset vector l4
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR19</name>
<brief>Y component of offset vector l4</brief>
<description>$TC_CARR19[n]
Y component of offset vector l4
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR20</name>
<brief>Z component of offset vector l4</brief>
<description>$TC_CARR20[n]
Z component of offset vector l4
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$TC_CARR21</name>
<brief>Axis identifier of 1st rotary axis</brief>
<description>$TC_CARR21[n]
Axis identifier of 1st rotary axis
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$TC_CARR22</name>
<brief>Axis identifier of 2nd rotary axis</brief>
<description>$TC_CARR22[n]
Axis identifier of 2nd rotary axis
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$TC_CARR23</name>
<brief>Kinematic type</brief>
<description>$TC_CARR23[n]
Type of kinematics: P: Rotatable workpiece (Part)
M: Rotatable tool and rotatable workpiece (Mixed)
T or any other character apart from P and M: Rotatable tool
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR24</name>
<brief>Offset of 1st rotary axis in degrees</brief>
<description>$TC_CARR24[n]
Offset of 1st rotary axis in degrees
Specifies the angle in degrees of the 1st rotary axis at which the axis assumes its initial position.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR25</name>
<brief>Offset of 2nd rotary axis in degrees</brief>
<description>$TC_CARR25[n]
Offset of 2nd rotary axis in degrees
Specifies the angle in degrees of the 2nd rotary axis at which the axis assumes its initial position.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR26</name>
<brief>Offset of 1st rotary axis with Hirth teeth</brief>
<description>$TC_CARR26[n]
Specifies the offset of the 1st rotary axis if its position is not continuously variable (Hirth tooth system).
This variable is evaluated only if $TC_CARR28 is set to a value other than zero.
For exact meanings, please refer to the description of $TC_CARR28
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR27</name>
<brief>Offset of 2nd rotary axis with Hirth teeth</brief>
<description>$TC_CARR27[n]
Specifies the offset of the 2nd rotary axis if its position is not continuously variable (Hirth tooth system).
This variable is evaluated only if $TC_CARR29 is set to a value other than zero.
For exact meanings, please refer to the description of $TC_CARR29
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR28</name>
<brief>Minimum incremental step of 1st rotary axis</brief>
<description>$TC_CARR28[n]
Specifies the size of the minimum increment (in degrees) by which the 1st rotary axis can change position (e.g. with Hirth tooth systems).
A programmed or calculated angle is rounded to the nearest value calculated from

   phi = s + n * d

when n is an integer.

In this equation
s = $TC_CARR28
d = $TC_CARR26

If $TC_CARR28 equals zero, $TC_CARR26 and $TC_CARR28 are not used. The settings in machine data $MC_TOCARR_ROT_ANGLE_INCR[i] and $MC_TOCARR_ROT_ANGLE_OFFSET[i] are applied instead.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR29</name>
<brief>Minimum incremental step of 2nd rotary axis</brief>
<description>$TC_CARR29[n]
Specifies the size of the minimum increment (in degrees) by which the 2nd rotary axis can change position (e.g. with Hirth tooth systems).
A programmed or calculated angle is rounded to the nearest value calculated from

   phi = s + n * d

when n is an integer.

In this equation
s = $TC_CARR29
d = $TC_CARR27

If $TC_CARR29 equals zero, $TC_CARR27 and $TC_CARR29 are not used. The settings in machine data $MC_TOCARR_ROT_ANGLE_INCR[i] and $MC_TOCARR_ROT_ANGLE_OFFSET[i] are applied instead.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR30</name>
<brief>Minimum position of 1st rotary axis</brief>
<description>$TC_CARR30[n]
Specifies the minimum position of the 1st rotary axis. For full description, see $TC_CARR32
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR31</name>
<brief>Minimum position of 2nd rotary axis</brief>
<description>$TC_CARR31[n]
Specifies the minimum position of the 2nd rotary axis. For full description, see $TC_CARR33
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR32</name>
<brief>Maximum position of 1st rotary axis</brief>
<description>$TC_CARR32[n]
Specifies the maximum position of the 1st rotary axis.
When the angle of the 1st rotary axis of an orientable tool carrier aligned according to a frame (TCOFR) is calculated, the only acceptable solutions are those which lie within the $TC_CARR30 to $TC_CARR32 range. The same applies when the rotary angle is programmed absolutely (TCOABS). The limits are not evaluated if both $TC_CARR30 and $TC_CARR32 equal zero.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR33</name>
<brief>Maximum position of 2nd rotary axis</brief>
<description>$TC_CARR33[n]
Specifies the maximum position of the 2nd rotary axis.
When the angle of the 2nd rotary axis of an orientable tool carrier aligned according to a frame (TCOFR) is calculated, the only acceptable solutions are those which lie within the $TC_CARR31 to $TC_CARR33 range. The same applies when the rotary angle is programmed absolutely (TCOABS). The limits are not evaluated if both $TC_CARR31 and $TC_CARR33 equal zero.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR34</name>
<brief>Freely usable string (tool carrier name)</brief>
<description>$TC_CARR34[n]
Contains a freely definable string. This is provided as a free identifier for the orientable tool carrier. However, it currently has no significance within the NCK, and is therefore not evaluated. This identifier should not be used for other purposes as it may be used in a future upgrade to allow the activation of an orientable tool carrier via a name rather than a number.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR35</name>
<brief>Freely available string (1st rotary axis name)</brief>
<description>$TC_CARR35[n]
Contains a freely definable string. This is provided as a free identifier for the first rotary axis. Within the NCK, however, it has no significance at all and is therefore not evaluated. It can also be used for any other purpose.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR36</name>
<brief>Freely available string (2nd rotary axis name)</brief>
<description>$TC_CARR36[n]
Contains a freely definable string. This is provided as a free identifier for the second rotary axis. Within the NCK, however, it has no significance at all and is therefore not evaluated. It can also be used for any other purpose.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_CARR37</name>
<brief>Freely available numeric identifier (tool carrier number)</brief>
<description>$TC_CARR37[n]
Contains an integer number for identifying the toolholder. Within the NCK, however, it has no significance at all and is therefore not evaluated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR38</name>
<brief>Freely available position value (X position)</brief>
<description>$TC_CARR38[n]
Contains a position (X component of retraction position) Within the NCK, however, it has no significance at all and is therefore not evaluated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR39</name>
<brief>Freely available position value (Y position)</brief>
<description>$TC_CARR39[n]
Contains a position (Y component of retraction position) Within the NCK, however, it has no significance at all and is therefore not evaluated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR40</name>
<brief>Freely available position value (Z position)</brief>
<description>$TC_CARR40[n]
Contains a position (Z component of retraction position) Within the NCK, however, it has no significance at all and is therefore not evaluated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR41</name>
<brief>Fine offset X of the offset vector l1</brief>
<description>$TC_CARR41[n]
X component of fine offset of offset vector l1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR42</name>
<brief>Fine offset Y of the offset vector l1</brief>
<description>$TC_CARR42[n]
Y component of fine offset  of offset vector l1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR43</name>
<brief>Fine offset Z of the offset vector l1</brief>
<description>$TC_CARR43[n]
Z component of fine offset of offset vector l1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR44</name>
<brief>Fine offset X of the offset vector l2</brief>
<description>$TC_CARR44[n]
X component of fine offset of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR45</name>
<brief>Fine offset Y of the offset vector l2</brief>
<description>$TC_CARR45[n]
Y component of fine offset of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR46</name>
<brief>Fine offset Z of the offset vector l2</brief>
<description>$TC_CARR46[n]
Z component of fine offset of offset vector l2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR55</name>
<brief>Fine offset X of the offset vector l3</brief>
<description>$TC_CARR55[n]
X component of fine offset of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR56</name>
<brief>Fine offset Y of the offset vector l3</brief>
<description>$TC_CARR56[n]
Y component of fine offset of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR57</name>
<brief>Fine offset  Z of the offset vector l3</brief>
<description>$TC_CARR57[n]
Z component of fine offset  of offset vector l3
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR58</name>
<brief>Fine offset X of the offset vector l4</brief>
<description>$TC_CARR58[n]
X component of fine offset of offset vector l4
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR59</name>
<brief>Fine offset  Y of the offset vector l4</brief>
<description>$TC_CARR59[n]
Y component of fine offset of offset vector l4
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR60</name>
<brief>Fine offset Z of the offset vector l4</brief>
<description>$TC_CARR60[n]
Z component of fine offset of offset vector l4
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR64</name>
<brief>Fine offset of 1st rotary axis v1</brief>
<description>$TC_CARR64[n]
Fine offset of offset ($TC_CARR24) of 1st rotary axis in degrees
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_CARR65</name>
<brief>Fine offset of 2nd rotary axis v2</brief>
<description>$TC_CARR65[n]
Fine offset of offset ($TC_CARR25) of 2nd rotary axis in degrees
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR_KIN_TOOL_START</name>
<brief>Start element of the TOOL chain for parameterization from kinematic chains</brief>
<description>$TC_CARR_KIN_TOOL_START[n]
If this system variable is empty, the transfer of data from a machine model defined by kinematic chains to the tool carrier takes into account the entire chain from the root element to the end of the chain defined by $TC_CARR_KIN_TOOL_END. If the variable contains a name, the chain taken into account starts with the starting point of the named element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR_KIN_TOOL_END</name>
<brief>End element of the tool chain for parameterization from kinematic chains</brief>
<description>$TC_CARR_KIN_TOOL_START[n]
Contains the name of the last element of the kinematic chain used to parameterize the tool chain of a tool carrier.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR_KIN_PART_START</name>
<brief>Start element of the PART chain for parameterization from kinematic chains</brief>
<description>$TC_CARR_KIN_PART_START[n]
If this system variable is empty, the transfer of data from a machine model defined by kinematic chains to the tool carrier takes into account the entire chain from the root element to the end of the chain defined by $TC_CARR_KIN_PART_END. If the variable contains a name, the chain taken into account starts with the starting point of the named element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_CARR_KIN_PART_END</name>
<brief>End element of the part chain for parameterization from kinematic chains</brief>
<description>$TC_CARR_KIN_TOOL_START[n]
Contains the name of the last element of the kinematic chain used to parameterize the part chain of a tool carrier.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_CARR_KIN_CNTRL</name>
<brief>Controls the transfer of geometry data from kinematic chain elements.</brief>
<description>$TC_CARR_KIN_CNTRL[n]
This system data controls the transfer of geometry data from a machine model defined by kinematic chains to parameterize a tool carrier.
Currently, only bit 0 is assigned All other bits are reserved.
Bit 0 :
If this bit is set, the following geometry data - as far as they are required - are read from kinematic chain elements. The content of the corresponding tool carrier data from ($TC_CARRxx) is then ignored.
Offset vector l1          ($TC_CARR1  - $TC_CARR3)
Offset vector l2          ($TC_CARR4  - $TC_CARR6)
Rotary axis direction v1  ($TC_CARR7  - $TC_CARR9)
Rotary axis direction v2  ($TC_CARR10 - $TC_CARR12)
Offset vector l3          ($TC_CARR15 - $TC_CARR17)
Offset vector l4          ($TC_CARR18 - $TC_CARR20)
Rotary axis offsets       ($TC_CARR24 - $TC_CARR25)
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$TC_CARR_CORR_ELEM</name>
<brief>Name of the offset vector l[m] of a tool carrier.</brief>
<description>Name of the offset vector l[m] of the tool carrier[n]. A maximum of 4 offset vectors (l1 to l4) are defined for a tool carrier. The first index designates the index of the tool carrier, the second index the index of the offset vector (1...4).
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_DP1</name>
<brief>-</brief>
<description>$TC_DP1[t,d]
Tool type

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP1[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP2</name>
<brief>-</brief>
<description>$TC_DP2[t,d]
Tool point direction

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP2[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP3</name>
<brief>-</brief>
<description>$TC_DP3[t,d]
Geometry - length 1

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP3[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP4</name>
<brief>-</brief>
<description>$TC_DP4[t,d]
Geometry - length 2

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP4[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP5</name>
<brief>-</brief>
<description>$TC_DP5[t,d]
Geometry - length 3

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP5[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP6</name>
<brief>-</brief>
<description>$TC_DP6[t,d]
Geometry - radius

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP6[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP7</name>
<brief>-</brief>
<description>$TC_DP7[t,d]
Slotting saw: Corner radius

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP7[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP8</name>
<brief>-</brief>
<description>$TC_DP8[t,d]
Slotting saw: Length

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP8[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP9</name>
<brief>-</brief>
<description>$TC_DP9[t,d]
Reserved

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP9[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP10</name>
<brief>-</brief>
<description>$TC_DP10[t,d]
Angle between tool face and toroidal surface

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP10[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP11</name>
<brief>-</brief>
<description>$TC_DP11[t,d]
Angle between tool longitudinal axis and upper end of toroidal surface

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP11[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP12</name>
<brief>-</brief>
<description>$TC_DP12[t,d]
Wear - length 1 - $TC_DP3

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP12[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP13</name>
<brief>-</brief>
<description>$TC_DP13[t,d]
Wear - length 2 - $TC_DP4

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP13[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP14</name>
<brief>-</brief>
<description>$TC_DP14[t,d]
Wear - length 3 - $TC_DP5

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP14[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP15</name>
<brief>-</brief>
<description>$TC_DP15[t,d]
Wear - radius - $TC_DP6

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP15[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP16</name>
<brief>-</brief>
<description>$TC_DP16[t,d]
Slotting saw: Wear - corner radius - $TC_DP7

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP16[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP17</name>
<brief>-</brief>
<description>$TC_DP17[t,d]
Slotting saw: Wear length - $TC_DP8

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP17[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP18</name>
<brief>-</brief>
<description>$TC_DP18[t,d]
Wear - reserved - $TC_DP9

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP18[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP19</name>
<brief>-</brief>
<description>$TC_DP19[t,d]
Wear - angle between tool face and toroidal surface - $TC_DP10

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP19[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP20</name>
<brief>-</brief>
<description>$TC_DP20[t,d]
Wear - angle between tool longitudinal axis and upper end of toroidal surface - $TC_DP11

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP20[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP21</name>
<brief>-</brief>
<description>$TC_DP21[t,d]
Basis - length 1

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP21[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP22</name>
<brief>-</brief>
<description>$TC_DP22[t,d]
Basis - length 2

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP22[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP23</name>
<brief>-</brief>
<description>$TC_DP23[t,d]
Basis - length 3

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP23[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP24</name>
<brief>-</brief>
<description>$TC_DP24[t,d]
Clearance angle

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP24[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DP25</name>
<brief>-</brief>
<description>$TC_DP25[t,d]
Reserved

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DP25[d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_DPCE</name>
<brief>-</brief>
<description>$TC_DPCE[t,d] = 'cutting edge number' of compensation data block t,d

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCE[d]

CE stands for &lt;C&gt;utting&lt;E&gt;dge

Value range of legal 'cutting edge numbers':
1 up to value of machine data $MN_MM_MAX_CUTTING_EDGE_PERTOOL.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_DPH</name>
<brief>-</brief>
<description>$TC_DPH[t,d]  = 'H cutting edge number' of compensation data block t,d for Fanuc0 M

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPH[d]
An alarm is issued if this variable is used with the function "ISO2.1 mode" or "ISO3.1 mode" inactive.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_DPV</name>
<brief>-</brief>
<description>$TC_DPV[t,d] = tool cutting edge orientation

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPV[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPV3</name>
<brief>-</brief>
<description>$TC_DPV3[t,d] = L1 component of tool cutting edge orientation

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPV3[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPV4</name>
<brief>-</brief>
<description>$TC_DPV4[t,d] = L2 component of tool cutting edge orientation

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPV4[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPV5</name>
<brief>-</brief>
<description>$TC_DPV5[t,d] = L3 component of tool cutting edge orientation

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPV5[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPVN3</name>
<brief>L1 component of the orientation normal</brief>
<description>$TC_DPVN3[t,d] = L1 component of the orientation normal of the tool cutting edge.

If the function 'flat D-number management' is active, the syntax is as follows:
$TC_DPVN3[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPVN4</name>
<brief>L2 component of the orientation normal</brief>
<description>$TC_DPVN4[t,d] = L2 component of the orientation normal of the tool cutting edge.

If the function 'flat D-number management' is active, the syntax is as follows:
$TC_DPVN4[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPVN5</name>
<brief>L3 component of the orientation normal</brief>
<description>$TC_DPVN5[t,d] = L3 component of the orientation normal of the tool cutting edge.

If the function 'flat D-number management' is active, the syntax is as follows:
$TC_DPVN5[d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_DPNT</name>
<brief>Number of teeth on this cutting edge</brief>
<description>$TC_DPNT[t,d]
Number of teeth in the cutting edge

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPNT[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPROT</name>
<brief>Base angle of rotation of cutting edge</brief>
<description>$TC_DPROT[t,d]
Base angle of rotation of this cutting edge

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPROT[d]
This angle describes the rotation of the cutting edge along the tool offset length L1 from a zero position of the tool holder, e.g. in the spindle.

The angle can be used for aligning the cutting edge of non-axially symmetrical tools.

Application example:
A turning tool is chucked in a spindle. The angle is then the difference between the perpendicular onto the cutting tip and the neutral position of the spindle. This parameter is relevant only for tools that are not rotationally symmetrical.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC1</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC1[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC1[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC2</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC2[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC2[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC3</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC3[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC3[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC4</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC4[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC4[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC5</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC5[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC5[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC6</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC6[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC6[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC7</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC7[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC7[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC8</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC8[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC8[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC9</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC9[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC9[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC10</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC10[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC10[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC11[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC11[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC12[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC13[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC14[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC15[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC16[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC17[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC18[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC19[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC20[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC21[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC21[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC22[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC22[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC23[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC23[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC24[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC24[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC25[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC25[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC26[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC26[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC27[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC27[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC28[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC28[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC29[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC29[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC30[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC30[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC31[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC31[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC32[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC32[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC33[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC33[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC34[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC34[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC35[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC35[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC36[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC36[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC37[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC37[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC38[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC38[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC39[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC39[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC40[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC40[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC41[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC41[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC42[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC42[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC43[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC43[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC44[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC44[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC45[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC45[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC46[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC46[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC47[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC47[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC48[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC48[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC49[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC49[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC50[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC50[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC51[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC51[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC52[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC52[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC53[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC53[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC54[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC54[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC55[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC55[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC56[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC56[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC57[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC57[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC58[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC58[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC59[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC59[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC60[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC60[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC61[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC61[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC62[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC62[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC63[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC63[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPC64[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPC64[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS1</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS1[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS1[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS2</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS2[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS2[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS3</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS3[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS3[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS4</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS4[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS4[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS5</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS5[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS5[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS6</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS6[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS6[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS7</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS7[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS7[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS8</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS8[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS8[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS9</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS9[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS9[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_DPCS10</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_DPCS10[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_DPCS10[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP13</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP13[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP13[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP14</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP14[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP14[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP15</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP15[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP15[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP16</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP16[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP16[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP17</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP17[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP17[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP18</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_SCP18[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP18[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP19</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP19[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP19[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP20</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP20[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP20[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP21</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP21[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP21[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP23</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP23[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP23[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP24</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP24[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP24[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP25</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP25[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP25[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP26</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP26[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP26[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP27</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP27[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP27[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP28</name>
<brief>-</brief>
<description>$TC_SCP28[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP28[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP29</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP29[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP29[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP30</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP30[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP30[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP31</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP31[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP31[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP33</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP33[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP33[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP34</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP34[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP34[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP35</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP35[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP35[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP36</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP36[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP36[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP37</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP37[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP37[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP38</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_SCP38[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP38[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP39</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP39[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP39[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP40</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP40[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP40[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP41</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP41[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP41[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP43</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP43[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP43[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP44</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP44[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP44[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP45</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP45[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP45[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP46</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP46[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP46[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP47</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP47[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP47[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP48</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_SCP48[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP48[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP49</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP49[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP49[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP50</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP50[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP50[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP51</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP51[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP51[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP53</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP53[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP53[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP54</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP54[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP54[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP55</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP55[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP55[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP56</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP56[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP56[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP57</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP57[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP57[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP58</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_SCP58[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP58[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP59</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP59[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP59[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP60</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP60[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP60[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP61</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP61[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP61[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP63</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_SCP63[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP63[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP64</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_SCP64[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP64[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP65</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_SCP65[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP65[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP66</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_SCP66[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP66[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP67</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_SCP67[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP67[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP68</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_SCP68[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP68[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP69</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_SCP69[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP69[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP70</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_SCP70[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP70[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_SCP71</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_SCP71[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_SCP71[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP13</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP13[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP13[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP14</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP14[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP14[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP15</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP15[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP15[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP16</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP16[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP16[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP17</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP17[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP17[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP18</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_ECP18[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP18[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP19</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP19[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP19[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP20</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP20[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP20[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP21</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP21[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP21[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP23</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP23[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP23[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP24</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP24[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP24[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP25</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP25[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP25[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP26</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP26[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP26[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP27</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP27[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP27[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP28</name>
<brief>-</brief>
<description>$TC_ECP28[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP28[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP29</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP29[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP29[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP30</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP30[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP30[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP31</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP31[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP31[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP33</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP33[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP33[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP34</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP34[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP34[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP35</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP35[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP35[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP36</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP36[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP36[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP37</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP37[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP37[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP38</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_ECP38[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP38[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP39</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP39[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP39[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP40</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP40[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP40[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP41</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP41[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP41[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP43</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP43[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP43[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP44</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP44[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP44[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP45</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP45[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP45[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP46</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP46[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP46[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP47</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP47[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP47[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP48</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_ECP48[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP48[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP49</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP49[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP49[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP50</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP50[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP50[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP51</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP51[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP51[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP53</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP53[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP53[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP54</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP54[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP54[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP55</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP55[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP55[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP56</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP56[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP56[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP57</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP57[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP57[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP58</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_ECP58[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP58[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP59</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP59[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP59[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP60</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP60[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP60[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP61</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP61[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP61[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP63</name>
<brief>-</brief>
<description>Offset for $TC_DP3: $TC_ECP63[t,d] comparable to $TC_DP12[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP63[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP64</name>
<brief>-</brief>
<description>Offset for $TC_DP4: $TC_ECP64[t,d] comparable to $TC_DP13[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP64[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP65</name>
<brief>-</brief>
<description>Offset for $TC_DP5: $TC_ECP65[t,d] comparable to $TC_DP14[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP65[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP66</name>
<brief>-</brief>
<description>Offset for $TC_DP6: $TC_ECP66[t,d] comparable to $TC_DP15[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP66[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP67</name>
<brief>-</brief>
<description>Offset for $TC_DP7: $TC_ECP67[t,d] comparable to $TC_DP16[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP67[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP68</name>
<brief>-</brief>
<description>Offset for $TC_DP8: $TC_ECP68[t,d] comparable to $TC_DP17[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP68[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP69</name>
<brief>-</brief>
<description>Offset for $TC_DP9: $TC_ECP69[t,d] comparable to $TC_DP18[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP69[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP70</name>
<brief>-</brief>
<description>Offset for $TC_DP10: $TC_ECP70[t,d] comparable to $TC_DP19[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP70[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_ECP71</name>
<brief>-</brief>
<description>Offset for $TC_DP11: $TC_ECP71[t,d] comparable to $TC_DP20[t,d]

If the function 'flat D number management' is active, the syntax is as follows:
$TC_ECP71[d]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP1</name>
<brief>-</brief>
<description>$TC_MOP1[t,d]
Prewarning limit for downtime
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP2</name>
<brief>-</brief>
<description>$TC_MOP2[t,d]
Residual tool life
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOP3</name>
<brief>-</brief>
<description>$TC_MOP3[t,d]
Prewarning limit for workpiece count
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOP4</name>
<brief>-</brief>
<description>$TC_MOP4[t,d]
Residual workpieces
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP5</name>
<brief>-</brief>
<description>$TC_MOP5[t,d]
Prewarning limit for wear
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP6</name>
<brief>-</brief>
<description>$TC_MOP6[t,d]
Residual wear
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP11</name>
<brief>-</brief>
<description>$TC_MOP11[t,d]
Specified tool life
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOP13</name>
<brief>-</brief>
<description>$TC_MOP13[t,d]
Specified workpiece count
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MOP15</name>
<brief>-</brief>
<description>$TC_MOP15[t,d]
Specified wear
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC1[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC2[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC3[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC4[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC5[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC6[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC7[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC8[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC9[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC10[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC11[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC12[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC13[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC14[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC15[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC16[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC17[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC18[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC19[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC20[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC21[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC22[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC23[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC24[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC25[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC26[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC27[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC28[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC29[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC30[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC31[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC32[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC33[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC34[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC35[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC36[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC37[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC38[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC39[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC40[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC41[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC42[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC43[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC44[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC45[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC46[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC47[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC48[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC49[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC50[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC51[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC52[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC53[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC54[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC55[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC56[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC57[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC58[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC59[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC60[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC61[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC62[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC63[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPC64[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS1[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS2[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS3[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS4[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS5[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS6[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS7[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS8[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS9[t,d]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MOPCS10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MOPCS10[t,d]
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_TP2</name>
<brief>-</brief>
<description>$TC_TP2[t]
Tool identifier
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP1</name>
<brief>-</brief>
<description>$TC_TP1[t]
Duplo number
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP3</name>
<brief>-</brief>
<description>$TC_TP3[t]
Size on left
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP4</name>
<brief>-</brief>
<description>$TC_TP4[t]
Size on right
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP5</name>
<brief>-</brief>
<description>$TC_TP5[t]
Size at top
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP6</name>
<brief>-</brief>
<description>$TC_TP6[t]
Size at bottom
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP7</name>
<brief>-</brief>
<description>$TC_TP7[t]
Magazine location type
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP8</name>
<brief>-</brief>
<description>$TC_TP8[t]
Status
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP9</name>
<brief>-</brief>
<description>$TC_TP9[t]
Type of tool monitoring
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP11</name>
<brief>Sub-group for $P_USEKT</brief>
<description>$TC_TP11[t]
Specification of the sub-group to which the tool belongs. (See $P_USEKT) The data is bit-coded.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TP10</name>
<brief>Order of the replacement tools for tool search</brief>
<description>$TC_TP10[t]
Selection order of replacement tools if this is set with $TC_MAMP2, bit 3
Replacement tool is selected with ascending values. The uniqueness is not checked.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_TP_PROTA</name>
<brief>Name for the protection zone</brief>
<description>$TC_TP_PROTA[t]
Name of the 3-dimensional protection area for the Multitool, or the name of the file that contains the description of the protection area for
the Multitool. A new name can only be written if the collision avoidance or 3D protection area function is activated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TP_MAX_VELO</name>
<brief>Maximum speed of the tool</brief>
<description>$TC_TP_MAX_VELO[t]
Maximum speed of the tool when the value is &gt;0. There is no monitoring if a speed limit has not been defined (=0).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TP_MAX_ACC</name>
<brief>Maximum acceleration of the tool</brief>
<description>$TC_TP_MAX_ACC[t]
Maximum acceleration of the tool when the value is &gt;0. There is no monitoring if an acceleration limit has not been defined  (=0).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC1</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC1[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC2</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC2[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC3</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC3[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC4</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC4[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC5</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC5[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC6</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC6[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC7</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC7[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC8</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC8[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC9</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC9[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC10</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC10[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC11[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC12[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC13[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC14[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC15[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC16[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC17[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC18[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC19[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC20[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC21[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC22[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC23[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC24[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC25[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC26[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC27[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC28[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC29[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC30[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC31[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC32[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC33[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC34[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC35[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC36[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC37[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC38[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC39[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC40[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC41[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC42[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC43[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC44[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC45[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC46[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC47[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC48[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC49[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC50[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC51[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC52[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC53[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC54[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC55[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC56[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC57[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC58[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC59[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC60[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC61[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC62[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC63[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPC64[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS1</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS1[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS2</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS2[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS3</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS3[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS4</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS4[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS5</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS5[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS6</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS6[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS7</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS7[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS8</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS8[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS9</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS9[t]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPCS10</name>
<brief>-</brief>
<description>The type can be specified by machine data. DOUBLE is the default setting
$TC_TPCS10[t]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TPG1</name>
<brief>-</brief>
<description>$TC_TPG1[t]
Spindle number
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TPG2</name>
<brief>-</brief>
<description>$TC_TPG2[t]
Chaining rule
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG3</name>
<brief>-</brief>
<description>$TC_TPG3[t]
Minimum grinding wheel  radius
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG4</name>
<brief>-</brief>
<description>$TC_TPG4[t]
Minimum grinding wheel  width
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG5</name>
<brief>-</brief>
<description>$TC_TPG5[t]
Current grinding wheel  width
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG6</name>
<brief>-</brief>
<description>$TC_TPG6[t]
Maximum speed
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG7</name>
<brief>-</brief>
<description>$TC_TPG7[t]
Max. peripheral speed
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_TPG8</name>
<brief>-</brief>
<description>$TC_TPG8[t]
Angle of inclined grinding wheel
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_TPG9</name>
<brief>-</brief>
<description>$TC_TPG9[t]
Parameter no. f. radius   calculation
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_TPG_DRSPROG</name>
<brief>Parameters for file name</brief>
<description>$TC_TPG_DRSPROG[t]
Parameters for file name
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_TPG_DRSPATH</name>
<brief>Parameters for path</brief>
<description>$TC_TPG_DRSPATH[t]
Parameters for path
</description>
</parameter>

<parameter type="BOOL" dim="2">
<name>$TC_MPP3</name>
<brief>-</brief>
<description>$TC_MPP3[n,m]
Consider adjacent location On/Off
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP1</name>
<brief>-</brief>
<description>$TC_MPP1[n,m]
Location type
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP2</name>
<brief>-</brief>
<description>$TC_MPP2[n,m]
Location type
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP6</name>
<brief>-</brief>
<description>$TC_MPP6[n,m]
T no. of tool in this location
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP4</name>
<brief>-</brief>
<description>$TC_MPP4[n,m]
Location state
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP5</name>
<brief>-</brief>
<description>$TC_MPP5[n,m]
Buffer magazine:  Location type index
Real magazines:         Wear group number
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP7</name>
<brief>-</brief>
<description>$TC_MPP7[n,m]
Adapter number of tool adapter in this location
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP66</name>
<brief>-</brief>
<description>$TC_MPP66[n,m]
T no. of tool stored in buffer
for which the location defined by n,m is reserved.
A write operation is meaningful only when a backup file is loaded to the NCK.
The name assignment is based on $TC_MPP6 - T no. of tool stored in the magazine location.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPP_SP</name>
<brief>Spindle number assigned to the tool holder</brief>
<description>$TC_MPP_SP[n,m]
Only of significance if
- Working with tool holders ($MC_TOOLHOLDER_MANAGEMENT &gt; 0)
- The magazine location "m" belongs to a buffer magazine "n"
- The magazine location describes a tool holder ($TC_MPP1[n,m]=2)
In this case, the system variable contains the spindle number whose speed is to be monitored for the maximum tool speed.
When not working with tool holders ($MC_TOOLHOLDER_MANAGEMENT = 0), the variable contains the value of the spindle index from
$TC_MPP5.
This variable contains the value =0 if the magazine location "n,m" is not a buffer magazine location for a spindle or tool holder.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC1[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC2[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC3[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC4[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC5[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC6[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC7[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC8[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC9[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC10[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC11[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC12[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC13[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC14[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC15[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC16[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC17[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC18[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC19[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC20[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC21[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC22[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC23[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC24[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC25[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC26[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC27[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC28[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC29[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC30[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC31[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC32[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC33[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC34[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC35[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC36[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC37[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC38[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC39[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC40[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC41[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC42[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC43[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC44[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC45[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC46[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC47[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC48[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC49[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC50[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC51[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC52[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC53[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC54[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC55[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC56[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC57[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC58[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC59[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC60[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC61[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC62[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC63[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPC64[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS1[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS2[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS3[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS4[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS5[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS6[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS7[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS8[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS9[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPPCS10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MPPCS10[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MDP1</name>
<brief>internal mag. 1 distance parameter</brief>
<description>$TC_MDP1[n,m]
Distance to tool change point betw. magazine n and location m of 1st internal magazine
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MDP2</name>
<brief>internal mag. 2 distance parameter</brief>
<description>$TC_MDP2[n,m]
Distance to tool change point betw. magazine n and location m of 2nd internal magazine
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MLSR</name>
<brief>-</brief>
<description>$TC_MLSR[n,m]=0
Assignment of buffer location n to buffer location m
  m must identify a location of type 'Spindle'.
  n must identify a location which is not a 'Spindle' type location.
In this way it is possible, for example, to define which grippers, spindles, etc. are assigned. The default parameter setting is 0. The write operation defines a relationship, the read operation checks whether a particular relationship exists. If it does not exist, the read operation generates an alarm.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MPTH</name>
<brief>Magazine location type hierarchy</brief>
<description>$TC_MPTH[n,m]
Magazine location type hierarchy
The location types can be brought into a hierarchy by programming these system variables.
n: Index of the hierarchy, from 0... $MN_MM_MAX_NUM_OF_HIERARCHIES-1
m: Index within the hierarchy n, from 0... $MN_MM_MAX_HIERARCHY_ENTRIES-1
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_MAP2</name>
<brief>Identifier of magazine</brief>
<description>$TC_MAP2[n]
Identifier of magazine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP1</name>
<brief>Type of magazine</brief>
<description>$TC_MAP1[n]
Type of magazine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP3</name>
<brief>Status of magazine</brief>
<description>$TC_MAP3[n]
Status of magazine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP4</name>
<brief>Chaining to next magazine</brief>
<description>$TC_MAP4[n]
Chaining to next magazine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP5</name>
<brief>Chaining to previous magazine</brief>
<description>$TC_MAP5[n]
Chaining to previous magazine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP6</name>
<brief>Number of lines</brief>
<description>$TC_MAP6[n]
Number of lines
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP7</name>
<brief>Number of columns</brief>
<description>$TC_MAP7[n]
Number of columns
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP8</name>
<brief>Current magazine position</brief>
<description>$TC_MAP8[n]
Current magazine position in relation to tool change position
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP9</name>
<brief>Current wear group number</brief>
<description>$TC_MAP9[n]
Current wear group number
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAP10</name>
<brief>Current search strategies of the magazine.</brief>
<description>$TC_MAP10[n
Current search strategies of the magazine
- Tool search strategy
- Empty location search strategy (bits 14, 15 and 16 cannot be changed and are hidden.)
The NCK enters the value from $TC_MAMP2 as default. In particular the globally effective bits 14, 15 and 16 are entered via $TC_MAMP2.

A set bit has the following meaning:

Tool search:
Bit0=0: (Default strategy) Take the first available tool found in the tool group. Search first in the magazine from which the last change was made.
Bit0=1: Select the "active" tool in the magazine of the previously changed tool, otherwise find the replacement tool with the lowest duplo number. If no tool is found in this magazine, the search is continued in the other linked magazines.
Bit1: Find the next replacement tool that is closest to the current magazine position.
Bit2: Select the "active" tool, otherwise the replacement tool with the lowest number contained in $TC_TP10.
Bit3: Find the tool in the group with the lowest actual value of the monitored size.
Bit4: Find the tool in the group with the highest actual value of the monitored size.
Bit5: Reserved
Bit6: Search first in the currently considered magazine (effective only in conjunction with bit 7=1).
Bit7=0: Start the tool search in the magazine from which the last changed tool came.
Bit7=1: Always start the search in the 1st magazine in the distance table.

Note:
Bit7=1 + bit0=1 or bit2=1, if no "active tool" is found in the magazine, then - if present - the active tool is selected from one of the other magazines linked to the tool holder

Empty location search:
Bit8: Search forwards. Search in ascending order from location no. 1.
Bit9: Search forwards. Search in ascending order from the current location at the change position.
Bit10: Search backwards. Search backwards from the last location no.
Bit11: Search backwards. Search backwards from the current location at the change position.
Bit12: Symmetrical search. The search starts at the current location no. at the change position (1st location left, 1st location right, 2nd location left, 2nd location right. and so on).
Bit13: 1:1 exchange (only with tool change of significance): If the old and new tools have the same location type and size, the magazine location of the "new" tool to be loaded is transferred to the "old" tool to be unloaded and vice versa. The 1:1 exchange is checked first. If the 1:1 exchange is not possible, the other settings become effective for the search strategy.
Bit14=0: Search first in the individual magazines. If no possible location is found, search for a free location for the tool in the next magazine.
Bit14=1: Search in all magazines for the best location for the tool corresponding to the hierarchy.
Bit15=0: (Conventional type of hierarchy): With this type, the location type of the sought tool is sought in the table of system variables $TC_MPTH. If the location type is found, this hierarchy is accepted, and evaluated from this level to the end.
Bit15=1: (Alternative type of hierarchy: Location type hierarchies can be defined for the selected location types 1, ..., $MN_MM_MAX_NUM_OF_HIERARCHIES. The hierarchy for location type 1 is defined by $TC_MPTH[0,n], that for location type 2 by $TC_MPTH[1,n], and so on. (n: index within a hierarchy). With this setting, one location type can be defined in different hierarchies.
Bit16: The hierarchy analysis is canceled for the mini hierarchy that consists merely of the location type itself and location type 0. In this case, the empty location search does not distinguish between the suitable location type ( $TC_TP7 == $TC_MPP2) and the general location type "0" of the magazine location.$TC_MAP10[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC1[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC2[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC3[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC4[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC5[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC6[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC7[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC8[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC9[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC10[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC11[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC12[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC13[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC14[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC15[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC16[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC17[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC18[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC19[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC20[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC21[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC22[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC23[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC24[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC25[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC26[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC27[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC28[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC29[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC30[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC31[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC32[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC33[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC34[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC35[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC36[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC37[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC38[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC39[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC40[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC41[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC42[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC43[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC44[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC45[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC46[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC47[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC48[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC49[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC50[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC51[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC52[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC53[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC54[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC55[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC56[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC57[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC58[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC59[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC60[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC61[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC62[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC63[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPC64[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS1</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS1[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS2</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS2[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS3</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS3[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS4</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS4[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS5</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS5[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS6</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS6[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS7</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS7[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS8</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS8[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS9</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS9[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MAPCS10</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MAPCS10[n]
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$TC_MAMP1</name>
<brief>-</brief>
<description>$TC_MAMP1
Identifier of magazine block
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$TC_MAMP2</name>
<brief>Type of search strategy (tool search and empty location search)</brief>
<description>$TC_MAMP2
Type of tool search (bit0..7) and type of empty location search (bit8..16)

Tool search:
Bit0=0: (Default strategy) Take the first available tool found in the tool group. Search first in the magazine from which the last change was made.
Bit0=1: Select the "active" tool in the magazine of the previously changed tool, otherwise find the replacement tool with the lowest duplo number. If no tool is found in this magazine, the search is continued in the other linked magazines.
Bit1: Find the next replacement tool that is closest to the current magazine position.
Bit2: Select the "active" tool, otherwise the replacement tool with the lowest number contained in $TC_TP10.
Bit3: Find the tool in the group with the lowest actual value of the monitored size.
Bit4: Find the tool in the group with the highest actual value of the monitored size.
Bit5: Reserved
Bit6: Search first in the currently considered magazine (effective only in conjunction with bit 7=1).
Bit7=0: Start the tool search in the magazine from which the last changed tool came.
Bit7=1: Always start the search in the 1st magazine in the distance table.

Note:
Bit7=1 + bit0=1 or bit2=1, if no "active tool" is found in the magazine, then - if present - the active tool is selected from one of the other magazines linked to the tool holder

Empty location search:
Bit8: Search forwards. Search in ascending order from location no. 1.
Bit9: Search forwards. Search in ascending order from the current location at the change position.
Bit10: Search backwards. Search backwards from the last location no.
Bit11: Search backwards. Search backwards from the current location at the change position.
Bit12: Symmetrical search. The search starts at the current location no. at the change position (1st location left, 1st location right, 2nd location left, 2nd location right. and so on).
Bit13: 1:1 exchange (only with tool change of significance): If the old and new tools have the same location type and size, the magazine location of the "new" tool to be loaded is transferred to the "old" tool to be unloaded and vice versa. The 1:1 exchange is checked first. If the 1:1 exchange is not possible, the other settings become effective for the search strategy.
Bit14=0: Search first in the individual magazines. If no possible location is found, search for a free location for the tool in the next magazine.
Bit14=1: Search in all magazines for the best location for the tool corresponding to the hierarchy.
Bit15=0: (Conventional type of hierarchy): With this type, the location type of the sought tool is sought in the table of system variables $TC_MPTH. If the location type is found, this hierarchy is accepted, and evaluated from this level to the end.
Bit15=1: (Alternative type of hierarchy: Location type hierarchies can be defined for the selected location types 1, ..., $MN_MM_MAX_NUM_OF_HIERARCHIES. The hierarchy for location type 1 is defined by $TC_MPTH[0,n], that for location type 2 by $TC_MPTH[1,n], and so on. (n: index within a hierarchy). With this setting, one location type can be defined in different hierarchies.
Bit16: The hierarchy analysis is canceled for the mini hierarchy that consists merely of the location type itself and location type 0. In this case, the empty location search does not distinguish between the suitable location type ( $TC_TP7 == $TC_MPP2) and the general location type "0" of the magazine location.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$TC_MAMP3</name>
<brief>-</brief>
<description>$TC_MAMP3
Handling of tools in wear groups
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_ADPTT</name>
<brief>-</brief>
<description>$TC_ADPTT[a]
Adapter transformation number
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ADPT1</name>
<brief>-</brief>
<description>$TC_ADPT1[a]
Adapter geometry: Length 1
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ADPT2</name>
<brief>-</brief>
<description>$TC_ADPT2[a]
Adapter geometry: Length 2
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ADPT3</name>
<brief>-</brief>
<description>$TC_ADPT3[a]
Adapter geometry: Length 3
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPN</name>
<brief>-</brief>
<description>$TC_MTPN[n]
Number loc.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_MTP2</name>
<brief>-</brief>
<description>$TC_MAP2[n]
Identifier of Multitool
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP3</name>
<brief>-</brief>
<description>$TC_MTP3[n]
Size to the left
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP4</name>
<brief>-</brief>
<description>$TC_MTP4[n]
Size to the right
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP5</name>
<brief>-</brief>
<description>$TC_MTP5[n]
Upward size
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP6</name>
<brief>-</brief>
<description>$TC_MTP6[n]
Downward size
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP7</name>
<brief>-</brief>
<description>$TC_MTP7[n]
Multitool location type
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP8</name>
<brief>-</brief>
<description>$TC_MTP8[n]
State
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP_POS</name>
<brief>-</brief>
<description>$TC_MTP_POS[n]
Position
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTP_KD</name>
<brief>Type of distance coding</brief>
<description>$TC_MTP_KD[n]
Type of distance coding
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$TC_MTP_PROTA</name>
<brief>Name for the protection zone</brief>
<description>$TC_MTP_PROTA[n]
Name of the 3-dimensional protection area for the Multitool, or the name of the file that contains the description of the protection area for the Multitool. A new name can only be written if the collision avoidance or 3D protection area function is activated.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC1</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC1[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC2</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC2[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC3</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC3[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC4</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC4[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC5</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC5[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC6</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC6[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC7</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC7[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC8</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC8[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC9</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC9[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC10</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPC10[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC11[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC12[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC13[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC14[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC15[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC16[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC17[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC18[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC19[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC20[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC21[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC22[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC23[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC24[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC25[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC26[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC27[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC28[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC29[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC30[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC31[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC32[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC33[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC34[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC35[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC36[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC37[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC38[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC39[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC40[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC41[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC42[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC43[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC44[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC45[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC46[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC47[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC48[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC49[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC50[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC51[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC52[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC53[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC54[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC55[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC56[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC57[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC58[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC59[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC60[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC61[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC62[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC63[n]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_MTPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is  the  default setting
$TC_MTPC64[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS1</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS1[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS2</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS2[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS3</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS3[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS4</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS4[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS5</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS5[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS6</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS6[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS7</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS7[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS8</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS8[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS9</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS9[n]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_MTPCS10</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPCS10[n]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPP2</name>
<brief>-</brief>
<description>$TC_MTPP2[n,m]
Multitool location type
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPP4</name>
<brief>-</brief>
<description>$TC_MTPP4[n,m]
Multitool location state
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPP6</name>
<brief>-</brief>
<description>$TC_MTPP6[n,m]
T No. of the tool on this Multitool location
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPP7</name>
<brief>-</brief>
<description>$TC_MTPP7[n,m]
Adapter number of the tool adapter on this Multitool location
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPL</name>
<brief>-</brief>
<description>$TC_MTPPL[n,m]
Distance from reference location, length
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPA</name>
<brief>-</brief>
<description>$TC_MTPPA[n,m]
Distance from reference location, angle
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC1</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC1[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC2</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC2[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC3</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC3[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC4</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC4[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC5</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC5[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC6</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC6[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC7</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC7[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC8</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC8[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC9</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC9[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC10</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPC10[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC11</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC11[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC12</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC12[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC13</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC13[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC14</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC14[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC15</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC15[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC16</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC16[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC17</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC17[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC18</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC18[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC19</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC19[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC20</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC20[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC21</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC21[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC22</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC22[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC23</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC23[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC24</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC24[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC25</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC25[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC26</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC26[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC27</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC27[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC28</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC28[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC29</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC29[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC30</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC30[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC31</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC31[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC32</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC32[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC33</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC33[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC34</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC34[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC35</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC35[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC36</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC36[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC37</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC37[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC38</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC38[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC39</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC39[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC40</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC40[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC41</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC41[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC42</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC42[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC43</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC43[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC44</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC44[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC45</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC45[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC46</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC46[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC47</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC47[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC48</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC48[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC49</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC49[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC50</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC50[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC51</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC51[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC52</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC52[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC53</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC53[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC54</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC54[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC55</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC55[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC56</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC56[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC57</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC57[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC58</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC58[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC59</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC59[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC60</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC60[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC61</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC61[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC62</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC62[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC63</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC63[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$TC_MTPPC64</name>
<brief>-</brief>
<description>The type can be specified by machine data. INT is the default setting
$TC_MTPPC64[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS1</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS1[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS2</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS2[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS3</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS3[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS4</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS4[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS5</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS5[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS6</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS6[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS7</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS7[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS8</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS8[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS9</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS9[n,m]
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$TC_MTPPCS10</name>
<brief>-</brief>
<description>The type can be specified by the machine data. Default setting is INT
$TC_MTPPCS10[n,m]
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_ENC_COMP</name>
<brief>EEC table: Compensation value</brief>
<description>$AA_ENC_COMP[n,m,a]
Compensation values
a: Machine axes
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_ENC_COMP_STEP</name>
<brief>EEC table: Distance between interpolation points</brief>
<description>$AA_ENC_COMP_STEP[n,a]
Increment
a: Machine axes
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_ENC_COMP_MIN</name>
<brief>EEC table: Starting position</brief>
<description>$AA_ENC_COMP_MIN[n,a]
Start position of compensation
a: Machine axes
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_ENC_COMP_MAX</name>
<brief>EEC table: End position</brief>
<description>$AA_ENC_COMP_MAX[n,a]
End position of compensation
a: Machine axes
</description>
</parameter>

<parameter type="BOOL" dim="2">
<name>$AA_ENC_COMP_IS_MODULO</name>
<brief>EEC table: Modulo functionality</brief>
<description>$AA_ENC_COMP_IS_MODULO[n,a]
Compensation is modulo
a: Machine axes
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AN_CEC</name>
<brief>CEC table: Compensation value</brief>
<description>$AN_CEC[n,m]
Compensation value
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_CEC_INPUT_NCU</name>
<brief>CEC table: Basic  axis on NCU</brief>
<description>$AN_CEC_INPUT_NCU[n]:
NCU on which the basic axis is calculated
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$AN_CEC_INPUT_AXIS</name>
<brief>CEC table: Basic axis</brief>
<description>$AN_CEC_INPUT_AXIS[n]:
Name of axis whose setpoint is used as the compensation table input
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_CEC_OUTPUT_NCU</name>
<brief>CEC table: Compensation axis on NCU</brief>
<description>$AN_CEC_OUTPUT_NCU[n]:
NCU on which the compensation axis is calculated
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>$AN_CEC_OUTPUT_AXIS</name>
<brief>CEC table: Compensation axis</brief>
<description>$AN_CEC_OUTPUT_AXIS[n]:
Name of axis to which the output of the compensation table is applied
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AN_CEC_STEP</name>
<brief>CEC table: Distance between interpolation points</brief>
<description>$AN_CEC_STEP[n]
Distance of offset values
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AN_CEC_MIN</name>
<brief>CEC table: Starting position</brief>
<description>AN_CEC_MIN[n]
Start position of compensation table
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AN_CEC_MAX</name>
<brief>CEC table: End position</brief>
<description>AN_CEC_MAX[n]
End position of compensation table
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_CEC_DIRECTION</name>
<brief>CEC table: Direction-dependence</brief>
<description>$AN_CEC_DIRECTION[n]
Activates direction-dependent action of compensation table
0: both traversing directions of the basic axis
1: positive traversing direction of the basic axis
-1: negative traversing direction of the basic axis
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_CEC_MULT_BY_TABLE</name>
<brief>CEC table: Multiplication</brief>
<description>$AN_CEC_MULT_BY_TABLE[n]
Number of table whose output value is to be multiplied by the output value of the compensation table
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AN_CEC_IS_MODULO</name>
<brief>CEC table: Modulo functionality</brief>
<description>$AN_CEC_IS_MODULO[n]
TRUE: Cyclical repetition of compensation table
FALSE: No cyclical repetition of compensation table
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_CEC_TYPE</name>
<brief>CEC table: table type</brief>
<description>$AN_CEC_TYPE[n]
0: no special table type
1: table, cylinder error compensation type
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$SN_PA_ACTIV_IMMED</name>
<brief>Protection zone immediately active</brief>
<description>$SN_PA_ACTIV_IMMED[n]
n: Number of the protection area
Protection area immediately active after boot
TRUE: The protection area is activated immediately after the control has booted and the axes have been referenced
FALSE: The protection area is not immediately active

Note: This variable can only be written as a system variable and is not affected by the NC commands between NPROTDEF(..) and EXECUTE(n).
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$SN_PA_T_W</name>
<brief>Protection zone specific to workpiece/tool</brief>
<description>$SN_PA_T_W[n]
n: Number of the protection area
Protection area specific to workpiece/tool
0: Workpiece-specific protection area
3: Tool-specific protection area
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SN_PA_ORI</name>
<brief>Orientation of protection zone</brief>
<description>$SN_PA_ORI[n]
n: Number of the protection area
Orientation of protection area
0: Polygon curve in the plane formed by the 1st and 2nd geo axes (G17)
1: Polygon curve in the plane formed by the 3rd and 1st geo axes (G18)
2: Polygon curve in the plane formed by the 2nd and 3rd geo axes (G19)
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SN_PA_LIM_3DIM</name>
<brief>Scope of application-limiting protection zone</brief>
<description>$SN_PA_LIM_3DIM[n]
n: Number of the protection area
Identifier for limitation of protection area in the axis perpendicular to the polygon curve
0: No limitation
1: Limitation in the positive direction
2: Limitation in the negative direction
3: Limitation in both directions
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$SN_PA_PLUS_LIM</name>
<brief>Limitation of protection zone applicate plus</brief>
<description>$SN_PA_PLUS_LIM[n]
n: Number of the protection area
Positive limitation of protection areas in the axis perpendicular to the polygon curve
Effective only if $SN_PA_LIM_3DIM[n]=1 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$SN_PA_MINUS_LIM</name>
<brief>Limitation of protection zone applicate minus</brief>
<description>$SN_PA_MINUS_LIM[n]
n: Number of the protection area
Negative limitation of protection area in minus direction in the axis perpendicular to the polygon curve
Effective only if $SN_PA_LIM_3DIM[n]=2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$SN_PA_CONT_NUM</name>
<brief>Number of valid contour elements</brief>
<description>$SN_PA_CONT_NUM[n]
n: Number of the protection area
Number of valid contour elements
Protection areas need at least 2 contour elements for a complete description.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$SN_PA_CONT_TYP</name>
<brief>Type of the contour element</brief>
<description>$SN_PA_CONT_TYP[n,m]
n: Number of the protection area
m: Number of the contour element
Type (G1, G2, G3) of contour element
=0: Contour not defined
=1: Straight
=2: Circle element (clockwise)
=3: Circle element (counterclockwise)
The end point is determined by $SN_PA_CONT_ORD or $SN_PA_CONT_ABS. With contour types G2 and G3, $SN_PA_CENT_ORD or $SN_PA_CENT_ABS determines the center point of the circle element.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SN_PA_CONT_ORD</name>
<brief>End point of contour element (ordinate)</brief>
<description>$SN_PA_CONT_ORD[n,m]
n: Number of the protection area
m: Number of the contour element
End point of contour element (ordinate)
See also description of $SN_PA_CONT_TYP
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SN_PA_CONT_ABS</name>
<brief>End point of contour element (abscissa)</brief>
<description>$SN_PA_CONT_ABS[n,m]
n: Number of the protection area
m: Number of the contour element
End point of contour element (abscissa)
See also description of $SN_PA_CONT_TYP
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SN_PA_CENT_ORD</name>
<brief>Center point of contour element (ordinate)</brief>
<description>$SN_PA_CENT_ORD[n,m]
n: Number of the protection area
m: Number of the contour element
Center point of contour element (ordinate)
Relevant only if $SN_PA_CONT_TYP[n,m] = 2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$SN_PA_CENT_ABS</name>
<brief>Center point of contour element (abscissa)</brief>
<description>$SN_PA_CENT_ABS[n,m]
n: Number of the protection area
m: Number of the contour element
Center point of contour element (abscissa)
Relevant only if $SN_PA_CONT_TYP[n,m] = 2 or = 3.
Note: This variable is not restored during REORG.
Note: This variable is saved during data backup.
Blocks: _N_NCK_PRO, _N_COMPLETE_PRO and _N_INITIAL_INI
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_A</name>
<brief>ISO cycle parameter for address A</brief>
<description>$C_A
Value of programmed address A in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_B</name>
<brief>ISO cycle parameter for address B</brief>
<description>$C_B
Value of programmed address B in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_C</name>
<brief>ISO cycle parameter for address C</brief>
<description>$C_C
Value of programmed address C in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_D</name>
<brief>ISO cycle parameter for address D</brief>
<description>$C_D
Value of programmed address D in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_E</name>
<brief>ISO cycle parameter for address E</brief>
<description>$C_E
Value of programmed address E in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_F</name>
<brief>ISO cycle parameter for address F</brief>
<description>$C_F
Value of programmed address F in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_G</name>
<brief>ISO cycle parameter for address G</brief>
<description>$C_G
Value of programmed address G in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_H</name>
<brief>ISO cycle parameter for address H</brief>
<description>$C_H
Value of programmed address H in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$C_I</name>
<brief>ISO cycle parameter for address I</brief>
<description>$C_I[]
Value of programmed address I in ISO2/3 mode for cycle parameterization and macro programming with G65/G66. Up to 10 entries are possible for macro programming with G65/G66 in the block with the address I. The values are located in the array in the sequence they were programmed.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$C_J</name>
<brief>ISO cycle parameter for address J</brief>
<description>$C_J[]
Value of programmed address J in ISO2/3 mode for cycle parameterization and macro programming with G65/G66. Up to 10 entries are possible for macro programming with G65/G66 in the block with the address J. The values are located in the array in the sequence they were programmed.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$C_K</name>
<brief>ISO cycle parameter for address K</brief>
<description>$C_K[]
Value of programmed address K in ISO2/3 mode for cycle parameterization and macro programming with G65/G66. Up to 10 entries are possible for macro programming with G65/G66 in the block with the address K. The values are located in the array in the sequence they were programmed.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_L</name>
<brief>ISO cycle parameter for address L</brief>
<description>$C_L
Value of programmed address L in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_M</name>
<brief>ISO cycle parameter for address M</brief>
<description>$C_M
Value of programmed address M in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_N</name>
<brief>ISO cycle parameter for address N</brief>
<description>$C_N
Value of programmed address N in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_O</name>
<brief>ISO cycle parameter for address O</brief>
<description>$C_O
Value of programmed address O in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_P</name>
<brief>ISO cycle parameter for address P</brief>
<description>$C_P
Value of programmed address P in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_Q</name>
<brief>ISO cycle parameter for address Q</brief>
<description>$C_Q
Value of programmed address Q in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_R</name>
<brief>ISO cycle parameter for address R</brief>
<description>$C_R
Value of programmed address R in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_S</name>
<brief>ISO cycle parameter for address S</brief>
<description>$C_S
Value of programmed address S in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_T</name>
<brief>Cycle parameter for address T</brief>
<description>$C_T
Value of programmed address T for cycle parameterization (ISO2/3 mode) and T function substitution (ISO2/3 and standard modes)
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_U</name>
<brief>ISO cycle parameter for address U</brief>
<description>$C_U
Value of programmed address U in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_V</name>
<brief>ISO cycle parameter for address V</brief>
<description>$C_V
Value of programmed address V in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_W</name>
<brief>ISO cycle parameter for address W</brief>
<description>$C_W
Value of programmed address W in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_X</name>
<brief>ISO cycle parameter for address X</brief>
<description>$C_X
Value of programmed address X in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_Y</name>
<brief>ISO cycle parameter for address Y</brief>
<description>$C_Y
Value of programmed address Y in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_Z</name>
<brief>ISO cycle parameter for address Z</brief>
<description>$C_Z
Value of programmed address Z in ISO2/3 mode for cycle parameterization
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_DL</name>
<brief>ISO parameter for address DL</brief>
<description>Value of programmed address DL (additive tool offset) in the case of a subprogram call by M/T function substitution
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_PI</name>
<brief>ISO cycle parameter for address P</brief>
<description>Program number of interrupt routine programmed with M96 Pxx in ISO2/3 mode
</description>
</parameter>

<parameter type="STRING" dim="0">
<name>$C_TS</name>
<brief>Tool identifier for T function substitution</brief>
<description>Returns the string of the programmed tool identifier when the T function or TCA command are replaced. Tool identifiers can only be programmed with tool management active or with tool monitoring without magazine management.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_A_PROG</name>
<brief>ISO cycle parameter for address A</brief>
<description>$C_A_PROG
Address A is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_B_PROG</name>
<brief>ISO cycle parameter for address B</brief>
<description>$C_B_PROG
Address B is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_C_PROG</name>
<brief>ISO cycle parameter for address C</brief>
<description>$C_C_PROG
Address C is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_D_PROG</name>
<brief>ISO cycle      parameter for address  D</brief>
<description>$C_D_PROG
Address D is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_E_PROG</name>
<brief>ISO cycle parameter for address E</brief>
<description>$C_E_PROG
Address E is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_F_PROG</name>
<brief>ISO cycle parameter for address F</brief>
<description>$C_F_PROG
Address F is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_G_PROG</name>
<brief>ISO cycle parameter for address G</brief>
<description>$C_G_PROG
G function for cycle call is programmed in this block
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_H_PROG</name>
<brief>ISO cycle parameter for address H</brief>
<description>$C_H_PROG
Address H is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_I_PROG</name>
<brief>ISO cycle parameter for address      I</brief>
<description>$C_I_PROG
Address I is programmed in a block with cycle macro call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_J_PROG</name>
<brief>ISO cycle parameter for address J</brief>
<description>$C_J_PROG
Address J is programmed in a block with cycle macro call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_K_PROG</name>
<brief>ISO cycle parameter for address K</brief>
<description>$C_K_PROG
Address K is programmed in a block with cycle macro call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_L_PROG</name>
<brief>ISO cycle parameter for address L</brief>
<description>$C_L_PROG
Address L is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_M_PROG</name>
<brief>ISO cycle parameter for address M</brief>
<description>$C_M_PROG
Address M is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_N_PROG</name>
<brief>ISO cycle      parameter for address  N</brief>
<description>$C_N_PROG
Address N is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely   or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_O_PROG</name>
<brief>ISO cycle parameter for address O</brief>
<description>$C_O_PROG
Address O is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_P_PROG</name>
<brief>ISO cycle parameter for address P</brief>
<description>$C_P_PROG
Address P is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_Q_PROG</name>
<brief>ISO cycle parameter for address Q</brief>
<description>$C_Q_PROG
Address Q is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_R_PROG</name>
<brief>ISO cycle parameter for address R</brief>
<description>$C_R_PROG
Address R is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_S_PROG</name>
<brief>ISO cycle      parameter for address  S</brief>
<description>$C_S_PROG
Address S is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely   or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_T_PROG</name>
<brief>ISO cycle parameter for address T</brief>
<description>$C_T_PROG
Address T is programmed in a block with cycle call or T function substitution
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_U_PROG</name>
<brief>ISO cycle parameter for address U</brief>
<description>$C_U_PROG
Address U is programmed in the current block
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_V_PROG</name>
<brief>ISO cycle parameter for address V</brief>
<description>$C_V_PROG
Address V is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_W_PROG</name>
<brief>ISO cycle parameter for address W</brief>
<description>$C_W_PROG
Address W is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_X_PROG</name>
<brief>ISO cycle      parameter for address  X</brief>
<description>$C_X_PROG
Address X is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely   or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_Y_PROG</name>
<brief>ISO cycle parameter for address Y</brief>
<description>$C_Y_PROG
Address Y is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_Z_PROG</name>
<brief>ISO cycle parameter for address Z</brief>
<description>$C_Z_PROG
Address Z is programmed in a block with cycle call
0 = Not programmed
1 = Programmed
3 = Programmed incrementally
Bit 0 is set if the address is programmed absolutely or incrementally.
Bit 1 is set in addition if the address is programmed incrementally.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_PI_PROG</name>
<brief>ISO   cycle  parameter for address  P</brief>
<description>0 = Not programmed
1 = M96 Pxx interrupt routine programmed
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_G60_PROG</name>
<brief>ISO cycle    parameters programmed     for  G60 in block</brief>
<description>0 = not programmed
1 = G60 is programmed   in  the cycle call block
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_DL_PROG</name>
<brief>ISO cycle parameter for address DL</brief>
<description>Interrogation as to whether address DL (additive tool offset) has been programmed for a subprogram call per M/T function substitution.
0 = Not programmed
1 = An additive tool offset has been programmed under address DL.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_TS_PROG</name>
<brief>Parameter for T function replacement</brief>
<description>Query whether a tool identifier was programmed when the T function or TCA command were replaced.
0 = Not programmed
1 = Programmed
Tool identifiers can only be programmed with tool management active or with tool monitoring without magazine management.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_ALL_PROG</name>
<brief>Bit  pattern specifying which addresses  are programmed</brief>
<description>$C_ALL_PROG
Bit pattern of all programmed addresses in a block with cycle call
Bit0 = Address "A" .... Bit25 = Address "Z"
Bit = 1 -&gt; Address programmed
Bit = 0 -&gt; Address not programmed
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_INC_PROG</name>
<brief>Bit pattern specifying whether addresses are programmed incr.</brief>
<description>$C_INC_PROG
Bit pattern of all incrementally programmed addresses in a block with cycle call
Bit0 = Address "A" .... Bit25 = Address "Z"
Bit = 1 -&gt; Address incrementally programmed
Bit = 0 -&gt; Address absolutely programmed
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_TYP_PROG</name>
<brief>Bit pattern specifying whether addresses are progr. as INT/REAL</brief>
<description>$C_TYP_PROG
Bit pattern of all addresses programmed with value INT or REAL
Bit0 = Address "A" .... Bit25 = Address "Z"
Bit = 1 -&gt; Address programmed with real value
Bit = 0 -&gt; Address programmed with int value
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_I_NUM</name>
<brief>Number of "I" addresses programmed in block</brief>
<description>$C_I_NUM
The number of "I" addresses programmed in the block is stored in $C_I_NUM.
This value is always 1 for cycle programming if bit 0 is set in $C_I_PROG. In the case of macro programming with G65/G66, this variable contains the number of "I" addresses programmed in the block (max. 10).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_J_NUM</name>
<brief>Number of "J" addresses programmed in block</brief>
<description>$C_J_NUM
The number of "J" addresses programmed in the block is stored in $C_J_NUM. This value is always 1 for cycle programming if bit 0 is set in $C_J_PROG.
In the case of macro programming with G65/G66, this variable contains the number of "J" addresses programmed in the block (max. 10).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_K_NUM</name>
<brief>Number of "K" addresses programmed in block</brief>
<description>$C_K_NUM
The number of "K" addresses programmed in the block is stored in $C_K_NUM. This value is always 1 for cycle programming if bit 0 is set in $C_K_PROG. In the case of macro programming with G65/G66, this variable contains the number of "K" addresses programmed in the block (max. 10).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$C_I_ORDER</name>
<brief>Group number of address I for IJK groups</brief>
<description>$C_I_ORDER[]
Number of IJK group in which I has been programmed. Up to 10 entries with address I can be made in the block for macro programming with G65/G66. This allows the sequence of IJK groups to be evaluated. The association between IJK groups is always noted.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$C_J_ORDER</name>
<brief>Group number of address J for IJK groups</brief>
<description>$C_J_ORDER[]
Number of IJK group in which J has been programmed. Up to 10 entries with address J can be made in the block for macro programming with G65/G66. This allows the sequence of IJK groups to be evaluated. The association between IJK groups is always noted.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$C_K_ORDER</name>
<brief>Group number of address K for IJK groups</brief>
<description>$C_K_ORDER[]
Number of IJK group in which K has been programmed. Up to 10 entries with address K can be made in the block for macro programming with G65/G66. This allows the sequence of IJK groups to be evaluated. The association between IJK groups is always noted.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_ME</name>
<brief>Address extension for subprogram   calls  via M function</brief>
<description>$C_ME
Address extension for address M for subprogram call per M function
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_TE</name>
<brief>Address extension for subprogram  calls  via T function</brief>
<description>$C_TE
Address extension for address T for subprogram call per M function
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$C_MACPAR</name>
<brief>Auxiliary variable for implementing # macros</brief>
<description>$MAC_PAR[n]
Macro variable in Iso2/3  mode programmed in the original program with #&lt;number&gt;
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$C_AUX_VALUE</name>
<brief>Parameter for auxiliary function replacement.</brief>
<description>Parameter for auxiliary function replacement. It contains the value of the auxiliary function that is to be replaced. Currently, only M functions can be replaced by appropriate configuration of $MN_M_NO_FCT_CYCLE.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$C_AUX_EXT</name>
<brief>Parameter for auxiliary function replacement.</brief>
<description>Parameter for auxiliary function replacement. It contains the address extension of the auxiliary function that is to be replaced. Currently, only M functions can be replaced by appropriate configuration of $MN_M_NO_FCT_CYCLE.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$C_AUX_IS_QUICK</name>
<brief>Parameter for auxiliary function replacement.</brief>
<description>Parameter for auxiliary function replacement. It contains the information whether the auxiliary function that is to be replaced is to be output with a fast (TRUE) or normal (FALSE) acknowledgment. Currently, only M functions can be replaced by appropriate configuration of $MN_M_NO_FCT_CYCLE.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$C_T_VALUE</name>
<brief>Cycle parameter for address T</brief>
<description>$C_T_VALUE
Value of the programmed, non-split address T for T function replacement and M function replacement (ISO3 mode).
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$C_TCA</name>
<brief>Parameter for replacing the TCA  command</brief>
<description>Query whether the replacement of the TCA command is active.
FALSE = TCA replacement not active
TRUE = TCA replacement active
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$C_DUPLO_PROG</name>
<brief>Parameter for replacing the TCA command</brief>
<description>Query whether a duplo number was programmed when the TCA command was replaced.
FALSE = duplo number was not programmed
TRUE = duplo number was programmed
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_DUPLO</name>
<brief>Parameter  for replacing the TCA command</brief>
<description>Returns the value of the programmed duplo number when the TCA command is replaced.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$C_THNO_PROG</name>
<brief>Parameter for replacing the TCA command</brief>
<description>Query whether a toolholder or spindle number was programmed when the TCA command was replaced.
FALSE = toolholder or spindle number was not programmed
TRUE = toolholder or spindle number was programmed
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_THNO</name>
<brief>Parameter for replacing the TCA command</brief>
<description>Returns the value of the programmed toolholder or spindle number when the TCA command is replaced.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_ISOPRINT</name>
<brief>Status ISOOPEN, ISOPRINT, ISOCLOSE</brief>
<description>Status variable for ISOOPEN, ISOPRINT, ISOCLOSE.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$C_MTL_PROG</name>
<brief>Parameter for replacing the MTL command</brief>
<description>Query whether the address MTL was also replaced when the T function was replaced.
FALSE = Address MTL was not programmed
TRUE    = Address MTL was replaced
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$C_MTL</name>
<brief>Parameter for replacing the MTL command</brief>
<description>Returns the value of the programmed location number of the multitool when the MTL command is replaced.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SETUP_TIME</name>
<brief>Time since booting with default values</brief>
<description>The $AN_SETUP_TIME timer counts the time elapsed since the control last booted with default values (in minutes). The timer is automatically reset each time the control boots with default data.

Use in NC program:
IF $AN_SETUP_TIME&gt; 60000 GOTOF MARK01
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_POWERON_TIME</name>
<brief>Time since control last booted</brief>
<description>The $AN_POWERON_TIME timer counts the time elapsed since the control last booted (in minutes). The timer is automatically reset each time the control boots.

Use in NC program:
IF $AN_POWERON_TIME == 480 GOTOF MARK02
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_NCK_VERSION</name>
<brief>NCK version</brief>
<description>NCK version: only the integer places in the floating-point number are evaluated, the decimal places can contain identifiers for intermediate versions used by the development department. The integer places contain the official software version identifier of the NCK: For example, the value for NCK version 20.00.00 is variable 200000.0
compare OPI N/Y nckVersion
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AN_IPO_LOAD_LIMIT</name>
<brief>IPO utilization limit reached</brief>
<description>Variable $AN_IPO_LOAD_LIMIT returns TRUE when the interpolator load limit is reached. Machine data $MN_IPO_MAX_LOAD is used to specify the gross interpolator operating time (in % of the interpolation cycle) at which variable $AN_IPO_LOAD_LIMIT is set to TRUE. If the value falls below the limit again, the variable is reset to FALSE.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_IPO_ACT_LOAD</name>
<brief>Current IPO runtime</brief>
<description>$AN_IPO_ACT_LOAD supplies the current interpolator runtime including the runtime of the synchronized actions in all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_IPO_MAX_LOAD</name>
<brief>Maximum IPO runtime</brief>
<description>$AN_IPO_MAX_LOAD supplies the longest interpolator runtime of one interpolation cycle (including the runtime of the synchronized actions).
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_IPO_MIN_LOAD</name>
<brief>Shortest IPO runtime</brief>
<description>$AN_IPO_MIN_LOAD supplies the shortest interpolator runtime including the  runtime of the synchronized actions per interpolation cycle in all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_IPO_LOAD_PERCENT</name>
<brief>Ratio of current IPO runtime to IPO cycle</brief>
<description>$AN_IPO_LOAD_PERCENT supplies the current interpolator load percentage across all channels. Is calculated from the  ratio  of the interpolator runtime across all channels in the last interpolation cycle to the interpolation cycle.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SYNC_ACT_LOAD</name>
<brief>Current runtime for synchronized actions</brief>
<description>$AN_SYNC_ACT_LOAD supplies the current runtime for synchronized actions of the last interpolation cycle across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SYNC_MAX_LOAD</name>
<brief>Longest runtime for synchronized actions</brief>
<description>$AN_SYNC_MAX_LOAD supplies the longest runtime for synchronized actions of one interpolation cycle across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SYNC_TO_IPO</name>
<brief>Synact / IPO computing time percentage</brief>
<description>$AN_SYNC_TO_IPO supplies the percentage proportion of the synchronized action runtime measured against the overall interpolation runtime of the last interpolation cycle across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SERVO_ACT_LOAD</name>
<brief>Current runtime of position controller</brief>
<description>$AN_SERVO_ACT_LOAD supplies the current runtime of the position controller.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SERVO_MAX_LOAD</name>
<brief>Longest runtime of position controller</brief>
<description>$AN_SERVO_MAX_LOAD supplies the longest runtime of the position controller.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_SERVO_MIN_LOAD</name>
<brief>Shortest runtime of position controller</brief>
<description>$AN_SERVO_MIN_LOAD supplies the shortest runtime of the position controller.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_REBOOT_DELAY_TIME</name>
<brief>Time until reboot</brief>
<description>A value higher than zero indicates that the NCK has received the "NCK Reset" signal from the HMI and displays the time period (in seconds) programmed on the NCK for rebooting (Power Off followed by Power ON). The user can thus identify a reboot operation in a synchronized action and prepare his application accordingly. $AN_REBOOT_DELAY_TIME is 0.0 provided that no "NCK Reset" has been received.

Example:
A synchronized action reacts to the variable and switches the axes to "Safe standstill" in a Safety Integrated application.

Comments:
- See also: $MN_REBOOT_DELAY_TIME
- The "NCK Reset" is implemented on the OPI by means of PI "_N_IBN_SS".
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AN_TIMER</name>
<brief>System variable for global NCK time measurement</brief>
<description>$AN_TIMER[n]
Timer unit in seconds
The time is counted in multiples of an interpolation cycle.
The timers are started by $AN_TIMER[n] = &lt;start value&gt;.
The timers are stopped by $AN_TIMER[n] = -1.
When a timer is stopped, the last current time value is stored.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PROBE</name>
<brief>Probe status</brief>
<description>$A_PROBE[1]: Status of first probe
$A_PROBE[2]: Status of second probe
0 =&gt; not deflected
1 =&gt; deflected
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AN_PERSDIAG</name>
<brief>Diagnostics data for data persistence</brief>
<description>Diagnostics data for data persistence (frequency, time required); e.g. CompactFlash Card
The time values indicate how long it took to achieve data persistence from the viewpoint of the NC software

The following values can be read:

Index1 Meaning
0     Always sums on all subfunctions
1     Subfunction 'Passive file system'
2     Subfunction 'Active file system'
3     Subfunction 'Machine data'

Index2 Meaning
0     Number of all synchronous write operations
1     Number of failed synchronous write operations (system deficiency)
2     Summated time of all synchronous write operations in seconds
3     Minimum time required for a synchronous write operation in seconds
4     Average time (averaged across all synchronous write operations) in seconds
5     Maximum time required for a synchronous write operation in seconds
6     Number of overflows of the preprocessing PowerFail buffer since NCK start
7     Number of overflows of the tool change PowerFail buffer since NCK start
8     Number of overflows of the synchronized action PowerFail buffer since NCK start
9     Overflow of the preprocessing PowerFail buffer pending at the time of PowerFail /PowerOff
10    Overflow of the tool change PowerFail buffer pending at the time of PowerFail /PowerOff
11    Overflow of the synchronized action PowerFail buffer pending at the time of PowerFail /PowerOff
12    Number of data entries in the preprocessing PowerFail buffer since NCK start
13    Number of data entries in the tool change PowerFail buffer in IPO since NCK start
14    Number of data entries in the synchronized action PowerFail buffer in IPO since NCK start

Index2 values = 6 to 14 only defined for index1 = 2 = active file system
20    Number of all asynchronous write operations
21    Number of failed asynchronous write operations (system deficiency)
22    Summated time of all asynchronous write operations in seconds (blocking component)
23    Minimum time required for an asynchronous write operation in seconds (blocking component)
24    Average time (averaged across all asynchronous write operations) in seconds (blocking component)
25    Maximum time required for an asynchronous write operation in seconds (blocking component)
26-31 Reserved
32    Summated time of all asynchronous write operations in seconds (total runtime)
33    Minimum time required for an asynchronous write operation in seconds (total runtime)
34    Average time (averaged across all asynchronous write operations) in seconds (total runtime)
35    Maximum time required for an asynchronous write operation in seconds (total runtime)
36-39 Reserved
40    Number of data backup operations in which an asynchronous data backup operation was still active when it was called.
41    Reserved
42    Summated time that was waited after a collision for the end of the previous asynchronous data backup operation
43    Minimum time that was waited after a collision for the end of the previous asynchronous data backup operation
44    Average time that was waited after a collision for the end of the previous asynchronous data backup operation
45    Maximum time that was waited after a collision for the end of the previous asynchronous data backup operation

Writing any value to the following indices deletes the relevant statistic type:
A write access to one of the indices 0-5 resets all values of these indices to 0
A write access to one of the indices 20-29 resets all values of these indices to 0
A write access to one of the indices 30-39 resets all values of these indices to 0
A write access to one of the indices 40-49 resets all values of these indices to 0

Application in the NC program:
IF $AN_PERSDIAG[0, 1] &gt; 0 GOTOF, check card
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_VMODEL_STATUS</name>
<brief>System  variable for status of VRML    model</brief>
<description>TO DO!
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSB_IN</name>
<brief>PROFIBUS/PROFINET input byte (signed)</brief>
<description>The field variable $A_DPSB_IN[n,m] is used to read a data byte (8 bits) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPB_IN</name>
<brief>PROFIBUS/PROFINET input byte (unsigned)</brief>
<description>The field variable $A_DPB_IN[n,m] is used to read a data byte (8 bits) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is shown as unsigned.
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_DP_IN_VALID</name>
<brief>PROFIBUS/PROFINET valid input data areas</brief>
<description>The variable $A_DP_IN_VALID is used to read all valid input data areas of the PROFIBUS/PROFINET IO. The value is coded as a bit array. The assignment of the bits corresponds to the indices of the input data areas. The input data area is invalid if the input data area could not be logged on during power on or the communications with the PROFIBUS/PROFINET has been interrupted during normal operation. The status of an input data area can be queried with the variable $A_DP_IN_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DP_IN_STATE</name>
<brief>PROFIBUS/PROFINET status of input data area</brief>
<description>The variable $A_DP_IN_STATE[n] is used to read the status of the input data area.
n:= Index for the input data area
The following states can be read:
   0: Data area has not been configured
   1: Data area could not be activated yet
   2: Data area is available
   3: Data area is currently not available
Whether an input data area is available can be queried with the variable $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DP_OUT_STATE</name>
<brief>PROFIBUS/PROFINET status of output data area</brief>
<description>The variable $A_DP_OUT_STATE[n] is used to read the status of the output data area.
n:= Index for the output data area
The following states can be read:
   0: Data area has not been configured
   1: Data area could not be activated yet
   2: Data area is available
   3: Data area is currently not available
Whether a data area is available can be queried with the variable $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_DP_OUT_VALID</name>
<brief>PROFIBUS/PROFINET valid output data areas</brief>
<description>The variable $A_DP_OUT_VALID is used to read all valid output data areas of the PROFIBUS/PROFINET IO. The value is coded as a bit array. The assignment of the bits corresponds to the indices of the output data areas. The output data area is invalid if the output data area could not be logged on during power up or the communications with the PROFIBUS/PROFINET has been interrupted during normal operation. The status of an output data area can be queried with the variable $A_DP_OUT_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_DP_IN_CONF</name>
<brief>PROFIBUS/PROFINET configured input data areas</brief>
<description>The variable $A_DP_IN_CONF is used to read all configured input data areas of the PROFIBUS/PROFINET IO. The value is coded as a bit field. The assignment of the bits corresponds to the indices of the input data areas. A configured input data area is present if a logical starting address has been entered in an input data area via machine data $MN_DPIO_LOGIC_ADDRESS_IN. The status of an input data area can be queried with the variable $A_DP_IN_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_DP_OUT_CONF</name>
<brief>PROFIBUS/PROFINET configured output data areas</brief>
<description>The variable $A_DP_OUT_CONF is used to read all configured output data areas of the PROFIBUS/PROFINET IO. The value is coded as a bit field. The assignment of the bits corresponds to the indices of the output data areas. A configured data area is present if a logical starting address has been entered in an output data area via machine data $MN_DPIO_LOGIC_ADDRESS_OUT. The status of an output data area can be queried with the variable $A_DP_OUT_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DP_IN_LENGTH</name>
<brief>PROFIBUS/PROFINET length of input data area</brief>
<description>The variable $A_DP_IN_LENGTH[n] is used to read the length of the input data area.
n:= Index for the input data area
Whether an input data area is available can be queried with the variables $A_DP_IN_VALID and $A_DP_IN_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_DP_OUT_LENGTH</name>
<brief>PROFIBUS/PROFINET length of output data area</brief>
<description>The variable $A_DP_OUT_LENGTH[n] is used to read the length of the output data area.
n:= Index for the output data area
Whether an output data area is available can be queried with the variables $A_DP_OUT_VALID and       $A_DP_OUT_STATE[n].
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPW_IN</name>
<brief>PROFIBUS/PROFINET input word (unsigned)</brief>
<description>The field variable $A_DPW_IN[n,m] is used to read a data word (16 bits) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is shown as unsigned.
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$A_DPR_OUT</name>
<brief>PROFIBUS/PROFINET output data (4 bytes)</brief>
<description>The field variable $A_DPR_OUT[n,m] is used to write output data (32 bits REAL) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is compressed to 4 bytes IEEE (real).
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPB_OUT</name>
<brief>PROFIBUS/PROFINET output byte (unsigned)</brief>
<description>The field variable $A_DPB_OUT[n,m] is used to write a data byte (8 bits) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is shown as unsigned.
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPW_OUT</name>
<brief>PROFIBUS/PROFINET output word (unsigned)</brief>
<description>The field variable $A_DPW_OUT[n,m] is used to write a data word (16 bits) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is shown as unsigned.
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$A_DPR_IN</name>
<brief>PROFIBUS/PROFINET input data (4 bytes)</brief>
<description>The field variable $A_DPR_IN[n,m] is used to read input data (32 bits REAL) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is expanded to 8 bytes IEEE (double).
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0.0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSW_IN</name>
<brief>PROFIBUS/PROFINET input word (signed)</brief>
<description>The field variable $A_DPSW_IN[n,m] is used to read a data word (16 bits) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSD_IN</name>
<brief>PROFIBUS/PROFINET input data double word DBD (signed)</brief>
<description>The field variable $A_DPSD_IN[n,m] is used to read a data double word (32 bits) from PROFIBUS/PROFINET IO.
n:= Index for the input data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be read can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case, the old value or initial value 0 is always read. Whether a data area is valid can be queried with the variables $A_DP_IN_STATE[n] or $A_DP_IN_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSB_OUT</name>
<brief>PROFIBUS/PROFINET output byte (signed)</brief>
<description>The field variable $A_DPSB_IN[n,m] is used to write a data byte (8 bits) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSW_OUT</name>
<brief>PROFIBUS/PROFINET output word (signed)</brief>
<description>The field variable $A_DPSW_IN[n,m] is used to write a data word (16 bits) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$A_DPSD_OUT</name>
<brief>PROFIBUS/PROFINET output data double word (signed)</brief>
<description>The field variable $A_DPSD_OUT[n,m] is used to write a data double word (32 bits) to PROFIBUS/PROFINET IO.
n:= Index for the output data area
m:= Byte Index for the data
The value is shown as signed.
The data area to be written can become invalid during power up or even during operation as connected devices may not yet have been detected or are already no longer connected to the PROFIBUS/PROFINET. In this case the transfer of the value cannot be guaranteed. Whether a data area is valid can be queried with the variables $A_DP_OUT_STATE[n] or $A_DP_OUT_VALID.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_COLL_MEM_AVAILABLE</name>
<brief>Memory available for collision monitoring in KB</brief>
<description>Collision calculation requires internal memory. The amount required is either calculated automatically from the number of available protection areas, protection area elements, facets and the number of machine axes, or it can be explicitly defined by machine data $MN_MM_MAXNUM_3D_COLLISION. The size of the reserved memory area can be read in kbytes with the system variable $AN_COLL_MEM_AVAILABLE.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_COLL_MEM_USE_MIN</name>
<brief>Minimum memory requirement for collision monitoring</brief>
<description>Collision calculation requires internal memory. The amount required is either calculated automatically from the number of available protection areas, protection area elements, facets and the number of machine axes, or it can be explicitly defined by machine data $MN_MM_MAXNUM_3D_COLLISION. The size of the reserved memory area can be read in kbytes with the system variable $AN_COLL_MEM_AVAILABLE. The system variable $AN_COLL_MEM_USE_MIN returns the minimum memory space required for collision calculation as a percentage of the reserved memory area. It can be reset by writing it to the value 0. Each attempt to write a value other than 0 is rejected with an error message.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_COLL_MEM_USE_MAX</name>
<brief>Maximum memory requirement for collision monitoring in percent</brief>
<description>Collision calculation requires internal memory. The amount required is either calculated automatically from the number of available protection areas, protection area elements, facets and the number of machine axes, or it can be explicitly defined by machine data $MN_MM_MAXNUM_3D_COLLISION. The size of the reserved memory area can be read in kbytes with the system variable $AN_COLL_MEM_AVAILABLE. The system variable $AN_COLL_MEM_USE_MAX returns the minimum memory space required for collision calculation as a percentage of the reserved memory area. It can be reset by writing it to the value 0. Each attempt to write a value other than 0 is rejected with an error message.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_COLL_MEM_USE_ACT</name>
<brief>Current memory requirement for collision monitoring</brief>
<description>Collision calculation requires internal memory. The amount required is either calculated automatically from the number of available protection areas, protection area elements, facets and the number of machine axes, or it can be explicitly defined by machine data $MN_MM_MAXNUM_3D_COLLISION. The size of the reserved memory area can be read in kbytes with the system variable $AN_COLL_MEM_AVAILABLE. The system variable $AN_COLL_MEM_USE_ACT returns the memory space currently required for collision calculation (that is for the last calculation) as a percentage of the reserved memory area. It can be reset by writing it to the value 0. Each attempt to write a value other than 0 is rejected with an error message.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AN_COLL_STATE</name>
<brief>Activation status of a protection area for collision avoidance</brief>
<description>The system variable indicates if a protection area can currently be part of collision monitoring.

However, the following requirements must be met first:
1. The activation status of the protection area is active ("A") or the activation status is PLC-controlled ("P") and the interface bit assigned to the protection area is set.
2. The protection area group ("Machine", "TOOL" etc.) has been activated in the current operating mode via the associated interface bit.

A protection area for which this system variable gives the value TRUE only then enters real collision monitoring when it is part of at least one collision pair ($NP_COLL_PAIR). The other partner must also be an active protection area.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AN_COLL_IPO_ACTIVE</name>
<brief>Status of main run monitoring of collision avoidance</brief>
<description>The system variable indicates if the main run monitoring of the collision avoidance is active.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AN_COLL_IPO_LIMIT</name>
<brief>Speed reduced by collision monitoring in the main run</brief>
<description>The system variable indicates if the main run monitoring of the collision avoidance leads to a velocity reduction.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AN_COLL_LOAD</name>
<brief>CPU time required for collision avoidance functions in ms</brief>
<description>Gives the required calculation time in ms - required for certain operations in connection with collision avoidance. The operation is defined by index i.
i = 0: Time requirement for last call of PROTA
i = 1: Time requirement for last call of collision avoidance during preprocessing
i = 2: Time requirement for last call of the calculation of free space (real-time monitoring)
The variables can be reset by describing with value 0. Every write attempt with a value other than 0 is refused with an error message.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_ACT_LOAD</name>
<brief>Current preprocessing runtime</brief>
<description>$AN_PREP_ACT_LOAD returns the current net preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_MAX_LOAD</name>
<brief>Longest preprocessing runtime</brief>
<description>$AN_PREP_MAX_LOAD returns the longest net preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_MIN_LOAD</name>
<brief>Shortest preprocessing runtime</brief>
<description>$AN_PREP_MIN_LOAD returns the shortest net preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_ACT_LOAD_GROSS</name>
<brief>Current preprocessing runtime</brief>
<description>$AN_PREP_ACT_LOAD_GROSS returns the current gross preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_MAX_LOAD_GROSS</name>
<brief>Longest preprocessing runtime</brief>
<description>$AN_PREP_MAX_LOAD_GROSS returns the longest gross preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="DOUBLE" dim="0">
<name>$AN_PREP_MIN_LOAD_GROSS</name>
<brief>Shortest preprocessing runtime</brief>
<description>$AN_PREP_MIN_LOAD_GROSS returns the shortest gross preprocessing runtime across all channels.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_AUXFU_LIST_GROUPINDEX</name>
<brief>Global list of auxiliary functions - group index</brief>
<description>The array variable $AN_AUXFU_LIST_GROUPINDEX[n] is used to read the group index of the auxiliary function collected in the channel. The variable is only valid in conjunction with search run type 5 (SERUPRO). After the search target has been found, the auxiliary functions collected in groups in the individual channels in accordance with $AC_AUXFU_TICK[n] are entered in the cross-channel list with channel number $AN_AUXFU_LIST_CHANNO[n] and group index. The auxiliary functions collected in the channel can be accessed by the group index.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_AUXFU_LIST_CHANNO</name>
<brief>Global list of auxiliary functions - channel number</brief>
<description>The array variable $AN_AUXFU_LIST_CHANNO[n] is used to read the channel number of the auxiliary function collected in the channel. The variable is only valid in conjunction with search run type 5 (SERUPRO). After the search target has been found, the auxiliary functions collected in groups in the individual channels in accordance with $AC_AUXFU_TICK[n] are entered in the cross-channel list with channel number and group index $AN_AUXFU_LIST_GROUPINDEX[n].
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_AUXFU_LIST_ENDINDEX</name>
<brief>Last valid index of the global auxiliary function list</brief>
<description>The variable $AN_AUXFU_LIST_ENDINDEX determines the last valid index for the global auxiliary function list.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_AXCTSWE</name>
<brief>Axis container rotation slot enabled</brief>
<description>Is the rotation enabled for a slot of an axis container?
Bit mask, each bit corresponds to a slot, e.g. 0x5 corresponds to the slots 1 and 3.
Bit == 1: the slot of an axis container is enabled for rotation.
Bit == 0: the slot of an axis container is not enabled for rotation.

Example:
Axis container with 4 slots: whenever ($AN_AXCTSWE[ct1] and 'Hffff') == 'Hfff5' do DO M99.
As soon as a slot has been enabled for the axis container rotation, bit == 1 is recorded for unused slots. In the example 'Hfff0'. If the slots of an axis container are distributed over several NCUs, the current status of the slots is only displayed on the other NCUs if all slots for the axis container rotation have been enabled on the other NCU. In the case of a direct axis container rotation (AXCTSED), nothing is displayed.

Notice:
The most significant bit is not a sign bit, but stands for the 32nd slot of an axis container. Therefore do not query variables with &gt; 0 but to != 0 in order to establish whether a slot has actually been enabled for rotation. The axis container name or axis name of an axis in the axis container can be specified as an index.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LAI_AX_IS_AXCTAX</name>
<brief>Bit mask shows whether an LAI axis is an axis in an axis container</brief>
<description>Bit mask shows whether an axis in the logical NCK machine axis image (machine data 10002 $MN_AXCONF_LOGIC_MACHAX_TAB) is an axis in an axis container (machine data 1270x/1271x $MN_AXCT_AXCONF_ASSIGN_TABi).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LAI_AX_IS_LINKAX</name>
<brief>Bit mask shows whether an LAI axis is a link axis.</brief>
<description>Bit mask shows whether an axis in the logical NCK machine axis image (machine data 10002 $MN_AXCONF_LOGIC_MACHAX_TAB) is a link axis (axis physicially connected to another NCU).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LAI_AX_IS_LEADLINKAX</name>
<brief>Bit mask shows whether an LAI axis is a leading link axis.</brief>
<description>Bit mask shows whether an axis in the logical NCK machine axis image (machine data 10002 $MN_AXCONF_LOGIC_MACHAX_TAB) is a leading link axis,  i.e. several NCUs refer to the same machine axis through MD10002 $MN_AXCONF_LOGIC_MACHAX_TAB and the axial MD30554 $MA_AXCONF_ASSIGN_MASTER_NCU is used to establish which NCU is the master NCU, which creates the setpoint values for the position controller following booting.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_LAI_AX_TO_MACHAX</name>
<brief>Assignment of the physical axis to an LAI axis.</brief>
<description>The NCU and machine axis are recorded for an LAI axis, this illustrates the physical image of the axis. In this case, the NCU Id is reported from the 10000 location, e.g. 20005: NCU 2 axis 5. Without NCU link, i.e. if there is only one NCU, then only the number of the machine axis is reported. In this case, the NCU Id equals zero. If the LAI axis is not used, 0 is returned.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_LAI_AX_TO_IPO_NC_CHANAX</name>
<brief>Assignment of an LAI axis to the interpolator (NCU or channel, channel axis).</brief>
<description>If the LAI axis is currently interpolated on this NCU, the channel and the channel axis number are reported in such a way, which defines the interpolator of the axis. In this case, the channel is recorded from the hundred place and the channel axis number is recorded from the unit place, e.g. 1005 - channel 10 channel axis 5. These values are always lower than 10000. If the LAI axis is currently interpolated on another NCU, the NCU Identifier of the interpolating NCU and the global axis number of the machine axis is recorded. In this case, the NCU is recorded from the 10000 place, e.g. 20203: NCU 2 and the global axis number is 203. This global axis number can be used to determine the interpolating channel and the channel axis number on the other NCU with NCU Id 2, with $AN_IPO_CHANAX[203]. If the LAI axis is not used, 0 is returned.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_IPO_CHANAX</name>
<brief>Assignment of the global axis to the interpolator (channel, channel axis).</brief>
<description>For a global axis number, such as the one reported by $VA_IPO_NC_CHANAX, the channel and channel axis number are reported, which define the writing interpolator of the axis. In this case, the channel is reported from the hundred place and the channel axis number from the unit place e.g. 1005 ­ channel 10 channel axis 5. If the axis is not used on this NCU with the specified global axis number, 0 is returned.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LANGUAGE_ON_HMI</name>
<brief>Currently set language on HMI</brief>
<description>The variable $AN_LANGUAGE_ON_HMI determines the language currently set on the HMI. The variable can only be written on the HMI.

Application in the NC program:
IF $AN_LANGUAGE_ON_HMI == 3 GOTOF ENGLISH
The possible values are described in the Appendix to the Programming Guide
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_SLTRACE</name>
<brief>Trigger variable for the log function</brief>
<description>This variable is reserved for the applications SinuTrace and Operate-Trace. It serves as a trigger variable for the log function.

The variable has the following values:
0: Inactive
1: Start logging requested
2: Stop logging requested
The value is usually set by the part program, the reset through the application via OPI.
</description>
</parameter>

<parameter type="BOOL" dim="0">
<name>$AN_EXPORT_RESTRICTED</name>
<brief>Export restriction</brief>
<description>Identification of the software subject to export restriction according to BAfA and ECC
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_LINK_CONN_SND</name>
<brief>Number of link variable changes per cycle</brief>
<description>Number of link variable changes per cycle from the current to the specified NCU number. The index NCU No of the $AN_LINK_CONN_SDN[ NCU No] variable currently varies from 1 to 16. The variable returns the number of bytes from the current NCU Act to the NCU No reserved for replacing any non-cyclic messages. Depending on the utilization of this transmission capacity, SIEMENS can provide new SDB blocks for the CBE-30, which reduce the total transmission capacity from NCU Act to NCU No. This makes the link faster and the servo cycle shorter. Note: Systems without NCU link return the value 0. If NCU Act == NCU No, the variable returns "0".
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_LINK_CONN_RCV</name>
<brief>Number of link variable changes per cycle</brief>
<description>Number of link variable changes per cycle from the specified NCU number to the current NCU number. The $AN_LINK_CONN_RCV[NCU-No] variable defines the reserved transmission capacity for non-cyclic messages from NCU  No to NCU Act in bytes. Note: Systems without an NCU link return the value 0. The variable "0" is returned if NCU Act == NCU No.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LINK_CONN_SIZE_LINKVAR</name>
<brief>Gross number of bytes required for a link variable</brief>
<description>Gross number of bytes required for a link variable that is to be transferred into every PTP relationship.
The assignment of a link variable (e.g. $a_dlb[9] = 1) does not utilize the non-cyclic link connections with a message of length $AN_LINK_CONN_SIZE_LINKVAR. It is irrelevant whether a double-link variable or a byte-link variable is described. The customer can thus estimate the maximum number of transferable link variables per IPO cycle ($AN_LINK_CONN_SND[NCU-No] / $AN_LINK_CONN_SIZE_LINKVAR= number of link variables changes per IPO cycle from NCU Act to NCU No).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LINK_TRANS_RATE_LAST</name>
<brief>Number of link variables that were still available in last interpolation cycle</brief>
<description>Number of link variables which could have been transferred in the previous interpolation cycle. The value of $AN_LINK_TRANS_RATE_LAST is constant in the current interpolation cycle.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_LINK_TRANS_RATE_LAST_SUM</name>
<brief>Unused link variables in the stated transmission direction</brief>
<description>Number of unused link variables in the previous interpolation cycle in the stated transmission direction. The index NCU no. of the variable $AN_LINK_TRANS_RATE_LAST_SUM[ NCU-No] defines the transmission direction, and nowadays ranges from 1 to 16. The variable returns the number of user link variables ($A_DLx) for the stated NCU which could have been used in the previous interpolation cycle in this transmission direction.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_PROBE_LIMITED</name>
<brief>Measuring velocity exceeded.</brief>
<description>$A_PROBE_LIMITED contains the accumulated number of DP communication cycles in which at least one limitation was active. An increasing value indicates that the frequency of the probe signals must be reduced (e.g. by reducing the speed of the gearwheel that is to be measured).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_SIM_CHAN_MASK</name>
<brief>Bit mask of channels that are synchronized in the simulation</brief>
<description>The channels that are to be synchronized during the simulation can be specified by the bitcoded variable $AN_SIM_CHAN_MASK. The variable is defaulted with the bit mask across all configured channels. The synchronized multichannel simulation is configured via bit 4 in $MN_PROG_TEST_MASK.

Application in the NC program:
$AN_SIM_CHAN_MASK = 'B101'          ; channel 1 and channel 3 are synchronized in the simulation.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_SIM_MAX_IPOSTEP</name>
<brief>Maximum simulation step in real-time interpolation cycles</brief>
<description>The maximum simulation increment can be read and written in real-time interpolation cycle via variable $AN_SIM_MAX_IPOSTEP. An event is output to the HMI interface after each increment. This enables the number of interpolation points to be set. If a value of 0 is specified, the system determines the maximum possible increment. The variable is only valid in conjunction with the synchronized simulation (see bit 4 $MN_PROG_TEST_MASK).

Application in the NC program:
$AN_SIM_MAX_IPOSTEP = 10        ; One interpolation cycle in the simulation corresponds to a maximum of 10 real-time interpolation cycles.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_ACTIVATE_COLL_CHECK</name>
<brief>Status of the field ActivateCollCheck at the PLC-&gt;NCK interface.</brief>
<description>Status of the field activateCollCheck at the interface PLC-&gt;NCK (DB10.DBX234.0 - DB10.DBX241.7). The data are made available in groups of 4 bytes, i.e. with index 0 you receive the first 4 bytes (DB10.DBX234.0 - DB10.DBX237.7), with index 1 the second 4 bytes (DB10.DBX238.0 - DB10.DBX241.7)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_COLL_CHECK_OFF</name>
<brief>Status of the byte DeactivateCollCheckGroups at the PLC-&gt;NCK interface.</brief>
<description>Status of the byte DeactivateCollCheckGroups on the interface PLC-&gt;NCK (DB10.DBB58) for the operating-mode-dependant suppression of the collision avoidance for groups of protection areas.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_T_NAME</name>
<brief>Name of an internally generated tool protection area element.</brief>
<description>Name of an internally generated tool protection area element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_T_TYPE</name>
<brief>Type of internally generated tool protection area element</brief>
<description>Type of internally generated tool protection area element. The following types are possible:

FRAME: An element of this type does not contain a body, but only defines a frame, which is effective for the subsequent protection area definitions.
1. BOX (L, W, H): Paraxial cuboid symmetrical in relation to the zero point, with the dimensions L in the X direction, W in the Y direction and H in the Z direction, this means that the corners of the cuboid are located at (+/-L/2, +/-W/2, +/-H/2).
2. SPHERE (R): Sphere centered on the zero point with the radius R.
3. CYLINDER (H, R): Cylinder with radius R and height H, longitudinal axis parallel to the Z axis. The center point of the cylinder lies at the zero point, that is the two limiting circular surfaces are parallel to the X-Y plane, and are located at +/-H/2.
4. FILE: Grid consisting of triangular areas in STL format.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_T_FILENAME</name>
<brief>File name of a tool protection area element of the type "FILE".</brief>
<description>This parameter contains the name of the file containing the description of the tool protection area element if this element is the type "FILE".
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_T_PARA</name>
<brief>Parameters for describing the type</brief>
<description>Parameters describing the tool protection area element. A maximum of 3 parameters are required for the types described in $NP_T_TYPE.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_T_OFF</name>
<brief>Offset component</brief>
<description>Component i (0&lt;=i&lt;=2) of the offset vector of the tool protection area element n.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_T_DIR</name>
<brief>Direction of rotary axis</brief>
<description>Components of the rotary axis for a coordinate rotation of the tool protection area element n.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NP_T_ANG</name>
<brief>Angle of a coordinate rotation in the tool protection area element n.</brief>
<description>Angle (in degrees) of a coordinate rotation in the tool protection area element n.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_COLL_STATE_COND</name>
<brief>Activation conditions of a protection area for collision avoidance</brief>
<description>The system variable indicates whether a protection area can be a current part of the collision monitoring. The individual conditions that have to be fulfilled for a protection area to be active for collision avoidance are also displayed.

The variable is coded as follows:
Bit 0:    Protection area is monitored (this bit has the same meaning as the system variable $AN_COLL_STATE).
Bit 1:    The protection area is included in the internally mapped model.
Bit 2:    The protection area has the status 'P' (PLC-controlled).
Bit 3:    The protection area has the status 'A' (active).
Bit 4:    All axes that can move the protection area are referenced.
Bit 5:    Indicates whether a PLC bit is assigned to the protection area.
Bit 6:    Status of the interface bit assigned to the protection area.
Bit 7:    The protection area has no connection with ROOT (the kinematic chain is interrupted by a SWITCH).

An active protection area (bit 0 = TRUE) participates in the collision avoidance only if it is part of at least one collision pair ($NP_COLL_PAIR), and its other partner is also an active protection area.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_LINK_COMM_STATE</name>
<brief>Status of the NCU-Link communication between all NCUs of the NCU-Link cluster</brief>
<description>Status of the NCU-Link communication between all NCUs of the NCU-Link cluster

Decimal values of the variable:
0: NCU-Link communication is not active (MD18780 $MN_MM_NCU_LINK_MASK)
1: NCU-Link communication is active (MD18780 $MN_MM_NCU_LINK_MASK), and is functioning correctly, that means signs of life are being received from all NCUs in the cluster
2: NCU-Link communication is active (MD18780 $MN_MM_NCU_LINK_MASK), but is not functioning correctly (e.g. commissioning with inactive link connection, communication error, etc.)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_AVAILABLE</name>
<brief>Available number of facets of collision bodies</brief>
<description>Machine parts can be modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18895 $MN_MM_MAXNUM_3D_FACETS. The system variable $AN_FACETS_AVAILABLE states how many of them are still available.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_ACT</name>
<brief>Currently used number of facets of internal collision bodies</brief>
<description>Machine parts can be modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18895 $MN_MM_MAXNUM_3D_FACETS. The system variable $AN_FACETS_ACT states how many of them are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_MIN</name>
<brief>Minimum number of facets of collision bodies used</brief>
<description>Machine parts can be modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18895 $MN_MM_MAXNUM_3D_FACETS. The system variable $AN_FACETS_MIN states the lowest number of them that have so far been used. It can be reset by writing with any value.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_MAX</name>
<brief>Maximum number of facets of collision bodies used</brief>
<description>Machine parts can be modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18895 $MN_MM_MAXNUM_3D_FACETS. The system variable $AN_FACETS_MIN states the highest number of them that have so far been used. It can be reset by writing with any value.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_INTERN_AVAILABLE</name>
<brief>Available number of facets of internal collision bodies</brief>
<description>Changeable machine parts, such as tools, can be automatically modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18894 $MN_MM_MAXNUM_3D_FACETS_INTERN. The system variable $AN_FACETS_INTERN_AVAILABLE states how many of them are still available.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_INTERN_ACT</name>
<brief>Currently used number of internal facets of collision bodies</brief>
<description>Changeable machine parts, such as tools, can be automatically modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18894 $MN_MM_MAXNUM_3D_FACETS_INTERN. The system variable $AN_FACETS_INTERN_ACT states how many of them are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_INTERN_MIN</name>
<brief>Minimum number of internal facets of collision bodies used</brief>
<description>Changeable machine parts, such as tools, can be automatically modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18894 $MN_MM_MAXNUM_3D_FACETS_INTERN. The system variable $AN_FACETS_INTERN_MIN states the lowest number of them that have so far been used. It can be reset by writing with any value.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_FACETS_INTERN_MAX</name>
<brief>Maximum number of internal facets of collision bodies used</brief>
<description>Changeable machine parts, such as tools, can be automatically modeled from triangular surfaces for the collision avoidance function. The maximum number of triangles is limited by the machine data 18894 $MN_MM_MAXNUM_3D_FACETS_INTERN. The system variable $AN_FACETS_INTERN_MAX states the highest number of them that have so far been used. It can be reset by writing with any value.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_PROT_AREAS_ACT</name>
<brief>Currently used number of protection areas of collision bodies</brief>
<description>The collision avoidance function can monitor a maximum number of protection areas. This number is defined by machine data 18890 $MN_MM_MAXNUM_3D_PROT_AREAS. The system variable $AN_PROT_AREAS_ACT states how many of the areas are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_PROT_AREA_ELEM_ACT</name>
<brief>Currently used number of protection area elements of collision bodies</brief>
<description>The collision avoidance function can monitor a maximum number of protection area elements. This number is defined by machine data 18892 $MN_MM_MAXNUM_3D_PROT_AREA_ELEM. The system variable $AN_PROT_AREA_ELEM_ACT states how many of the elements are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_COLL_PAIRS_ACT</name>
<brief>Currently used number of collision pairs of collision bodies</brief>
<description>The collision avoidance function can monitor a maximum number of protection area pairs. This number is defined by machine data 18898 $MN_MM_MAXNUM_3D_COLL_PAIRS. The system variable $AN_COLL_PAIRS_ACT states how many of the pairs are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_T_PROT_ELEM_ACT</name>
<brief>Currently used number of tool protection area elements</brief>
<description>The collision avoidance function can only monitor a maximum number of tool protection area elements. This number is defined by machine data 18893 $MN_MM_MAXNUM_3D_T_PROT_ELEM. The system variable $AN_T_PROT_ELEM_ACT states how many of the elements are currently being used.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_KIN_CHAIN_ELEM_ACT</name>
<brief>Number of kinematic elements used</brief>
<description>The kinematic chains can only use a maximum number of elements. This number is defined by machine data 18880 $MN_MM_MAXNUM_KIN_CHAIN_ELEM. The system variable $AN_KIN_CHAIN_ELEM_ACT states how many of the elements are currently being used.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_ROBOUT</name>
<brief>NCK-PLC robot control interface</brief>
<description>The system variable writes the data of the robot handling for the robot control interface, which is sent from the NCK to the PLC. The data can be read back. The index[0...7] states the relevant byte number.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_ROBIN</name>
<brief>NCK-PLC robot status interface</brief>
<description>The system variable reads the data of the robot handling for the robot status interface, which is sent from the PLC to the NCK. The index[0...7] states the relevant byte number.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$AN_POWERON_STATE</name>
<brief>&gt;State of NCK power on</brief>
<description>The bit-coded variable indicates the state of the NCK power on.
   All bits = 0: NCK power on has not started.
   Bit0=1:  The NCK power on has started, i.e. all NCK objects (channels etc.) have already been created and are being initialized.
   Bit1=1: The main run states can now be read. This means that all stations have been initialized, and that power on Reset has been executed together with the Reset INIT blocks.
   Bit2=1: User interventions (Reset, Stop etc.) are now possible and purposeful. This means that any configured Safety ProgEvent has been correctly completed or possibly could not be executed because of alarms. Any configured PowerOn ProgEvent is executed next provided that its execution is not prevented by alarms.
   Bit24=1: The NCK power on has finished together will all the ProgEvents that could be executed automatically (Safety ProgEvent, PowerOn ProgEvent). The bit does not indicate whether or not an error occurred during the power on (see Bit25).
   Bit25=1: The NCK power on finished with errors. This means, for example, that an error occurred while the stations were being initialized, during the Reset INIT blocks or the execution of the Safety ProgEvent. Other alarms indicate the exact problem, and the alarm responses indicate which actions can be executed.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$P_ACCESSLEVEL</name>
<brief>Access level</brief>
<description>Currently set access authorization level. Can be modified by entering a password or key-operated switch.
0 = access level for SIEMENS
1 = access level for machine builders
2 = access level for commissioning engineers (machine builders)
3 = access level for end users with password
4 = access level key-operated switch 3
5 = access level key-operated switch 2
6 = access level key-operated switch 1
7 = access level key-operated switch 0
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_MODEL_SCALING_OVL</name>
<brief>&gt;Information, whether model scaling is overloaded.</brief>
<description>The variable states in bit-coded form whether and how the machine data programmed via the MMCID is changed in respect of the model definition in the characteristics effective on cold start. Changes are only defined and possible for simulation NCK systems. The field index corresponds to the MMCID of the machine data that is to be checked. For example, $AN_MODLE_SCALING_OVL[20700] designates the machine data $MC_REFP_NC_START_LOCK. The field index of a non-existent MMCID does not lead to the alarm, but returns the value -1 (0xffffffff).

All bits = 0: The machine data remains unchanged with its characteristics defined for the NCK model.
Bit0=1:  Simulation NCK. An entry in the file that is determined with the internally used environment variable NCNCKSIMS has changed one or more characteristics of the original model definition
Bit1=1: Simulation NCK. An entry in the file that is determined with the internally used environment variable NCNCKSIMS00 has changed one or more characteristics of the original model definition
Bit2=1: Simulation NCK. An entry in the file that is determined with the internally used environment variable NCNCKSIMS01 has changed one or more characteristics of the original model definition
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PN_CHANGE_CNTR_NK_DATA</name>
<brief>Change counter for kinematic chain data (chain elements and NK_SWITCHes)</brief>
<description>Change counter for kinematic chain data (chain elements and NK_SWITCHes).
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PN_CHANGE_CNTR_NK_ELEM</name>
<brief>Change counter for kinematic chain elements (without NK_SWITCH))</brief>
<description>Change counter for kinematic chain elements (without NK_SWITCH))
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PN_CHANGE_CNTR_NK_SWITCH</name>
<brief>Change counter for $NK_SWITCHes</brief>
<description>Change counter for $NK_SWITCHes
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PN_CHANGE_CNTR_NP_DATA</name>
<brief>Change counter for 3D protection area data ($NP_xxx)</brief>
<description>Change counter for 3D protection area data ($NP_xxx)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$PN_CHANGE_CNTR_NT_DATA</name>
<brief>Change counter for transformation data ($NT_xxx)</brief>
<description>Change counter for transformation data ($NT_xxx)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_EP</name>
<brief>Programmed end position</brief>
<description>$P_EP[X]
System variable $P_EP supplies the current WCS setpoint position in the interpreter. The numerical value is not necessarily identical to the value programmed in the part program. The two values differ in the following situations:
- with incremental programming
- when the WCS is changed by a frame or tool selection
If an ASUB is started after a block search with calculation, the positions in the interpreter are synchronized with this operation. $P_EP then supplies the actual standstill positions of the axes in the ASUB. The collected search position can be interrogated via system variable $AC_RETPOINT.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_EPM</name>
<brief>Programmed MCS target position</brief>
<description>Axial variable $P_EPM[ax]  determines the current programmed MCS target position in the preprocessor for the specified axis (see also $P_EP).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_APR</name>
<brief>Axis position in the starting point with SAR in the WCS</brief>
<description>$P_APR[X]
Position of axis in workpiece coordinate system at starting point of approach movement on smooth approach to the contour
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_AEP</name>
<brief>1st contour point with SAR in the WCS</brief>
<description>$P_AEP[X]
Approach point: First contour point in workpiece coordinate system on smooth approach to contour
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_POLF</name>
<brief>Programmed retraction position of the axis</brief>
<description>$P_POLF[X]
supplies the programmed retraction position of the axis
X: Axis
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_POLF_VALID</name>
<brief>Status of the value of $P_POLF</brief>
<description>$P_POLF_VALID[X]
Supplies the status of $P_POLF[X]
X: Axis

Return values:
0: No retraction programmed
1: Retraction programmed Position programmed
2: Retraction programmed as distance
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IW</name>
<brief>Current WCS setpoint of an axis</brief>
<description>Axial variable $AA_IW[ax] determines the current setpoint in the workpiece coordinate system (WCS) for the specified axis. The setpoint is equivalent to the interpolator output value for the current interpolation cycle. The WCS value contains no axial offset components (DRF, AA_OFF, ext. work offset, etc.).
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_REPOS_DELAY</name>
<brief>-</brief>
<description>$AA_REPOS_DELAY[X]
TRUE:     Repos suppression is currently active for this axis.
FALSE:    otherwise
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IEN</name>
<brief>Current SZS setpoint of an axis</brief>
<description>Axial variable $AA_IEN[ax] determines the current setpoint in the settable zero coordinate system (SZS) for the specified axis. See also $AA_IW[ax]. The SZS value contains no axial offset components (DRF, AA_OFF, ext. work offset, etc.).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IBN</name>
<brief>Current BZS setpoint of an axis</brief>
<description>Axial variable $AA_IBN[ax] determines the current setpoint in the basic zero coordinate system (BZS) for the specified axis. See also $AA_IW[ax]. The BZS value contains no axial offset components (DRF, $AA_OFF, ext. work offset, etc.).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IB</name>
<brief>Current BCS setpoint of an axis</brief>
<description>Axial variable $AA_IB[ax] determines the current setpoint in the basic coordinate system (BCS) for the specified axis. See also $AA_IW[ax]. The BCS value contains no axial offset components (DRF, $AA_OFF, ext. work offset, etc.).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IM</name>
<brief>Current MCS setpoint of an axis</brief>
<description>Axial variable $AA_IM[ax] determines the current setpoint in the machine coordinate system (MCS) for the specified axis. See also $AA_IW[ax]. The MCS value contains all axial offset components (DRF, $AA_OFF, ext. work offset, etc.).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ACT_INDEX_AX_POS_NO</name>
<brief>Current indexing position</brief>
<description>$AA_ACT_INDEX_AX_POS_NO[X]
= 0: Not an indexing axis, no indexing position is thus available.
&gt; 0: Number of last reached or last crossed indexing position
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_PROG_INDEX_AX_POS_NO</name>
<brief>Programmed indexing position</brief>
<description>$AA_PROG_INDEX_AX_POS_NO[X]
= 0: Not an indexing axis, no indexing position is thus available or the indexing axis is not currently approaching an indexing position
&gt; 0: Number of programmed indexing position
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_ENC_ACTIVE</name>
<brief>Measuring system is active</brief>
<description>Axial variable $AA_ENC_ACTIVE[ax] determines whether the active measuring system is operating below the encoder limit frequency.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_ENC1_ACTIVE</name>
<brief>1. Measuring system is active</brief>
<description>Axial variable $AA_ENC1_ACTIVE[ax] determines whether the first measuring system is operating below the encoder limit frequency.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_ENC2_ACTIVE</name>
<brief>2. Measuring system is active</brief>
<description>Axial variable $AA_ENC2_ACTIVE[ax] determines whether the second measuring system is operating below the encoder limit frequency.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IM</name>
<brief>Current MCS actual value of an axis</brief>
<description>Axial variable $VA_IM[ax] determines the encoder actual value (measured by active measuring system) in the machine coordinate system (MCS). All actual value compensations are corrected (leadscrew error compensation, backlash compensation, quadrant error compensation). When a spindle or axis disable is active, this variable returns the current setpoint by definition. If it is preferred to return the actual value in this situation, BIT3 in $MA_MISC_FUNCTION_MASK must be set.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IM1</name>
<brief>Current MCS actual value of an axis</brief>
<description>Axial variable $VA_IM1[ax] determines the encoder actual value (measured by encoder 1) in the machine coordinate system (MCS). All actual value compensations are corrected (leadscrew error compensation, backlash compensation, quadrant error compensation). When a spindle or axis disable is active, this variable returns the current setpoint by definition. If it is preferred to return the actual value in this situation, BIT3 in $MA_MISC_FUNCTION_MASK must be set.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IM2</name>
<brief>Current MCS actual value of an axis</brief>
<description>Axial variable $VA_IM2[ax] determines the encoder actual value (measured by encoder 2) in the machine coordinate system (MCS). All actual value compensations are corrected (leadscrew error compensation, backlash compensation, quadrant error compensation). When a spindle or axis disable is active, this variable returns the current setpoint by definition. If it is preferred to return the actual value in this situation, BIT3 in $MA_MISC_FUNCTION_MASK must be set.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_LAG_ERROR</name>
<brief>Axis following error</brief>
<description>Variable $VA_LAG_ERROR[X] supplies the contour-related following error, i.e. position setpoint after fine interpolator actual position value.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MW</name>
<brief>Measured probe position (WCS)</brief>
<description>$AA_MW[X]
Probe measured value in workpiece coordinate system
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MM</name>
<brief>Measured probe position (MCS)</brief>
<description>$AA_MM[X]
Probe measured value in machine coordinate system
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MW1</name>
<brief>Probe position trigger 1 (WCS)</brief>
<description>$AA_MW1[X]
Measurement result axial measurement
Trigger event 1 in WCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MW2</name>
<brief>Probe position trigger 2 (WCS)</brief>
<description>$AA_MW2[X]
Measurement result axial measurement
Trigger event 2 in WCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MW3</name>
<brief>Probe position trigger 3 (WCS)</brief>
<description>$AA_MW3[X]
Measurement result axial measurement
Trigger event 3 in WCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MW4</name>
<brief>Probe position trigger 4 (WCS)</brief>
<description>$AA_MW4[X]
Measurement result axial measurement
Trigger event 4 in WCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MM1</name>
<brief>Probe position trigger 1 (MCS)</brief>
<description>$AA_MM1[X]
Measurement result axial measurement
Trigger event 1 in MCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MM2</name>
<brief>Probe position trigger 2 (MCS)</brief>
<description>$AA_MM2[X]
Measurement result axial measurement
Trigger event 2 in MCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MM3</name>
<brief>Probe position trigger 3 (MCS)</brief>
<description>$AA_MM3[X]
Measurement result axial measurement
Trigger event 3 in MCS
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MM4</name>
<brief>Probe position trigger 4 (MCS)</brief>
<description>$AA_MM4[X]
Measurement result axial measurement
Trigger event 4 in MCS
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_MEAACT</name>
<brief>Axial measurement active</brief>
<description>$AA_MEAACT[X]
Value is exactly then TRUE if
axial measurement active for X
Corresponds with NC/PLC interface signal &lt;Messung_aktiv/&gt; (measurement active)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_DRF</name>
<brief>Handwheel override of an axis</brief>
<description>Axial variable $AC_DRF[ax] determines the axial override value caused by the handwheel (DRF offset).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_PRESET</name>
<brief>PRESET value of an axis</brief>
<description>Axial variable $AC_PRESET[ax] determines the last defined PRESET value.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_ETRANS</name>
<brief>External zero offset</brief>
<description>Axial variable $AA_ETRANS[ax] is used to enter an external work offset which can be activated by the PLC. After activation by the PLC, the offset value is traversed as an axial override in the next block. If Bit 1 is set in $MC_MM_SYSTEM_FRAME_MASK, an active movement is stopped immediately, on activation by the PLC, the preprocessor is reorganized, and the system frame is initialized with the axis value of $AA_ETRANS[ax] and is activated. The offset is traversed before resuming the interrupted movement. The external work offset has an absolute effect on the translation of the current system frame. Multiple activation is thus not additive; only the coarse component of the translation (not the fine offset) is overwritten with the value from $AA_ETRANS[ax].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MEAS_P1_VALID</name>
<brief>Unlatch 1st measuring point of an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_P1_VALID[ax] is used to unlatch the current axis position with reference to a selected coordinate system. Variable $AC_MEAS_P1_COORD is used to select the coordinate system.

Application:
$AA_MEAS_P1_VALID[ax] = 0       ; 1st measuring point of axis is invalid
$AA_MEAS_P1_VALID[ax] = 1       ; Determining 1st measuring point of axis

The unlatched measuring point is stored in $AA_MEAS_POINT1[ax].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MEAS_P2_VALID</name>
<brief>Unlatch 2nd measuring point of an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_P2_VALID[ax] is used to unlatch the current axis position with reference to a selected coordinate system. Variable $AC_MEAS_P2_COORD is used to select the coordinate system.

Application:
$AA_MEAS_P2_VALID[ax] = 0    ; 2nd measuring point of axis is invalid
$AA_MEAS_P2_VALID[ax] = 1    ; Determining 2nd measuring point of axis

The unlatched measuring point is stored in $AA_MEAS_POINT2[ax].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MEAS_P3_VALID</name>
<brief>Unlatch 3rd measuring point of an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_P3_VALID[ax] is used to unlatch the current axis position with reference to a selected coordinate system. Variable $AC_MEAS_P3_COORD is used to select the coordinate system.

Application:
$AA_MEAS_P3_VALID[ax] = 0    ; 3rd measuring point of axis is invalid
$AA_MEAS_P3_VALID[ax] = 1    ; Determining 3rd measuring point of axis

The unlatched measuring point is stored in $AA_MEAS_POINT3[ax].
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MEAS_P4_VALID</name>
<brief>Unlatch 4th measuring point of an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_P4_VALID[ax] is used to unlatch the current axis position with reference to a selected coordinate system. Variable $AC_MEAS_P4_COORD is used to select the coordinate system.

Application:
$AA_MEAS_P4_VALID[ax] = 0       ; 4th measuring point of axis is invalid
$AA_MEAS_P4_VALID[ax] = 1       ; Determining 4th measuring point of axis

The unlatched measuring point is stored in $AA_MEAS_POINT4[ax].
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_POINT1</name>
<brief>1. measuring point</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_POINT1[ax] is used to write the 1st measuring point for workpiece and tool measurement. The measuring point can be either written directly or unlatched with variables $AC_MEAS_LATCH[0], $AA_MEAS_P1_VALID[ax].

Application:
$AA_MEAS_POINT1[x] = $AA_IW[x]
$AA_MEAS_POINT1[y] = $AA_IW[y]
$AA_MEAS_POINT1[z] = $AA_IW[z]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_POINT2</name>
<brief>2. measuring point</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_POINT2[ax] is used to write the 2nd measuring point for workpiece and tool measurement. The  measuring point can be either written directly or unlatched with variables $AC_MEAS_LATCH[1], $AA_MEAS_P2_VALID[ax].

Application:
$AA_MEAS_POINT2[x] = $AA_IW[x]
$AA_MEAS_POINT2[y] = $AA_IW[y]
$AA_MEAS_POINT2[z] = $AA_IW[z]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_POINT3</name>
<brief>3. measuring point</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_POINT3[ax] is used to write the 3rd measuring point for workpiece and tool measurement. The measuring point can be either written directly or unlatched with variables $AC_MEAS_LATCH[2], $AA_MEAS_P3_VALID[ax].

Application:
$AA_MEAS_POINT3[x] = $AA_IW[x]
$AA_MEAS_POINT3[y] = $AA_IW[y]
$AA_MEAS_POINT3[z] = $AA_IW[z]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_POINT4</name>
<brief>4. measuring point</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_POINT4[ax] is used to write the 4th measuring point for workpiece and tool measurement. The measuring point can be either written directly or unlatched with variables $AC_MEAS_LATCH[3], $AA_MEAS_P4_VALID[ax].

Application:
$AA_MEAS_POINT4[x] = $AA_IW[x]
$AA_MEAS_POINT4[y] = $AA_IW[y]
$AA_MEAS_POINT4[z] = $AA_IW[z]
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MEAS_SP_VALID</name>
<brief>Validity of position setpoint</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_SP_VALID[ax] is used to set the defined setpoint of an axis to valid or invalid.

Application:
$AA_MEAS_SP_VALID[ax] = 0 ; Position setpoint of axis is invalid
$AA_MEAS_SP_VALID[ax] = 1 ; Position setpoint of axis is valid

The position setpoint is stored in $AA_MEAS_SETPOINT[ax]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_SETPOINT</name>
<brief>Position setpoint of  an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_SETPOINT[ax] is used to define a position setpoint for an axis. This position setpoint is considered when calculating the workpiece position or the tool length.

Application:
$AA_MEAS_SETPOINT[x] = 0.0
$AA_MEAS_SETPOINT[y] = 0.0
$AA_MEAS_SETPOINT[z] = 0.0
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_MEAS_SETANGLE</name>
<brief>Angle setpoint of an axis</brief>
<description>Variable for workpiece and tool measurement.
Axial variable $AA_MEAS_SETANGLE[ax] is used to define an angle setpoint for an axis. This angle setpoint is considered when calculating the workpiece position or the tool length.

Application:
$AA_MEAS_SETANGLE[x] = 0.0
$AA_MEAS_SETANGLE[y] = 0.0
$AA_MEAS_SETANGLE[z] = 0.0
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OFF</name>
<brief>Overlaid movement of an axis</brief>
<description>Axial variable $AA_OFF[ax] is used to overlay a movement for the programmed axis. The behavior of the overlaid movement can be configured with $MA_AA_OFF_MODE.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_OFF_LIMIT</name>
<brief>Limit value reached for axis offset</brief>
<description>Axial variable $AA_OFF_LIMIT[ax] is used to interrogate a limit value for the axis offset $AA_OFF[ax].

The following values are possible:
0:    Limit value not reached
1:    Limit value reached in positive axis direction
-1:   Limit value reached in negative axis direction
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OFF_VAL</name>
<brief>Integrated path of axis offset</brief>
<description>Axial variable $AA_OFF_VAL[ax] determines the integrated value of the overlaid movement for an axis. An overlaid movement can be canceled again by means of the negative value of this variable. e.g. $AA_OFF[axis] = -$AA_OFF_VAL[axis]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AC_RETPOINT</name>
<brief>Repositioning point in ASUB</brief>
<description>$AC_RETPOINT[X] supplies the WCS position of an axis at which an ASUB has been started. The axis can then be repositioned at this point in the ASUB. If an ASUB is started immediately after a block search with calculation, $AC_RETPOINT then supplies the collected search position. For a modulo axis $AC_RETPOINT[] supplies the position as modulo converted. System variable $AC_RPVALID[] can be used to check whether $AC_RETPOINT[] is supplying a valid repositioning point within the current program context (see documentation for $AC_RPVALID[]).

Note about application in synchronized actions:
The points generated by REPOS are supplied while the REPOS approach blocks are being processed. The current parameter settings for the REPOS operation (approach to interruption point, block start point, etc.) defined by G codes RMI, RMB, RME, RMN or VDI signal are also taken into account.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TOFF</name>
<brief>Offset in tool direction</brief>
<description>Variable $AA_TOFF[geo axis] is used to overlay a movement in the corresponding tool direction. The behavior of the overlaid movement can be configured with $MC_TOFF_MODE. Activation in the part program is performed using the TOFFON instruction. The TOFFOF instruction can be used to reset the offset values. The velocity for the offset can be defined with MD 21194 TOFF_VELO; the acceleration can be defined with MD21196 TOFF_ACCEL. The variable is only appropriate in conjunction with an active orientation transformation or an active toolholder.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TOFF_VAL</name>
<brief>Integrated value of offset in TCS</brief>
<description>Variable $AA_TOFF_VAL[geo axis] determines the integrated value of the overlaid movement in the corresponding tool direction. The variable is only appropriate in conjunction with an active orientation transformation or an active toolholder.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_TOFF_LIMIT</name>
<brief>Limit value for offset in TCS reached</brief>
<description>Axial variable $AA_TOFF_LIMIT[ax] is used to interrogate a limit value for the offset in the tool direction (TCS) via $AA_TOFF[geo axis].

The following values are possible:
0: Limit value not reached
1: Limit value reached in positive axis direction
-1: Limit value reached in negative axis direction

The limit values can be defined with SD 42970 TOFF_LIMIT. The variable is only appropriate in conjunction with an active orientation transformation or an active toolholder.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TOFF_PREP_DIFF</name>
<brief>Difference value of main run/preprocessing run in TCS</brief>
<description>Variable $AA_TOFF_PREP_DIFF[geo axis] determines the difference value of the overlaid movement in the corresponding tool direction between the main run and preprocessing run. The variable is only appropriate in conjunction with an active orientation transformation or an active toolholder.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_SOFTENDP</name>
<brief>Software limit position, positive direction</brief>
<description>$AA_SOFTENDP[X]
Current software limit position, positive direction
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_SOFTENDN</name>
<brief>Software limit position, negative direction</brief>
<description>$AA_SOFTENDN[X]
Software limit position, negative direction
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBW</name>
<brief>Distance from block start in WCS</brief>
<description>Axial variable $AA_DTBW[ax] determines the axial distance from the start of the block in the workpiece coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBB</name>
<brief>Distance from block start in BCS</brief>
<description>Axial variable $AA_DTBB[ax] determines the axial distance from the start of the block in the basic coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTEW</name>
<brief>Distance from block end in WCS</brief>
<description>Axial variable $AA_DTEW[ax] determines the axial distance to the end of the block in the workpiece coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTEB</name>
<brief>Distance from block end in BCS</brief>
<description>Axial variable $AA_DTEB[ax] determines the axial distance to the end of the block in the basic coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTEPW</name>
<brief>Distance to go of a reciprocating axis in  WCS</brief>
<description>Axial variable $AA_DTEPW[ax] determines the axial distance to go for the infeed reciprocation in the workpiece coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTEPB</name>
<brief>Distance to go of a reciprocating axis in BCS</brief>
<description>Axial variable $AA_DTEPB[ax] determines the axial distance to go for the infeed reciprocation in the basic coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OSCILL_REVERSE_POS1</name>
<brief>Reciprocation reversal position 1</brief>
<description>$AA_OSCILL_REVERSE_POS1[X]
Supplies current reversal position 1 for reciprocation. In synchronized actions, the value of setting data $SA_OSCILL_REVERSE_POS1 is evaluated online. The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OSCILL_REVERSE_POS2</name>
<brief>Reciprocation reversal position 2</brief>
<description>$AA_OSCILL_REVERSE_POS2[X]
Supplies current reversal position 2 for reciprocation. In synchronized actions, the value of setting data $SA_OSCILL_REVERSE_POS2 is evaluated online. The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DELT</name>
<brief>Stored axial distance to go after DDTG</brief>
<description>$AA_DELT[X]
Stored axial distance to go in workpiece coordinate system after axial delete distance to go by a motion-synchronous action.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_FA</name>
<brief>Programmed      axial feedrate</brief>
<description>$P_FA[X]
Last programmed axial feedrate
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OVR</name>
<brief>Axial override</brief>
<description>$AA_OVR[&lt;axis&gt;]
Axial override for motion-synchronous actions.
Multiplicative override component, applied in addition to operator override, programmed override and transformational override.
The value is limited to max. 200%. If a value of &lt; 0.0 is entered, it is assumed to be 0 and alarm 14756 is output.
$AA_OVR[&lt;axis&gt;] must be rewritten in every Ipo cycle or else a value of 100% is applied.
Variable $AA_OVR[&lt;spindle&gt;] alters the spindle override.
The variable can be accessed only from motion-synchronous actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_PLC_OVR</name>
<brief>Axial override from PLC</brief>
<description>$AA_PLC_OVR[ax] supplies the axial override defined by the PLC.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TOTAL_OVR</name>
<brief>Overall axial override</brief>
<description>$AA_TOTAL_OVR[ax] supplies the overall axial override (PLC_OVR*NC_OVR).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_VC</name>
<brief>Additive axial feedrate override</brief>
<description>$AA_VC[X]
Additive axial feedrate override for motion-synchronous actions.
The override value must be rewritten in every Ipo cycle or else a value of 0 is applied.
A setting of 0 makes the override inoperative and is not applied to the override value.
The total feedrate cannot be made negative by an override value.
An upper limit is applied to ensure that the maximum axis velocities and acceleration rates cannot be exceeded.
The calculation of other feed components is not affected by $AA_VC.
The override values defined by machine data: $MN_OVR_FACTOR_LIMIT_BIN, $MN_OVR_FACTOR_FEEDRATE[30],
$MN_OVR_FACTOR_AX_SPEED[30] and $MN_OVR_FACTOR_SPIND_SPEED cannot be exceeded. The additive feedrate override is limited such that the resultant feedrate does not exceed the maximum override value of the programmed feedrate.
The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_VACTB</name>
<brief>Axis velocity in the BCS</brief>
<description>Axial variable $AA_VACTB[ax] determines the axis velocity in the basic coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_VACTW</name>
<brief>Axis velocity in the WCS</brief>
<description>Axial variable $AA_VACTW[ax] determines the axis velocity in the workpiece coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_VACTM</name>
<brief>Axis velocity in the MCS</brief>
<description>Axial variable $AA_VACTM[ax] determines the axis velocity on the setpoint side in the machine coordinate system. The variable also returns valid values for replacement and PLC axes.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_VACTM</name>
<brief>Axis velocity actual value in the MCS</brief>
<description>Axial variable $VA_VACTM[ax] determines the axis velocity actual value in the machine coordinate system. The variable supplies an undefined value if the encoder limit frequency is exceeded. When a spindle/axis disable is active, this variable returns the current velocity setpoint. If it is preferred to return the actual velocity in this situation, BIT3 in $MA_MISC_FUNCTION_MASK must be set.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LOAD</name>
<brief>Drive load</brief>
<description>$AA_LOAD[X]
Drive utilization in %
Only available for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_LOAD</name>
<brief>Drive load</brief>
<description>$VA_LOAD[X]
Drive utilization in %
Only available for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TORQUE</name>
<brief>Drive torque setpoint</brief>
<description>$AA_TORQUE[X]
Drive torque setpoint in Nm or actual force in N
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_TORQUE</name>
<brief>Drive torque setpoint</brief>
<description>$VA_TORQUE[X]
Drive torque setpoint in Nm or actual force in N
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_POWER</name>
<brief>Drive active power</brief>
<description>$AA_POWER[x]
Drive active power in W
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_POWER</name>
<brief>Drive active  power</brief>
<description>$VA_POWER[x]
Drive active power in W
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CURR</name>
<brief>Drive actual  current</brief>
<description>$AA_CURR[X]
Actual current of axis or spindle in A
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_CURR</name>
<brief>Drive actual  current</brief>
<description>$VA_CURR[X]
Actual current of axis or spindle in A
Available only for PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_DIST_TORQUE</name>
<brief>Disturbing torque</brief>
<description>$VA_DIST_TORQUE[X]
Normalized disturbing torque (disturbing torque/max. motor torque) = output signal of disturbance monitor in the drive - only available on PROFIdrive drives with telegram 203
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_VALVELIFT</name>
<brief>Hydraulic  valve lift</brief>
<description>$VA_VALVELIFT[X]
Actual valve lift in mm (for  hydraulic module only)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_PRESSURE_A</name>
<brief>Pressure at the A end of the hydraulic cylinder</brief>
<description>$VA_PRESSURE_A[X]
Pressure at A end of cylinder in bar (for hydraulic module only)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_PRESSURE_B</name>
<brief>Pressure at the B end of the hydraulic  cylinder</brief>
<description>$VA_PRESSURE_B[X]
Pressure at B end of cylinder in bar (for hydraulic module only)
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_DP_ACT_TEL</name>
<brief>PROFIBUS/PROFINET actual telegram from drive to NC</brief>
<description>$VA_DP_ACT_TEL[b,a]
b: Word index (16-bit access) in the PROFIBUS/PROFINET telegram
a: Machine axis
Actual value telegram contents - only available for PROFIBUS/PROFINET.
For details, please see telegram configuration in PROFIdrive or drive documentation
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_STAT</name>
<brief>Axis status</brief>
<description>The axial variable $AA_STAT[&lt;axis&gt;] determines the axis status. The status "Exact stop fine" is derived from the servo status. See also $AA_INPOS_STAT[&lt;axis&gt;].

The following values are possible:
0: No axis status available
1: Traversing movement pending
2: Axis has reached IPO end
3: Axis in position (exact stop coarse)
4: Axis in position (exact stop fine)

Note:
With a position default setting for an axis / spindle, the variable can still indicate the statuses 'Exact stop coarse / fine' during block change although the axis / spindle is starting to traverse.

Remedy: Also query $AC_TIMEC.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_SNGLAX_STAT</name>
<brief>Status of single axis</brief>
<description>$AA_SNGLAX_STAT[X]
Axis status:
0: Axis is not a single axis
1: Single axis in Reset
2: Single axis has ended
3: Single axis is interrupted
4: Single axis is active
5: Single axis alarm is active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_REF</name>
<brief>Axis is homed</brief>
<description>$AA_REF[X]
Axis status:
0: Axis is not homed
1: Axis is homed
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_TYP</name>
<brief>Axis type</brief>
<description>$AA_TYP[&lt;axis&gt;]
Axis type:
0: Axis in another channel
1: Program axis of own channel
2: Neutral axis
3: PLC axis
4: Oscillating axis
5: Neutral axis which is currently executing a JOG or homing motion
6: Following axis coupled via master value
7: Coupled motion following axis
8: Command axis
9: CompileCycles axis
10: Coupled slave axis (master-slave function)
11: Program axis which is currently executing a JOG or homing motion
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MASL_STAT</name>
<brief>Master-slave coupling status</brief>
<description>The current status of a master-slave coupling.
= 0: Axis is not a slave axis or no coupling is active.
&gt; 0: Coupling is active, the relevant machine axis number of the master axis is supplied.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SEARCH_MASLC</name>
<brief>Master-slave coupling status changed</brief>
<description>$P_SEARCH_MASLC[axis identifier]
The current status of a master-slave coupling has been changed during a block search.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_SEARCH_MASLD</name>
<brief>Master-slave position offset</brief>
<description>$P_SEARCH_MASLD[axis identifier]
Positional offset between master and slave axes calculated during block search as coupling was closed.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_FXS</name>
<brief>Status Desired state of "Travel to fixed stop"</brief>
<description>$AA_FXS[X]
Status desired state "Travel to fixed stop"
0: Axis not at limit stop
1: Fixed stop has been successfully approached
2: Approach to fixed stop has failed
3: Selection of travel to fixed stop active
4: Fixed stop has been detected
5: Deselection of travel to fixed stop active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_FXS</name>
<brief>Actual status  of "Travel to fixed stop"</brief>
<description>$VA_FXS[X]
Status actual state "Travel to fixed stop"
0: Axis not at limit stop
1: Fixed stop has been successfully approached
2: Approach to fixed stop has failed
3: Selection of travel to fixed stop active
4: Fixed stop has been detected
5: Deselection of travel to fixed stop active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_FXS_INFO</name>
<brief>Additional information with "Travel  to   fixed stop"</brief>
<description>$VA_FXS_INFO[X]
Additional information with "Travel to fixed stop" if $VA_FXS[]=2
0: No additional information available
1: No approach movement programmed
2: Programmed end position reached, motion completed
3: Abort by NC RESET (key reset)
4: Axis has exited fixed stop window
5: Torque reduction rejected by drive
6: PLC has cancelled enables
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_TORQUE_AT_LIMIT</name>
<brief>Status "Torque limit reached"</brief>
<description>$VA_TORQUE_AT_LIMIT[X]
"Torque limit reached" status
0: Torque limit not yet reached
1: Torque limit reached
In digital systems, the drive returns a status signal indicating whether the programmed torque limit has been reached.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_FOC</name>
<brief>Status Desired state of "ForceControl"</brief>
<description>$AA_FOC[X]
Status desired state "ForceControl"
0: ForceControl not active
1: ForceControl active modally
2: ForceControl active non-modally
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_FOC</name>
<brief>Actual status of "ForceControl"</brief>
<description>$VA_FOC[X]
Status actual state "ForceControl"
0: ForceControl not active
1: ForceControl active modally
2: ForceControl active non-modally
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_COUP_ACT</name>
<brief>Coupling type of a following axis/spindle</brief>
<description>$AA_COUP_ACT[C]
C: following axis C or S2: following spindle 2
It is possible to determine whether an axis / spindle is being used by a coupling. The coupling type is returned when the coupling is active. The system variable must be read out for the following axis / spindle.

Values:
 0: Axis / spindle is not coupled with a leading spindle / leading axis
1,2,3: Axis is tangentially tracked (TANG)
 4:     Synchronous spindle coupling (COUP)
 8:     Axis is in coupled-motion (TRAIL)
16:     Following axis in master value coupling (LEAD)
32:     Following axis for electronic gear (ELG)
64:     Axis is active in a gantry grouping
128,256,384: Axis is tangentially tracked (TANG with optimization)
512:    Following axis of the generic coupling (CP)

If the axis / spindle is a following axis / spindle in several couplings, the sum is returned as the value.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_EG_SYNFA</name>
<brief>Synchronization of the slave axis</brief>
<description>$AA_EG_SYNFA[a]
a: Following axis
Synchronous position of following axis
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$P_EG_BC</name>
<brief>Block change criterion with active coupling</brief>
<description>$P_EG_BC[a]
Block change criterion for EGONSYN, EGON, WAITC.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_EG_NUM_LA</name>
<brief>Number of  defined master axes</brief>
<description>$AA_EG_NUM_LA[a]
a: Following axis
Number of leading axes specified with EGDEF
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_EG_SYNCDIFF</name>
<brief>Synchronism difference</brief>
<description>$VA_EG_SYNCDIFF[a]
a: Following axis
Synchronism deviation
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_EG_SYNCDIFF_S</name>
<brief>Synchronous run difference with sign</brief>
<description>$VA_EG_SYNCDIFF_S[a]
a: Following axis
Signed synchronism deviation
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$AA_EG_AX</name>
<brief>Leading axis identifier</brief>
<description>$AA_EG_AX[n,ax]
An axis identifier of the nth active leading axis/spindle (counting starts at 0) is returned for the following axis/spindle ax. If the leading axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
 -  The stated coupling is not active
 -  n &gt;= $AA_EG_NUM_LA[ax] (= number of active leading axes of the following axis)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LEAD_SP</name>
<brief>Simulated lead value - position</brief>
<description>$AA_LEAD_SP[LW]
Simulated master value position
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LEAD_SV</name>
<brief>Simulated lead value - velocity</brief>
<description>$AA_LEAD_SV[LW]
Simulated master value     velocity
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LEAD_P_TURN</name>
<brief>Modulo compensation of the lead value</brief>
<description>$AA_LEAD_P_TURN[LW]
Current master value positional component lost as a result of modulo reduction. The actual master value position (used internally by the control) is

  $AA_LEAD_P[LW] + $AA_LEAD_P_TURN[LW].

If LW is a modulo axis, $AA_LEAD_P_TURN is an integral multiple of $MA_MODULO_RANGE. If LW is not a modulo axis, $AA_LEAD_P_TURN is always 0.

Example_1:
$MA_MODULO_RANGE[LW]=360
$AA_LEAD_P[LW]          =290
$AA_LEAD_P_TURN[LW] =720
The actual master value position (used internally by the control) is 1010.

Example_2:
$MA_MODULO_RANGE[LW]=360
$AA_LEAD_P[LW]          =290
$AA_LEAD_P_TURN[LW] =-360
The actual master value position (used internally by the control) is -70.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LEAD_P</name>
<brief>Current lead value position</brief>
<description>$AA_LEAD_P[LW]
Current master value position (modulo-reduced)
If LW is a modulo axis, the following always applies:
0 &lt;= $AA_LEAD_P[LW] &lt;= $MA_MODULO_RANGE[LW]
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LEAD_V</name>
<brief>Current lead value - velocity</brief>
<description>$AA_LEAD_V[LW]
Current master value velocity
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_SYNC</name>
<brief>Coupling status of the following axis</brief>
<description>$AA_SYNC[FA]
Coupling status of following axis
0 =&gt; No synchronism
1 =&gt; Coarse synchronism
2 =&gt; Fine synchronism
3 =&gt; Coarse and fine synchronism
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_IN_SYNC</name>
<brief>Synchronization status of the following axis</brief>
<description>$AA_IN_SYNC[FA]
Synchronization status of the following axis with master value coupling, ELG and generic coupling
1 =&gt; Synchronization in progress, i.e. following axis is being synchronized
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$P_COUP_OFFS</name>
<brief>Programmed position offset</brief>
<description>$P_COUP_OFFS[S2]
S2: spindle 2 or C: axis C
Programmed position offset from synchronous spindle (following spindle) to leading spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_COUP_OFFS</name>
<brief>Position offset on setpoint side</brief>
<description>$AA_COUP_OFFS[S2]
S2: spindle 2 or C: axis C
Position offset from synchronous spindle (following spindle) to leading spindle on setpoint side
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_COUP_OFFS</name>
<brief>Position offset on actual value side</brief>
<description>$VA_COUP_OFFS[S2]
S2: spindle 2 or C: axis C
Position offset from synchronous spindle (following spindle) to leading spindle on actual value side
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$VA_DPE</name>
<brief>Power enable for machine axis</brief>
<description>$VA_DPE[X1]
Status of power enable for a machine axis (status of the axial pulse enable). For PROFIdrive drives with a telegram type greater than 100: The status comes directly from the drive (message word, bit5) For other PROFIdrive drives: The status is modeled from further drive status signals (identical to $VA_SCE, see there)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_ACC</name>
<brief>Current axial acceleration value</brief>
<description>Current acceleration value of axis with single-axis interpolation.

  $AA_ACC = $MA_MAX_AX_ACCEL * progr.

acceleration override.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ACC_PERCENT</name>
<brief>Current acceleration value percentage</brief>
<description>Variable $AA_ACC_PERCENT supplies the current acceleration value of the axis for single-axis interpolation in percent.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_ACCLIMA</name>
<brief>Acceleration correction in the run-in</brief>
<description>Acceleration override set with ACCLIMA in preprocessing run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_VELOLIMA</name>
<brief>Velocity correction in the run-in</brief>
<description>Velocity override set with  VELOLIMA in preprocessing run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_JERKLIMA</name>
<brief>Jerk correction in the run-in</brief>
<description>Jerk override set with JERKLIMA in preprocessing run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ACCLIMA</name>
<brief>Acceleration   compensation</brief>
<description>Acceleration override set with ACCLIMA in main run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_VELOLIMA</name>
<brief>Velocity correction</brief>
<description>Velocity override set with VELOLIMA in main run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_JERKLIMA</name>
<brief>Jerk override</brief>
<description>Jerk override set with JERKLIMA in main run
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MOTEND</name>
<brief>Current axial end of motion criterion</brief>
<description>Current end of motion criterion with single-axis interpolation
1 = End of motion with exact stop FINE
2 = End of motion with exact stop COARSE
3 = End of motion at end of interpolation
4 = Block change in braking ramp of axis motion
5 = Block change in braking ramp of axis motion with tolerance window for setpoint
6 = Block change in braking ramp of axis motion with tolerance window for actual value
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_SCPAR</name>
<brief>Setpoint parameter set</brief>
<description>Current setpoint parameter set
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ESR_STAT</name>
<brief>ESR status of an axis</brief>
<description>Status of "Extended stop and retract", bit-coded:
BIT0: Generator mode is activated
BIT1: Retraction is activated
BIT2: Extended stop is activated
BIT3: DC-link undervoltage
BIT4: Generator minimum speed
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_ESR_ENABLE</name>
<brief>ESR enable</brief>
<description>$AA_ESR_ENABLE[X] = 1
Enabling of "Extended stop and retract"
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_ESR_TRIGGER</name>
<brief>Triggers a single-axis ESR</brief>
<description>$AA_ESR_TRIGGER[X] = 1
Activation of "NC-controlled ESR" for PLC-controlled axis (= single axis)
X: PLC-controlled axis
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_POLFA</name>
<brief>Programmed retraction position for single axis</brief>
<description>$AA_POLFA[X]
X: PLC-controlled axis (= single axis)
Supplies the programmed retraction position of the PLC-controlled axis
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_POLFA_VALID</name>
<brief>Status of   the  value of $AA_POLFA</brief>
<description>$AA_POLFA_VALID[X]
Supplies the current status of $AA_POLFA[X]
X: PLC-controlled axis (= single axis)
Return values:
0: Retraction not programmed
1: Retraction programmed as position
2: Retraction programmed as distance
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ALARM_STAT</name>
<brief>Display if alarms are present</brief>
<description>$AA_ALARM_STAT
Displays whether there are alarms present for a PLC-controlled axis. The coded, associated alarm responses can be used as a source for the "Extended stop and retract". The data is bit-coded so that, if necessary, individual states can also be masked or evaluated separately (bits not listed below supply a value of 0)
Bit2  = 1: NOREADY (active rapid deceleration + cancellation of servo enable)
Bit6  = 1: STOPBYALARM (ramp stop of all channel axes)
Bit9  = 1: SETVDI (VDI interface signal alarm is set)
Bit13 = 1: FOLLOWUPBYALARM (follow-up)
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AN_AXCTSWA</name>
<brief>Axis container rotation</brief>
<description>Is axis container rotation active ?

Example:
EVERY $AN_AXCTSWA[n] == TRUE DO M99

Read:
TRUE: An axis container rotation is currently being executed on the axis container with axis container name n
FALSE: Axis container rotation is not active.

The axis container name or the axis name of an axis in the axis container can be specified as the index.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AN_AXCTAS</name>
<brief>Axis container current position</brief>
<description>Axis container current position:
The current position of the axis container is returned for the axis container with the axis container name n. The value ranges from 0 to the maximum number of occupied slots in the axis container -1. In the basic position of the axis container, $AN_AXCTAS = 0  The axis container name or the axis name of an axis in the axis container can be specified as the index.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_AXCTSWA</name>
<brief>Channel enable for axis container rotation</brief>
<description>Enables axis container rotation in the channel.
TRUE: The channel has axis container rotation enabled for the axis container name n, and this rotation has not yet finished.
FALSE: The axis container rotation has finished.
The axis container name or the axis name of an axis in the axis container can be specified as the index.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_POSCTRL_MODE</name>
<brief>Position controller mode</brief>
<description>$VA_POSCTRL_MODE[X]
Position controller mode:
0 = Closed-loop position control
1 = Closed-loop speed control
2 = Stop
3 = Park
4 = Follow-up
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$VA_SCE</name>
<brief>Status of speed controller enable</brief>
<description>$VA_SCE[X1]
Status of speed controller enable
For SINAMICS drives with a telegram type greater than 100: The status comes directly from the drive (message word, bit11)
For other PROFIdrive drives: The status is modeled from further drive status signals (including status word1, bit2)
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_DIST</name>
<brief>Total traverse path</brief>
<description>Total traversing distance of axis in MCS in mm or degrees. The total traversing distance of the axis since the SRAM contents were last erased is added.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_TIME</name>
<brief>Total traversing time of the axis</brief>
<description>Total traversing time of axis in MCS in seconds. The total traversing time of the axis since the SRAM contents were last erased is added.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_COUNT</name>
<brief>Number of traversing operations</brief>
<description>Number of traversing operations of axis in MCS. The total number of traversing operations since the SRAM contents were last erased is stored.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_DIST_HS</name>
<brief>Total traversing distance at high velocity</brief>
<description>Total traversing distance of axis in MCS in mm or degrees at high velocity, i.e. at a velocity of &gt;= 80% of the maximum axis velocity. This value is stored in the SRAM.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_TIME_HS</name>
<brief>Total traversing time of the axis at high velocity</brief>
<description>Total traversing time of axis in seconds at high velocity in MCS, i.e. at a velocity of &gt;= 80% of the maximum axis velocity. This value is stored in the SRAM.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_TRAVEL_COUNT_HS</name>
<brief>No. of traversing operations at high       velocity</brief>
<description>Number of traversing operations of axis in MCS at high velocity, i.e. at a velocity of &gt;= 80% of the maximum axis velocity. This value is stored in the SRAM.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_JERK_TOT</name>
<brief>Total axial jerk</brief>
<description>Total axial jerk in m/s^3. The total jerk applied to the axis is added up and stored in the SRAM.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_JERK_TIME</name>
<brief>Total traversing time of the axis with jerk</brief>
<description>Total traversing time of axis in seconds in MCS with jerk. The total time period for which the axis traverses with jerk is added up and stored in the SRAM.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_JERK_COUNT</name>
<brief>Number of traversing operations with jerk</brief>
<description>Number of traversing operations executed by axis in MCS with jerk. This value is stored in the SRAM.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AC_RPVALID</name>
<brief>Repos position valid</brief>
<description>$AC_RPVALID[axis identifier] returns TRUE if a valid Repos position, which can be interrogated with $AC_RETPOINT[axis identifier], is available for this axis. Valid Repos positions are generally available while system and user ASUBs are being processed.

However, this is not the case in the following situations:
- The ASUB activates a modified radius when tool radius compensation is active. $AC_RPVALID then returns FALSE for geometry axes while the ASUB is running. The newly calculated Repos positions only become available with the approach blocks generated by the REPOS command.
- The end position of the axis was last specified by the main run (FC18, synchronized actions, reciprocation, transfer from another channel after axis replacement).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_SYNCDIFF</name>
<brief>Synchronism deviation between actual values</brief>
<description>$VA_SYNCDIFF[FA]
FA: Following axis/following spindle
Deviation in synchronism between actual values for LEAD, TRAIL, ELG and COUP. The deviation in synchronism between actual values is the deviation in distance between the servo actual position of the following axis/following spindle and a point calculated (according to the coupling rule) from the servo actual position of the leading axis/leading spindle.

   $VA_SYNCDIFF[FA] = $VA_IM[FA] - K($VA_IM[LA])

   K: Coupling rule
   LA: Leading axis/leading spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_SYNCDIFF</name>
<brief>Synchronism deviation between setpoints</brief>
<description>$AA_SYNCDIFF[FA]
FA: Following axis/following spindle
Deviation in synchronism between setpoints for LEAD, TRAIL, ELG and COUP. The deviation in synchronism between setpoints is the deviation in distance between the setpoint position of the following axis/following spindle and a point calculated (according to the coupling rule) from the setpoint position of the leading axis/leading spindle.

   $AA_SYNCDIFF[FA] = $AA_IM[FA] - K($AA_IM[LA])
   K: Coupling rule
   LA: Leading axis/leading spindle
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_SYNCDIFF_STAT</name>
<brief>Status of synchronism deviation between actual values</brief>
<description>VA_SYNCDIFF_STAT[FA]
FA: Following axis/following spindle
Status of synchronism deviation between actual values:
-4: Reserved
-3: No valid value in $VA_SYNCDIFF, tangential control ( not TANG(... "P") )
-2: No valid value in $VA_SYNCDIFF, master value coupling and simulated MV
-1: No valid value in $VA_SYNCDIFF
 0: No valid value in $VA_SYNCDIFF, coupling not active
 1: Valid value in $VA_SYNCDIFF
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_SYNCDIFF_STAT</name>
<brief>Status synchron. dev. between setpoints</brief>
<description>$AA_SYNCDIFF_STAT[FA]
FA: Following axis/following spindle
Status of synchronism deviation between setpoints:
-4: No valid value in $AA_SYNCDIFF, coupled motion from part program
-3: Reserved
-2: Reserved
-1: No valid value in $AA_SYNCDIFF
 0: No valid value in $AA_SYNCDIFF, coupling not active
 1: Valid value in $AA_SYNCDIFF
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OSCILL_BREAK_POS1</name>
<brief>Reciprocation interruption position  1</brief>
<description>$AA_OSCILL_BREAK_POS1[&lt;axis&gt;]
The current approach to reversal position 1 is finished at this position or the last approach to reversal position 1 was finished at this position (reversal position 2 currently being approached). $AA_OSCILL_BREAK_POS1[&lt;axis&gt;] is not equal to $AA_OSCILL_REVERSE_POS1[&lt;axis&gt;] if the reciprocation motion was interrupted by an external signal (PLC). The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_OSCILL_BREAK_POS2</name>
<brief>Reciprocation interruption position 2</brief>
<description>$AA_OSCILL_BREAK_POS2[&lt;axis&gt;]
The current approach to reversal position 2 is finished at this position or the last approach to reversal position 2 was finished at this position (reversal position 1 currently being approached). $AA_OSCILL_BREAK_POS2[&lt;axis&gt;] is not equal to $AA_OSCILL_REVERSE_POS2[&lt;axis&gt;] if the reciprocation motion was interrupted by an external signal (PLC). The variable can be accessed only from synchronized actions.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_BCS_OFFSET</name>
<brief>Total axis offsets</brief>
<description>Axial variable $AA_BCS_OFFSET[ax] is used to determine the total axis offsets for an axis. The total consists of the handwheel (DRF) offset, the overlaid movement ($AA_OFF[ax]) and the external work offset. This offset is included in the BCS. The MCS is displaced in relation to the BCS according to the offset.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CHANNO</name>
<brief>Axis in the channel</brief>
<description>This variable returns the number of the channel in which the axis is being interpolated. If value 0 is output, the axis could not be assigned to a channel.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IW_CORR</name>
<brief>Actual PCS-Position of one axis incl. overlay rates</brief>
<description>The axial variable $AA_IW_CORR[ax] determines the actual setpoint value of the workpiece coordinate system (WCS) for the respective axis. The setpoint value corresponds to the initial value of the interpolator for the actual interpolation cycle. As opposed to $AA_IW, this value contains the axial overlay shares (DRF, AA_OFF, external WO, retraction etc. ).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IEN_CORR</name>
<brief>Actual FCS-Position of one axis incl. overlay rates</brief>
<description>The axial variable $AA_IEN_CORR[ax] calculates the actual interpolator position of the adjustable coordinate system (ACS) for the specified axis. See also $AA_IW_CORR[ax]. The ACS-Value contains any axial overlay rate (DRF, AA_OFF, external Frame, etc. ).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IBN_CORR</name>
<brief>Actual FCS-Position of one axis incl. overlay rates</brief>
<description>The axial variable $AA_IBN_CORR[ax] calculates the actual interpolator position of the foot coordinate system (FCS) for the specified axis. See also $AA_IW_CORR[ax]. The FCS-Value contains any axial overlay rate (DRF, $AA_OFF, external Frame, etc. ).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IB_CORR</name>
<brief>Actual BCS-Position of one axis incl. overlay rates</brief>
<description>The axial variable $AA_IB_CORR[ax] calculates the actual interpolator position of the base coordinate system (BCS) for the specified axis. See also $AA_IW_CORR[ax]. The BCS-Value contains any axial overlay rate (DRF, $AA_OFF, external Frame, etc. ).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_TYPE</name>
<brief>Axis type</brief>
<description>$AA_TYPE[&lt;axis&gt;]
Axis type:
0: Type is not ascertainable
1: NC-Program axis
2: Neutral axis
3: PLC axis
4: Oscillating axis
5: Neutral axis which is currently executing a JOG or homing motion
6: Following axis coupled via master value
7: Coupled motion following axis
8: Command axis
9: CompileCycles axis
10: Coupled slave axis (master-slave function)
11: Program axis which is currently executing a JOG or homing motion
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTSW</name>
<brief>Distance from start of motion in PCS</brief>
<description>Axial variable $AA_DTSW[ax] determines the axial distance (with algebraic sign) from the start of motion in the workpiece coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTSB</name>
<brief>Distance from start of motion in BCS</brief>
<description>Axial variable $AA_DTSB[ax] determines the axial distance (with algebraic sign) from the start of motion in the basic coordinate system for positioning and synchronized axes. The programmed position is the only factor used to calculate the distance. If the axis is a coupled axis, the position component derived from the axis coupling is not considered.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_COUP_CORR</name>
<brief>Generic coupling: Compensation value for 'Correct synchronism difference'</brief>
<description>The variable $AA_COUP_CORR[Sn] with spindle Sn (n: spindle number), example S2: spindle 2 or C: axis C serves to execute the "Correct synchronism error" functionality, and provides the compensation value for the position offset for generic couplings with CPFRS="MCS" (or CPSETTYPE="COUP"). For the duration (MD 30455 MISC_FUNCTION_MASK, bit 7) of the activation of the NC/PLC interface signal &lt;Synchronlauf_nachfuehren/&gt; (Correct synchronism error) for the following spindle in active coupling, the actual values of this spindle are compared with the setpoint values. The difference is the compensation value that can be read with the system variables $AA_COUP_CORR. If the compensation value is known, this value can also be written directly into the system variable. The NC/PLC interface signal &lt;Synchronlauf_nachfuehren/&gt; (Correct synchronism error) should not be set in this case. The variable becomes effective only if a CP coupling has been activated for the spindle with CPSETTYPE="COUP" or CPFRS="MCS". If the axis is not a configured spindle, the writing is ignored. In the coupling module, the variable $AA_COUP_CORR is considered, and it corrects the setpoint values. The compensation value is automatically deleted for reference point approach and zero mark synchronization of spindles. The system variable then returns the value 'zero'. Depending on the application, the compensation value can also be deleted at an earlier point in time by writing the value '0' to the variables.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_AXCHANGE_TYP</name>
<brief>axchange axistype</brief>
<description>$AA_AXCHANGE_TYP[&lt;axis&gt;]
Type of axis with regard to axis replacement
0: Axis assigned to NC program
1: Axis assigned to PLC, or active as command or reciprocating axis
2: Other channel has right to interpolate
3: Neutral axis
4: Neutral axis controlled by PLC
5: Other channel has right to interpolate, axis requested for NC program
6: Other channel has right to interpolate, axis requested as neutral axis
7: Axis is PLC axis or active as command or reciprocating axis, axis requested for NC program
8: Axis is PLC axis or active as command or reciprocating axis, axis requested as neutral axis.
9: Firmly assigned PLC axis, in neutral axis status
10: Firmly assigned PLC axis, controlled by the PLC, in neutral axis status
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_AXCHANGE_STAT</name>
<brief>axchange axis state</brief>
<description>$AA_AXCHANGE_STAT[&lt;Axis&gt;]
Axis status regarding axis interchange:
0: Axis can be interchanged
1: Axis is assigned to the channel, but can become the PLC, command or reciprocating axis
2: Axis cannot be interchanged
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_INPOS_STAT</name>
<brief>State of the programmed position</brief>
<description>The variable $AA_INPOS_STAT[&lt;axis&gt;] returns the status of a programmed axis position. The indexing position is used for indexing axes. In the case of spindles, $AA_INPOS_STAT refers to the spindle position of SPOS/SPOSA/M19. In speed control mode M3/M4/M5/SPCOF and after M70 value 0 is always read. $AA_INPOS_STAT always refers to the programmed position. The programmed position cannot be reached if end positions change during interpolation (delete distance-to-go, NC Stop, REPOS). At zero speed, the variable then gives the value 0. Axis positions can be programmed through the part program, synchonized actions, FC18 or as indexing positions.

The variable returns the following values:
0: No status available (axis / spindle outside the programmed position)
1: Awaiting traversing movement
2: Position reached via setpoint
3: Position reached via 'Exact stop coarse'
4: Position reached via 'Exact stop fine'

Note 1: The status referring to the programmed position is independent of the operating mode (AUTOMATIC, JOG, MDI, ...)
Note 2: If additional position components (e.g. following axis couplings, corrections, compensations etc.) are inserted, then the programmed position is no longer identical with the machine axis position. During the period of additional traversings, exact stop signals are deleted, and the status can fall to the value 1.
Note 3: When approaching a position with tight exact stop limits, overshooting can cause the status to drop briefly again in relation to the dynamics of an axis / spindle.
Note 4: Function-dependent, the signals 'Spindle in position' and 'Indexing axis in position' are output on the axial VDI interface.
Note 5: When determining the status of a path axis with G643/G644/G645, the variable $AA_INPOS_STAT can remain at the value '1' on account of smoothing behavior during the path motion. Remedy: Use variable $AA_STAT (however the variable $AA_STAT does not check whether a programmed position has been reached).
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ENC_ZERO_MON_ERR_CNT</name>
<brief>Zero mark monitoring error counter</brief>
<description>Incremental and distance-coded measuring systems:
$VA_ENC_ZERO_MON_ERR_CNT[n,ax] contains the current number of detected zero mark errors.
Absolute measuring systems ($MA_ENC_TYPE=4):
NCK.71 and higher: $VA_ENC_ZERO_MON_ERR_CNT[n,ax] contains the current number of detected limit violations by the comparison between the absolute and incremental encoder tracks (limit values see MDs $MA_ENC_ABS_ZEROMON_WARNING and $MA_ENC_ABS_ZEROMON_INITIAL)
NCK.64 and higher: $VA_ENC_ZERO_MON_ERR_CNT[n,ax] contains the current number of deviations in 1/2 coarse increments between the absolute and incremental encoder tracks.

$VA_ENC_ZERO_MON_ERR_CNT[n,ax] is initialized to 0 during power ON. It is not reset by RESET.

The indices mean:
n: Number of encoder
ax: Machine axis
(See also $MA_ENC_ZERO_MONITORING and alarm 25020)
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ABSOLUTE_ENC_ERR_CNT</name>
<brief>Error counter for absolute encoder</brief>
<description>Absolute measuring systems ($MA_ENC_TYPE=4), only for SIMODRIVE 611D:
This counter is incremented if any new errors have been recognized during transmission of absolute values. This can be used to observe the transmission of absolute values.

Other systems/drives:
Variable returns 0.

$VA_ABSOLUTE_ENC_ERR_CNT[n,ax] is initialized to 0 during Power ON. RESET does not cause a reset.

The indices mean:
n: Number of encoder
ax: Machine axis
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ABSOLUTE_ENC_STATE</name>
<brief>Absolute encoder interface status</brief>
<description>Absolute measuring systems ($MA_ENC_TYPE=4), only for SIMODRIVE 611D:
The axial variable $VA_ABSOLUTE_ENC_STATE[n,ax] determines the last occurrence of an error state of the absolute encoder interface.

The indices mean:
n: Number of encoder
ax: Machine axis

Details:
Bit 0   Interface active
Bit 1   Error during parity check
Bit 2   Error bit Alarm
Bit 3   Error bit CRC error
Bit 4   Start bit for EnDat transmission missing

(see also Description of Functions 'Measuring System Monitoring'

Other systems/drives:
Variable returns 0.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_DIAM_STAT</name>
<brief>Status of the diameter programming in the preprocessing</brief>
<description>The system variable $P_DIAM_STAT[AX] returns the programmed status of the diameter programming in the channel.

The programmed status of the diameter programming is bit-coded:
BIT0 = 0: Diameter programming not active
BIT0 = 1: Diameter programming active
Note : The following bits only have a meaning that can be evaluated if BIT0 = 1:
BIT1 = 0: Channel-specific diameter programming active
BIT1 = 1: Axis-specific diameter programming active
BIT2 = 0: Absolute and incremental dimensions in the diameter
BIT2 = 1: Absolute dimension in the diameter, incremental dimension in the radius
BIT3 = 0: DIAMCYCOF not active
BIT3 = 1: DIAMCYCOF active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_DIAM_STAT</name>
<brief>Status of the diameter programming in the main run</brief>
<description>The system variable $AA_DIAM_STAT[AX] returns the active main run status of the diameter programming in the channel.

The active status of the diameter programming is bit-coded:
BIT0 = 0: Diameter programming not active
BIT0 = 1: Diameter programming active
Note : The following bits only have a meaning that can be evaluated if BIT0 = 1:
BIT1 = 0: Channel-specific diameter programming active
BIT1 = 1: Axis-specific diameter programming active
BIT2 = 0: Absolute and incremental dimensions in the diameter
BIT2 = 1: Absolute dimension in the diameter, incremental dimension in the radius
BIT3 = 0: DIAMCYCOF not active
BIT3 = 1: DIAMCYCOF active
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_SCC_STAT</name>
<brief>Status of the G96/G961/G962 assignment in the preprocessing</brief>
<description>The system variable $P_SCC_STAT[AX] returns the preprocessing status of the G96/G961/G962 assignment in the channel, this has been configured or programmed by SCC[AX] .

The status of the G96/G961/G962 assignment is bit-coded:
BIT0 = 0: Axis is not assigned to G96/G961/G962
BIT0 = 1: Axis is assigned to G96/G961/G962
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_SCC_STAT</name>
<brief>Status of the G96/G961/G962 assignment in the main run</brief>
<description>The system variable $AA_SCC_STAT[AX] returns the main run status of the G96/G961/G962 assignment in the channel, this has been configured or programmed by SCC[AX].

The status of the G96/G961/G962 assignment is bit-coded:
BIT0 = 0: Axis is not assigned to G96/G961/G962
BIT0 = 1: Axis is assigned to G96/G961/G962
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPNACTFA</name>
<brief>Number of active following axes/spindles</brief>
<description>The system variable $AA_CPNACTFA[ax] returns the number of active couplings (following axes/spindles) in which the stated axis ax is active as a leading axis/spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPFCMDPT</name>
<brief>Axis setpoint position across all coupling components</brief>
<description>The system variable $AA_CPFCMDPT[ax] returns the coupling component of the axis setpoint position. This component is the sum of all dependent components of the axis position of all leading axes/spindles of the following axis/spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPFCMDVT</name>
<brief>Axis setpoint velocity across all coupling components</brief>
<description>The system variable $AA_CPFCMDVT[ax] returns the coupling component of the axis setpoint velocity. This component is the sum of all dependent components of the axis velocity of all leading axes/spindles of the following axis/spindle
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPFREQV</name>
<brief>Required velocity of the coupling</brief>
<description>The system variable $AA_CPFREQV[ax] returns the velocity required by the leading axes/spindles.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPNDEFLA</name>
<brief>Number of defined master axes</brief>
<description>The system variable $AA_CPNDEFLA[ax] returns the number of leading axes/spindles defined for the following axis/spindle ax.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPNACTLA</name>
<brief>Number of active leading axes</brief>
<description>The system variable $AA_CPNDEFLA[ax] returns the number of leading axes/spindles active for the following axis/spindle ax.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPFACCT</name>
<brief>Axis setpoint acceleration across all coupling components</brief>
<description>The system variable $AA_CPFACCT[ax] returns the coupling component of the axis setpoint acceleration. This component is the sum of all dependent components of the axis acceleration of all leading axes/spindles of the following axis/spindle
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPFRS</name>
<brief>Reference system of the coupling</brief>
<description>The system variable returns the reference system of the coupling for the following  axis/spindle
"BCS" = basic coordinate system
"MCS" = machine coordinate system
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPFMSON</name>
<brief>Synchronization mode when the coupling is switched on</brief>
<description>The system variable $AA_CPFMSON[ax] returns the synchronization mode of the following axis/spindle ax when the coupling is switched on. The synchronization mode determines the synchronization response when the coupling is switched on. See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPFMON</name>
<brief>Response of the following axis when the coupling is switched on</brief>
<description>The system variable returns the response of the following axis/spindle when the coupling is switched on
"STOP" - Following axis/spindle is stopped
"CONT" - Active motion of the following axis/spindle is accepted as the starting motion
"ADD" - Active motion is retained as overlaid motion
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPFMOF</name>
<brief>Response of the following axis when the coupling is switched off</brief>
<description>The system variable returns the response of the following axis/spindle when the coupling is switched off
"STOP" - Following axis/spindle is stopped
"CONT" - Active motion of the following axis/spindle is retained
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPMRESET</name>
<brief>Status of the coupling after reset</brief>
<description>The system variable $AA_CPMRESET[ax] returns the status of the coupling for the following axis/spindle after reset or program end
"NONE" - Current status is retained
"ON" - Coupling is activated
"OFF" - Coupling is deactivated
"DEL" - Coupling is deactivated and deleted
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPMSTART</name>
<brief>Status of the coupling after program start</brief>
<description>The system variable $AA_CPMSTART[ax] returns the status of the coupling for the following axis/spindle ax after program start
"NONE" - Current status is retained
"ON" - Coupling is activated
"OFF" - Coupling is deactivated
"DEL" - Coupling is deactivated and deleted
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPMSTARTPRT</name>
<brief>Status of the coupling after SERUPRO start</brief>
<description>The system variable $AA_CPMSTART[ax] returns the status of the coupling for the following axis/spindle ax after SERUPRO start
"NONE" - Current status is retained
"ON" - Coupling is activated
"OFF" - Coupling is deactivated
"DEL" - Coupling is deactivated and deleted
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPSETTYPE</name>
<brief>Default coupling type</brief>
<description>The system variable $AA_CPSETTYPE[ax] returns the default coupling type for the following axis/spindle ax.

See the Generic Coupling documentation for further details.
"NONE"
"TRAIL"
"LEAD"
"EG"
"COUP"
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$AA_CPBC</name>
<brief>Block change criterion</brief>
<description>The system variable $AA_CPBC[ax] returns the active block change criterion when the coupling of the following axis/spindle ax is switched on.
"NONE" = Block change takes place irrespective of the coupling state
"FINE" = Block change does not take place until synchronism "fine" is reached
"COARSE" = Block change does not take place until synchronism "coarse" is reached
"IPOSTOP" = Block change does not take place until setpoint synchronism is reached
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPFACT</name>
<brief>Active coupling types of a following axis/spindle</brief>
<description>The active coupling types for the axis/spindle ax are returned as bit-codes
0 = No active coupling
Bit 0,1 = TANG
Bit 2 = 1 ('H04') COUP
Bit 3 = 1 ('H08') TRAIL
Bit 4 = 1 ('H10') LEAD
Bit 5 = 1 ('H20') EG
Bit 6 = 1 ('H40') GANTRY
Bit 7,8 = 1 (H180) TANG with option P
Bit 9 = 1 ('H200') CP, generic coupling
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$AA_CPDEFLA</name>
<brief>Specifies the nth defined leading axis/spindle</brief>
<description>$AA_CPDEFLA[ax,n]
An axial identifier of the nth defined leading axis/spindle (counting starts at 1) is returned for the following axis/spindle ax. If the leading axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
  - The stated coupling is not defined
  - The leading axis/spindle that was found is not known in the channel
  - n == 0
  - n &gt; $AA_CPNDEFLA[ax] (= number of defined leading axes of the following axis)
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$AA_CPACTLA</name>
<brief>Specifies the nth active leading axis/spindle</brief>
<description>$AA_CPACTLA[ax,n]
An axis identifier of the nth active leading axis/spindle (counting starts at 1) is returned for the following axis/spindle ax. If the leading axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
  -  The stated coupling is not active
  - The leading axis/spindle that was found is not known in the channel
  -  n == 0
  -  n &gt; $AA_CPNACTLA[ax] (= number of active leading axes of the following axis)
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$AA_CPACTFA</name>
<brief>Specifies the nth active following axis/spindle</brief>
<description>$AA_CPACTFA[ax,n]
An axis identifier of the following axis/spindle of the nth coupling (counting starts at 1) in which the axis ax is active as a leading axis/spindle is returned for the leading axis/spindle ax. If the following axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
   -  The following axis/spindle that was found is not known in the channel
   -  n == 0
   -  n &gt; $AA_CPNACTFA[ax] (= number of active couplings of the axis as a leading axis)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_CPFACT</name>
<brief>Coupling type of a following axis/spindle</brief>
<description>$PA_CPFACT[ax]
It is possible to determine whether the axis / spindle ax is being used by a coupling. The coupling type is returned when the coupling is active. The system variable must be read out for the following axis / spindle.
Bit0, Bit1 tangential following active, TANG
Bit2 = 1 ('H04')   Synchronous spindle active, COUP
Bit3 = 1 ('H08')   Coupled motion active, TRAIL
Bit4 = 1 ('H10')   Master value coupling active, LEAD
Bit5 = 1 ('H20')   Electronic gear active, EG
Bit6 = 1 ('H40')   Gantry grouping active, GANTRY
Bit7, Bit8 Tangential following active, TANG (with optimization)
Bit9 = 1 ('H200')  Generic coupling active, CP
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_CPFPOSSTAT</name>
<brief>Validity of the synchronized position and stop position</brief>
<description>$PA_CPFPOSSTAT[ax]
The validity of the synchronized position (Bit0) and the stop position (Bit1) can be read for the axis / spindle ax if the coupling is active.
Bit0 = 1 ('H01')   Synchronized position is valid
Bit1 = 1 ('H02')   Stop position is valid
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPSETTYPE</name>
<brief>Default coupling type</brief>
<description>Returns the default coupling type for the axis/spindle ax.
$PA_CPSETTYPE[ax]
"NONE"
"TRAIL"
"LEAD"
"EG"
"COUP"
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_CPNACTFA</name>
<brief>Number of active following axes/spindles</brief>
<description>Returns the number of active following axes/spindles for the leading axis/spindle ax.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_CPNDEFLA</name>
<brief>Number of defined leading axes/spindles</brief>
<description>Returns the number of defined leading axes/spindles for the axis/spindle ax.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$PA_CPNACTLA</name>
<brief>Number of active leading axes/spindles</brief>
<description>Returns the number of active leading axes/spindles for the axis/spindle ax.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPFRS</name>
<brief>Coordinate reference</brief>
<description>The coordinate reference of the defined axis/spindle coupling is returned for the axis/spindle ax
"NONE" = No coupling active
"BCS" = Basic coordinate system
"MCS" = Machine (coordinate system)
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPFMSON</name>
<brief>Synchronization response at switch on</brief>
<description>The synchronization mode for the axis/spindle ax is returned when the coupling is switched on.
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPFMON</name>
<brief>Response of the following axis when the coupling is switched on</brief>
<description>The system variable returns the response of the following axis/spindle when the coupling is switched      on
"STOP" - Following axis/spindle is stopped
"CONT" - Active motion of the following axis/spindle is accepted as the starting motion
"ADD" - Active motion of the following axis/spindle is retained as overlaid motion
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPFMOF</name>
<brief>Response of the following axis when the coupling is switched off</brief>
<description>The system variable returns the response of the following axis/spindle when the coupling is switched off
"STOP" - Following axis/spindle is stopped
"CONT" - Active motion of the following axis/spindle is retained
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPMRESET</name>
<brief>Status of the coupling after reset</brief>
<description>The system variable $PA_CPMRESET[ax] returns the status of the coupling for the following axis/spindle after reset or program end
"NONE" - Current status is retained
"ON" - Coupling is activated
"OFF" - Coupling is deactivated
"DEL" - Coupling is deactivated and deleted
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPMSTART</name>
<brief>Status of the coupling after program start</brief>
<description>The system variable $PA_CPMSTART[ax] returns the status of the coupling for the following axis/spindle ax after program start
"NONE" - Current status is retained
"ON" - Coupling is activated
"OFF" - Coupling is deactivated
"DEL" - Coupling is deactivated and deleted
See the Generic Coupling documentation for further details.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$PA_CPBC</name>
<brief>Block change criterion</brief>
<description>The system variable $PA_CPBC[ax] returns the active block change criterion when the coupling of the following axis/spindle ax is switched on.
"NONE" = Block change takes place irrespective of the coupling state
"FINE" = Block change does not take place until synchronism "fine" is reached
"COARSE" = Block change does not take place until synchronism "coarse" is reached
"IPOSTOP" = Block change does not take place until setpoint synchronism is reached
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$PA_CPDEFLA</name>
<brief>Specifies the nth defined leading axis/spindle</brief>
<description>$PA_CPDEFLA[ax,n]
An axis identifier of the nth defined leading axis/spindle (counting starts at 1) is returned for the axis/spindle ax. If the leading axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
  -  The stated coupling is not defined in the channel
  -  n == 0
  -  n &gt; number of leading axes of the following axis
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$PA_CPACTLA</name>
<brief>Specifies the nth active leading axis/spindle</brief>
<description>$PA_CPACTLA[ax,n]
An axis identifier of the nth active leading axis/spindle (counting starts at 1) is returned for the following axis/spindle ax. If the leading axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
  -  The specified coupling is not active in the channel
  -  n == 0
  -  n &gt; number of active leading axes of the following axis
</description>
</parameter>

<parameter type="AXIS" dim="2">
<name>$PA_CPACTFA</name>
<brief>Specifies the nth active following axis/spindle</brief>
<description>$PA_CPACTFA[ax,n]
An axis identifier of the following axis/spindle of the nth coupling (counting starts at 1), in which the axis ax is active as a leading axis/spindle, is returned for the leading axis/spindle ax. If the following axis is a geometry axis, the geometry axis identifier is returned, otherwise the channel axis identifier.

NO_AXIS is returned in the following cases:
  -  n == 0
  -  n &gt; number of active couplings of the axis as leading axis in the channel
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_DEPAXO</name>
<brief>Dependence on other axes</brief>
<description>The variable $AA_DEPAXO[AX] returns an axis code for the stated axis AX, which contains all machine axes with a mechanical dependence on the stated axis.

A dependency is produced by:
  Active coupling modules, the following axis is dependent on the leading axis.
  Active transformations, output axes of the transformation are dependent on the input axes of the transformation.
  Closed gantry groupings, the slave axes are dependent on the master axis.
  The given axis itself is also returned in the axis code.
The axis code indicates how the machine data $MC_AXCONF_MACHAX_USED refers not directly to the machine axes but to the logical NCK machine axis image ($MN_AXCONF_LOGIC_MACHAX_TAB).
  Bit 0 = 0   There is no dependence on the logical machine axis AX1
  Bit 0 = 1   There is a dependence on the logical machine axis AX1
  Bit 1 = 0   There is no dependence on the logical machine axis AX2
  Bit 1 = 1   There is a dependence on the logical machine axis AX2
  and so on.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_FIX_POINT_SELECTED</name>
<brief>Selected fixed point</brief>
<description>$AA_FIX_POINT_SELECTED[&lt;Axis&gt;]
= 0: No fixed point selected
&gt; 0: Number of the selected fixed point
Via the NC/PLC interface signal &lt;Aktiviere_Festpunktfahren_inJOG/&gt; (Activate fixed point approach in JOG) you can activate the fixed point approach in the operating mode JOG. Bits 0-2 indicate the number of the fixed point to be approached. Activation is confirmed via the NC/PLC interface signal &lt;Festpunktfahren_in_JOG_aktiv/&gt; (Fixed point approach in JOG active). The bits indicate the number of the fixed point being approached.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_ON_FIX_POINT</name>
<brief>Number of the fixed point at which the axis is currently located</brief>
<description>$AA_ON_FIX_POINT[&lt;Axis&gt;]
= 0: Axis is not at a fixed point
&gt; 0: Number of the fixed point at which the axis currently stands (the fixed point position is the current position).
This is independent of the way this position was reached.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_ENC1_COMP_VAL</name>
<brief>EEC compensation value encoder 1</brief>
<description>The axial variable $VA_ENC1_COMP_VAL[ax] determines the current compensation value of the measuring system error compensation (encoder 1) in the machine coordinate system (MCS).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_ENC2_COMP_VAL</name>
<brief>EEC compensation value encoder 2</brief>
<description>The axial variable $VA_ENC2_COMP_VAL[ax] determines the current compensation value of the measuring system error compensation (encoder 2) in the machine coordinate system (MCS).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_CEC_COMP_VAL</name>
<brief>CEC compensation value</brief>
<description>The axial variable $VA_CEC_COMP_VAL[ax] determines the current compensation value of the sag compensation in the machine coordinate system (MCS).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_TEMP_COMP_VAL</name>
<brief>TEMP compensation value</brief>
<description>The axial variable $VA_TEMP_COMP_VAL[ax] determines the current compensation value of the temperature compensation in the machine coordinate system (MCS).
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREB</name>
<brief>Total deceleration path in the BCS</brief>
<description>$AA_DTBREB[ax]
Total deceleration path of the axis ax in the BCS. The value is the estimated deceleration path of the axis to standstill.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREB_CMD</name>
<brief>Command component of the total deceleration path in the BCS</brief>
<description>$AA_DTBREB_CMD[ax]
Command component of the total deceleration path of the axis ax in the BCS. The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREB_CORR</name>
<brief>Correction component of the total deceleration path in the BCS</brief>
<description>$AA_DTBREB_CORR[ax]
Correction component of the total deceleration path of the axis ax in the BCS. The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREB_DEP</name>
<brief>Coupling component of the total deceleration path in the BCS</brief>
<description>$AA_DTBREB_DEP[ax]
Coupling component of the total deceleration path of the axis ax in the BCS.  The  value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREM</name>
<brief>Total deceleration path in the Machine</brief>
<description>$AA_DTBREM[ax]
Total deceleration path of the axis ax in the Machine.  The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREM_CMD</name>
<brief>Command component of the total deceleration path in the Machine</brief>
<description>$AA_DTBREM_CMD[ax]
Command component of the total deceleration path of the axis ax in the Machine. The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREM_CORR</name>
<brief>Correction component of the total deceleration path in the Machine</brief>
<description>$AA_DTBREM_CORR[ax]
Correction component of the total deceleration path of the axis ax in the Machine. The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_DTBREM_DEP</name>
<brief>Coupling component of the total deceleration path in the Machine</brief>
<description>$AA_DTBREM_DEP[ax]
Coupling component of the total deceleration path of the axis ax in the Machine. The value is the estimated deceleration path of the axis to standstill
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_BRAKE_CONDB</name>
<brief>Context-sensitive conditions for interpolator stop in the BCS</brief>
<description>The axial variable $AA_BRAKE_CONDB[ax] indicates the braking requests (conditions) pending on the axis / spindle to the interpolator stop. A braking request consists of a collision direction referring to a coordinate axis in the BCS, and a braking priority referring to the machining level. If the axis / spindle receives a new braking request due to these conditions, bit 0 is set in $AA_BRAKE_STATE[X] (in the next IPO cycle).

Bits 0 to 3 show the highest braking priority in positive direction:
0x0: No pending braking request
0x1: Priority 1 includes all positioning actions (G0, POS, SPOS)
0x2: Priority 2 includes DYNNORM and all movements of priority 1
0x3: Priority 3 includes DYNPOS and all movements of priorities 1 to 2
0x4: Priority 4 includes DYNROUGH and all movements of priorities 1 to 3
0x5: Priority 5 includes DYNSEMIFIN and all movements of priorities 1 to 4
0x6: Priority 6 includes all movements (incl. DYNFINISH). The request can also be triggered by a CP SW Limit Stop.
0x7: Priority 7 includes all movements. The request was triggered by the NC/PLC interface signal &lt;VorschubHalt-SpindelHalt/&gt; (Feed stop / spindle stop). Brakes are always applied independently of the movement direction.
0xD: Priority 13 includes all movements. Axial braking is executed using the Emergency Stop braking ramp.
In bits 16 to 19 the highest braking priority is shown in negative direction:
0x0 to 0xD: Same significance as with bits 0 to 3
All other bits are reserved and not set.
When displaying the value of the variables in hexadecimal format, the fifth digit from the right indicates the braking priority in negative direction and the digit on the right the braking priority in positive direction.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_BRAKE_STATE</name>
<brief>Current braking status</brief>
<description>$AA_BRAKE_STATE[X]
returns whether braking of the axis / spindle was initiated by a request from $AA_BRAKE_CONDB[X] or the NC/PLC interface signal &lt;VorschubHalt-SpindelHalt/&gt; (Feed stop / spindle stop).
Bit 0 = 1: Current braking request due to a stop from an OEM application or a CP SW Limit Stop or the NC/PLC interface signal &lt;VorschubHalt-
SpindelHalt/&gt; (Feed stop / spindle stop) ($AA_BRAKE_CONDB[X])
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_BRAKE_CONDM</name>
<brief>Context-sensitive conditions for interpolator stop in the MCS</brief>
<description>The axial variable $AA_BRAKE_CONDM[ax] indicates the braking requests (conditions) pending on the axis / spindle to the interpolator stop. A braking request consists of a collision direction referring to a coordinate axis in the MCS, and a braking priority referring to the machining level.

Bits 0 to 3 show the highest braking priority in positive direction:
0x0: No pending braking request
0x1: Priority 1 includes all positioning actions (G0, POS, SPOS)
0x2: Priority 2 includes DYNNORM and all movements of priority 1
0x3: Priority 3 includes DYNPOS and all movements of priorities 1 to 2
0x4: Priority 4 includes DYNROUGH and all movements of priorities 1 to 3
0x5: Priority 5 includes DYNSEMIFIN and all movements of priorities 1 to 4
0x6: Priority 6 includes all movements (incl. DYNFINISH). The request can also be triggered by a CP SW Limit Stop.
0x7: Priority 7 includes all movements. The request was triggered by the NC/PLC interface signal &lt;VorschubHalt-SpindelHalt/&gt; (Feed stop / spindle stop). Brakes are always applied independently of the movement direction.
0xD: Priority 13 includes all movements. Axial braking is executed using the Emergency Stop braking ramp.
In bits 16 to 19 the highest braking priority is shown in negative direction:
0x0 to 0xD: Same significance as with bits 0 to 3
All other bits are reserved and not set.
When displaying the value of the variables in hexadecimal format, the fifth digit from the right indicates the braking priority in negative direction and the digit on the right the braking priority in positive direction.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_JOG_POS_SELECTED</name>
<brief>JOG to position</brief>
<description>$AA_JOG_POS_SELECTED[&lt;Axis&gt;]
FALSE: JOG to position inactive.
TRUE:  JOG to position active.
Via the NC/PLC interface signal &lt;Aktiviere_Anfahren_einer_Position_inJOG/&gt; (Activate approaching position in JOG) jogging to position in the oprating mode JOG is activated. Activation is confirmed via the NC/PLC interface signal &lt;Anfahren_einer_Position_inJOGaktiv/&gt; (Approaching position in JOG active).
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_JOG_POS_ACT</name>
<brief>JOG to position: Position reached</brief>
<description>The variable $AA_JOG_POS_ACT[&lt;Axis&gt;] has the following values:
FALSE:  Position not reached by JOG to position.
TRUE:   Position reached by JOG to position.
Via the PLC signal &lt;Aktiviere_Anfahren_einer_Position_inJOG/&gt; (Activate approaching position in JOG) jogging to position in the operating mode JOG is activated. Activation via the NC/PLC interface signal &lt;Anfahren_einer_Position_inJOGaktiv/&gt; DB31, ... DBX75.6 and the system variable $AA_JOG_POS_SELECTED[&lt;Axis&gt;] is confirmed. The position reached via the NC/PLC interface signal &lt;InJOGanzufahrendePosition_ist_erreicht/&gt; (Position approached in JOG reached) is reported. The position reached was defined by the setting data $SA_JOG_POSITION[&lt;Axis&gt;].
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_PCS_REL</name>
<brief>Current relative WCS setpoint value of an axis</brief>
<description>The axial variable $AA_PCS_REL[ax] determines the current relative setpoint value in the workpiece coordinate system (WCS) for the corresponding axis. The setpoint value corresponds to $AA_IW[ax], which is transformed by the current relative system frame $P_RELFRAME. The axial positions lie in the relative WCS coordinate system.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_ACS_REL</name>
<brief>Current SZS setpoint value of an axis</brief>
<description>The axial variable $AA_ACS_REL[ax] determines the current relative setpoint value in the settable zero point coordinate system (SZS) for the corresponding axis. The setpoint value corresponds to $AA_IEN[ax], which is transformed by the current relative system frame $P_RELFRAME. The axial positions lie in the relative SZS coordinate system.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$AA_EG_TYPE</name>
<brief>Type of coupling</brief>
<description>$AA_EG_TYPE[a,b]
a: Following axis
b: Leading axis
Type of coupling for leading axis b
-1: no coupling defined
0: Actual value coupling
1: Setpoint value coupling
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_EG_NUMERA</name>
<brief>Numerator  of  the coupling factor</brief>
<description>$AA_EG_NUMERA[a,b]
a: Following axis
b: Leading axis
Numerator of coupling factor for leading axis b
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_EG_DENOM</name>
<brief>Denominator of the coupling factor</brief>
<description>$AA_EG_DENOM[a,b]
a: Following axis
b: Leading axis
Denominator of coupling factor for leading axis b
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_EG_SYN</name>
<brief>Synchronization of the master axis</brief>
<description>$AA_EG_SYN[a,b]
a: Following axis
b: Leading axis
Synchronous position of    leading axis b
</description>
</parameter>

<parameter type="BOOL" dim="2">
<name>$AA_EG_ACTIVE</name>
<brief>Coupling is active for the master axis</brief>
<description>$AA_EG_ACTIVE[a,b]
a: Following axis
b: Leading axis
Coupling for leading axis b is active, i.e. switched on
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLCMDP</name>
<brief>Axis position component of the leading  axis/spindle</brief>
<description>$AA_CPLCMDP[FAx,LAx]
Position component of the axis position of the following axis/spindle FAx caused by an active coupling to the leading axis/spindle LAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLCMDV</name>
<brief>Velocity component of the leading axis/spindle</brief>
<description>$AA_CPLCMDV[FAx,LAx]
Velocity component of the total velocity of the following axis/spindle FAx caused by an active coupling to the leading axis/spindle LAx
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$AA_CPLTYPE</name>
<brief>Type of coupling</brief>
<description>$AA_CPLTYPE[FAx, LAx]
The active coupling types are returned as bit-codes for the axis/spindle of the following axis/spindle FAx to the leading axis/spindle LAx
Bit 0,1 = TANG
Bit 2 = 1 ('H04') COUP
Bit 3 = 1 ('H08') TRAIL
Bit 4 = 1 ('H10') LEAD
Bit 5 = 1 ('H20') EG
Bit 6 = 1 ('H40') GANTRY
Bit 7,8 = 1 (H180) TANG with option P
Bit 9 = 1 ('H200') CP, generic coupling
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLACC</name>
<brief>Acceleration component of the leading axis/spindle</brief>
<description>$AA_CPLACC[FAx,LAx]
Acceleration component of the total acceleration of the following axis/spindle FAx caused by an active coupling to the leading axis/spindle LAx
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$AA_CPLSTATE</name>
<brief>Status of the coupling</brief>
<description>$AA_CPLSTATE[FAx, LAx]
Status of the coupling between the following axis/spindle FAx and the leading axis/spindle LAx
"NONE" = No coupling defined
"DEF" = Coupling defined, not activated
"ON" = Coupling is active
"OFF" = Coupling deactivated
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLNUM</name>
<brief>Numerator of the coupling factor</brief>
<description>$AA_CPLNUM[FAx, LAx]
Numerator of the link factor between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLDEN</name>
<brief>Denominator of the coupling factor</brief>
<description>$AA_CPLDEN[FAx, LAx]
Denominator of the coupling factor between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$AA_CPLCTID</name>
<brief>Curve tables ID of the coupling</brief>
<description>$AA_CPLCTID[FAx, LAx]
Table number of the active  curve table between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$AA_CPLSETVAL</name>
<brief>Coupling reference of the leading axis</brief>
<description>$AA_CPLSETVAL[FAx, LAx]
Coupling reference of the leading axis/spindle LAx to the following axis/spindle FAx
"ACTPOS" = Actual position
"CMDPOS" = Setpoint position
"CMDVEL" = Setpoint velocity
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$PA_CPLTYPE</name>
<brief>Type of coupling</brief>
<description>$PA_CPLTYPE[FAx, LAx]
The active coupling types are returned as bit-codes for the axis/spindle of the following axis/spindle FAx for the leading axis/spindle LAx
Bit 0,1 = TANG
Bit 2 = 1 ('H04') COUP
Bit 3 = 1 ('H08') TRAIL
Bit 4 = 1 ('H10') LEAD
Bit 5 = 1 ('H20') EG
Bit 6 = 1 ('H40') GANTRY
Bit 7,8 = 1 (H180) TANG with option P
Bit 9 = 1 ('H200') CP, generic coupling
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$PA_CPLSTATE</name>
<brief>Status of the coupling</brief>
<description>$PA_CPLSTATE[FAx, LAx]
Status of the coupling between the following axis/spindle FAx and the leading axis/spindle LAx
"NONE" = No coupling defined
"DEF" = Coupling defined, not activated
"ON" = Coupling is active
"OFF" = Coupling deactivated
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLNUM</name>
<brief>Numerator of the coupling factor</brief>
<description>$PA_CPLNUM[FAx, LAx]
Numerator of the coupling  factor between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLDEN</name>
<brief>Denominator of the coupling factor</brief>
<description>$PA_CPLDEN[FAx, LAx]
Denominator of the coupling factor between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$PA_CPLCTID</name>
<brief>Curve tables ID of the coupling</brief>
<description>$PA_CPLCTID[FAx, LAx]
Table number of the active  curve table between the following axis/spindle FAx and the leading axis/spindle LAx
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$PA_CPLSETVAL</name>
<brief>Coupling reference of the leading axis</brief>
<description>$PA_CPLSETVAL[FAx, LAx]
Coupling reference of the leading axis/spindle LAx to the following axis/spindle FAx
"ACTPOS" = Actual position
"CMDPOS" = Setpoint position
"CMDVEL" = Setpoint velocity
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ENC_ZERO_MON_ACCESS_CNT</name>
<brief>Updating counter of valid zero monitoring accesses</brief>
<description>Incremental and distance-coded measuring systems, only for SIMODRIVE 611D:
This variable requires a great deal of computing time with this type of encoder, it is only supplied if bit_0 = 1 is set in $MA_ENC_ZERO_MONITORING_SYSVAR_CTRL. After the initialization phase, the system variable is incremented after every minute if one or more zero marks have been detected during this time. During the initialization phase, it is incremented at each detected, protected zero mark.
See also $MA_ENC_ZEROMON_SYSVAR_CTRL

Absolute measuring systems ($MA_ENC_TYPE=4), only for SIMODRIVE 611D:
This counter is incremented upon each successful NC access to a valid EnDat absolute value.

Other drives or deactivated:
Variable returns 0.

$VA_ENC_ZERO_MON_ACCESS_CNT[n,ax] is initialized to 0 at power ON. It is not reset by RESET.

The indices mean:
n: Number of encoder
ax: Machine axis
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ABSOLUTE_ENC_ZERO_MON_MAX</name>
<brief>Maximum of $VA_ENC_ZERO_MON_ACT</brief>
<description>Absolute measuring systems ($MA_ENC_TYPE=4), only for SIMODRIVE 611D:
This system variable contains the maximum value of $VA_ENC_ZERO_MON_ACT since the encoder was switched on.

Other systems/drives:
Variable returns 0.

$VA_ABSOLUTE_ENC_ZERO_MON_MAX[n,ax] is initialized to 0 at power ON and encoder selection. RESET does not cause a reset.

The indices mean:
n: Number of encoder
ax: Machine axis
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ABSOLUTE_ENC_DELTA_INIT</name>
<brief>Initial difference with absolute encoder</brief>
<description>Only with absolute encoders:
This value includes the initial difference value between the last absolute position buffered in the SRAM and the current absolute position (in the format internal increment - see machine data $MN_INT_PER_MM and $MN_INT_PER_DEG). The value is updated at power ON, warm restart, park deselection and return below the encoder limit frequency.

Other encoders:
Variable returns 0.

$VA_ABSOLUTE_ENC_DELTA_INIT[n,ax] is recalculated during power ON. RESET does not cause a reset.

Meaning of the indices:
n: Encoder number
ax: Machine axis
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ENC_ZERO_MON_ACT</name>
<brief>Current internal zero monitoring values</brief>
<description>Incremental and distance-coded measuring systems, only for SIMODRIVE 611D:
This system variable contains the current hardware counter value of the last zero mark passed.

Absolute measuring systems ($MA_ENC_TYPE=4), only for SIMODRIVE 611D:
This system variable contains the current difference (amount) between the control position and the newly formed absolute position in the format 1/4 coarse encoder increments.

Other drives:
Variable returns 0.

$VA_ENC_ZERO_MON_ACT[n,ax] is initialized to 0 at power ON. RESET does not cause a reset.

The indices mean:
n: Number of encoder
ax: Machine axis
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$VA_ENC_ZERO_MON_INIT</name>
<brief>Initialization values of hardware counter during zero monitoring</brief>
<description>Incremental and distance-coded measuring systems, only for SIMODRIVE 611D:
This system variable contains the initial hardware counter value with which all further hardware counter values of the zero  marks are compared.

Other systems/drives:
Variable returns 0.

$VA_ENC_ZERO_MON_INIT[n,ax] is initialized to 0 at power ON and encoder selection. RESET does not cause a reset.

The indices mean:
n: Number of encoder
ax: Machine axis
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_COUP_CORR_DIST</name>
<brief>Generic coupling: Distance to go from $AA_COUP_CORR</brief>
<description>$AA_COUP_CORR_DIST[Sn]
with spindle Sn (n: spindle number), example S2: spindle 2 or C: axis C
The variable serves to display the distance to go of $AA_COUP_CORR (compensation value for the position offset with generic couplings) for the "Correct synchronism error" function.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLINTR</name>
<brief>Offset value for the input value of the coupling</brief>
<description>$AA_CPLINTR[FAx, LAx]
Offset value for the input value of the leading axis/spindle LAx of the coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLINSC</name>
<brief>Scaling factor for the input value of  the coupling</brief>
<description>$AA_CPLINSC[FAx, LAx]
Scaling factor for the input value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLOUTTR</name>
<brief>Offset value for the output value of the coupling</brief>
<description>$AA_CPLOUTTR[FAx, LAx]
Offset value for the output value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_CPLOUTSC</name>
<brief>Scaling factor for the output value of the coupling</brief>
<description>$AA_CPLOUTSC[FAx, LAx]
Scaling factor for the output value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLINTR</name>
<brief>Offset value for the input value of the coupling</brief>
<description>$PA_CPLINTR[FAx, LAx]
Offset value for the input value of the leading axis/spindle LAx of the coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLINSC</name>
<brief>Scaling factor for the input value of  the coupling</brief>
<description>$PA_CPLINSC[FAx, LAx]
Scaling factor for the input value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLOUTTR</name>
<brief>Offset value for the output value of the coupling</brief>
<description>$PA_CPLOUTTR[FAx, LAx]
Offset value for the output value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$PA_CPLOUTSC</name>
<brief>Scaling factor for the output value of  the coupling</brief>
<description>$PA_CPLOUTSC[FAx, LAx]
Scaling factor for the output value of the leading axis/spindle LAx of the active coupling to the following axis/spindle FAx
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNCOP</name>
<brief>Threshold value for position synchronization coarse</brief>
<description>$AA_CPSYNCOP[ax]
Threshold value for position synchronization coarse of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNFIP</name>
<brief>Threshold value for position synchronization fine</brief>
<description>$AA_CPSYNFIP[ax]
Threshold value for position synchronization fine of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNCOV</name>
<brief>Threshold value for velocity synchronization coarse</brief>
<description>$AA_CPSYNCOV[ax]
Threshold value for velocity synchronization coarse of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNFIV</name>
<brief>Threshold value for velocity synchronization fine</brief>
<description>$AA_CPSYNFIV[ax]
Threshold value for velocity synchronization fine of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_CPSYNCOP</name>
<brief>Threshold value for position synchronization coarse</brief>
<description>$PA_CPSYNCOP[ax]
Threshold value for position synchronization coarse of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_CPSYNFIP</name>
<brief>Threshold value for position synchronization fine</brief>
<description>$PA_CPSYNFIP[ax]
Threshold value for position synchronization fine of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_CPSYNCOV</name>
<brief>Threshold value for velocity synchronization coarse</brief>
<description>$PA_CPSYNCOV[ax]
Threshold value for velocity synchronization coarse of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_CPSYNFIV</name>
<brief>Threshold value for velocity synchronization fine</brief>
<description>$PA_CPSYNFIV[ax]
Threshold value for velocity synchronization fine of the following axis/spindle ax
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$AA_ITR</name>
<brief>Current setpoint value at the output of the nth transformation</brief>
<description>The axial variable $AA_ITR[ax] determines the current setpoint value of an axis at the output of the nth chained transformation.

The following applies to the data of the transformation layer:
Transformation layer 0: The positions correspond to the BCS positions, that means $AA_ITR[ x, 0 ] corresponds to $AA_IB[ x ]
Transformation layer 1: Position setpoint of the axis at the output of the 1st transformation.
Transformation layer 2: Position setpoint of the axis at the output of the 2nd transformation.
Transformation layer 3: Position setpoint of the axis at the output of the 3rd transformation.
Transformation layer 4: Position setpoint of the axis at the output of the 4th transformation, that means $AA_ITR[ x, 4 ] corresponds to $AA_IM[ x ]

If the transformation chain does not consist of 4 single transformations, then the highest layers return the same setpoint values.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_IBC</name>
<brief>Current setpoint value of a cartesian axis</brief>
<description>The axial variable $AA_IBC[ax] determines the position setpoint of a cartesian axis lying between BCS and MCS. "Cartesian" means that the axis is a linear axis which lies plane-parallel to a coordinate axis in a clockwise coordinate system. This value is returned if a geometry axis is still cartesian at the output of the nth transformation. The axis identifier used must represent a geometry axis in the BCS, otherwise the variable returns the value 0.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IW</name>
<brief>Current actual WCS value of an axis</brief>
<description>The variable $VA_IW[ ax ] determines the encoder position of an axis retransformed into the WCS. The WCS value contains all axial override components (DRF, AA_OFF, ext. zero offset etc.) and offset values (CEC etc.). For performance reasons, the positions are only calculated once in each IPO cycle. The variable does not change its value when it is read within an IPO cycle, although the actual value could have changed. When transformations are active, it must be noted that the transformation of the actual values into the BCS can be very time-consuming in the IPO cycle. An adequately long IPO cycle must be set in this case.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IB</name>
<brief>Current BCS encoder position of an axis</brief>
<description>The variable $VA_IB[ ax ] determines the encoder position of an axis retransformed into the BCS. The BCS value contains all axial override components (DRF, AA_OFF, ext. zero offset etc.) and offset values (CEC etc.). For performance reasons, the positions are calculated only once in each IPO cycle. The variable does not change its value when it is read within an IPO cycle, although the actual value could have changed. When transformations are active, it must be noted that the transformation of the actual values into the BCS can be very time-consuming in the IPO cycle. An adequately long IPO cycle must be set in this case.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IBC</name>
<brief>Current cartesian BCS encoder position of an axis</brief>
<description>The variable $VA_IBC[ &lt;Geo-Axis&gt; ] determines the encoder position of a cartesian axis lying between the BCS and MCS. "Cartesian" means that the axis is a linear axis which lies plane-parallel to a coordinate axis in a clockwise coordinate system. The axis identifier used can be a geometry, channel or machine axis identifier. This identifier must represent a geometry axis in the BCS, otherwise the variable returns the value 0.0. For performance reasons, the positions are calculated only once in each IPO cycle. The variable does not change its value when it is read within an IPO cycle, although the actual value could have changed. When transformations are active, it must be noted that the transformation of the actual values into the BCS can be very time-consuming in the IPO cycle. An adequately long IPO cycle must be set in this case.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$VA_ITR</name>
<brief>Current actual value at the output of the nth transformation</brief>
<description>The axial variable $VA_ITR[ax, n] determines the current encoder position of an axis at the output of the nth chained transformation.

The following applies to the data of the transformation layer:
Transformation layer 0: The positions correspond to the BCS positions, that means $VA_ITR[ x, 0 ] corresponds to $VA_IB[ x ]
Transformation layer 1: Position setpoint of the axis at the output of the 1st transformation.
Transformation layer 2: Position setpoint of the axis at the output of the 2nd transformation.
Transformation layer 3: Position setpoint of the axis at the output of the 3rd transformation.
Transformation layer 4: Position setpoint of the axis at the output of the 4th transformation, that means $VA_ITR[ x, 4 ] corresponds to $VA_IM[ x ]

If the transformation chain does not consist of 4 single transformations, then the highest layers return the same setpoint values. When transformations are active, it must be noted that the transformation of the actual values into the BCS can be very time-consuming in the IPO cycle. An adequately long IPO cycle must be set in this case.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_ATOL</name>
<brief>Active axis tolerance</brief>
<description>$AA_ATOL defines the axis tolerance for compressors and smoothing that was active during the preparation of the current main run block.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_ATOL</name>
<brief>Programmed axis tolerance</brief>
<description>$PA_ATOL states the axis tolerance for compressors and smoothing programmed in the part program. If no value is programmed, the
variable returns -1.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_FGREF</name>
<brief>Active radius for rotary axis path</brief>
<description>$AA_FGREF defines the radius with which a rotary axis contributes to the path distance. The default value is 180mm/PI  =  57.296mm. This corresponds to 1mm per degree.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_FGROUP</name>
<brief>Effect of an axis on the path velocity</brief>
<description>If the path of an axis has an effect on the path velocity in the current main run block (FGROUP), then the variable returns TRUE, otherwise FALSE.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$PA_FGROUP</name>
<brief>Effect of an axis on the path velocity</brief>
<description>If the path of an axis has an effect on the path velocity (FGROUP), then the variable returns TRUE, otherwise FALSE.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$PA_FGREF</name>
<brief>Factor for rotary axis path</brief>
<description>$PA_FGREF defines the radius with which a rotary axis contributes to the path distance in the part program. The default value is 180mm/PI = 57.296mm. This corresponds to 1mm per degree.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPMVDI</name>
<brief>Responses of the coupling module to VDI signals</brief>
<description>The variable $AA_CPMVDI[AX] returns a bit-coded value for the stated axis/spindle with active coupling that indicates the response of the coupling module to specific VDI signals.

The response is determined by the CP keyword CPMVDI.
Bit 0     Reserved
Bit 1     Reserved
Bit 2     Reserved
Bit 3 = 0 DB&lt;axis&gt;.DBX1.3, axis/spindle disable is not active for the following axis. The status of the leading axis is active.
Bit 3 = 1 DB&lt;axis&gt;.DBX1.3, axis/spindle disable is active for the following axis
Bit 4 = 0 Dependent position components of the leading axes/spindles are active irrespective of the status of the axis/spindle disable of the particular leading axis/spindle
Bit 4 = 1 Dependent position components of the leading axes/spindles are only active if the status of the axis/spindle disable of the leading axis/spindle corresponds to the status of the axis/spindle disable of the following axis/spindle.
Bit 5 = 0 VDI signal DB21.DBX25.7 and/or DB21.DBX1.7, program test is not active for the following axis. The status of the leading axis is active.
Bit 5 = 1 VDI sgnal DB21.DBX25.7 and/or DDB21.DBX1.7, program test is active for the following axis.
Bit 6 = 0 Dependent position components of the leading axis/spindles are active irrespective of the status of the axis/spindle disable of the particular leading axis/spindle
Bit 6 = 1 Dependent position components of the leading axis/spindles are only active if the status of the axis/spindle disable of the leading axis/spindle corresponds to the status of the axis/spindle disable of the following axis/spindle.
Bit 7 - 31 Reserved
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_AX_DISABLE_SRC</name>
<brief>Source of the axis/spindle disable</brief>
<description>$AA_AX_DISABLE_SRC
Bit mask that returns the source of a active axis/spindle disable.
The data is bit-coded so that individual states can be masked or evaluated separately.
Bit0 = 1: Resulting state from all sources: axis/spindle disable active.
Bit1 = 1: Axial signal axis/spindle disable triggered by PLC is active.
Bit2 = 1: Channel-specific program test is active.
Bit3 = 1: Axiale suppression of the programm test triggered by PLC is active.
Bit4 = 1: Axial signal program test (power save mode) is active.
Bit5 = 1: Serupro is active.
Bit6 = 1: Link object overall state axis/spindle disable is active.
Bit7 = 1: Link object overall state real traversing is active.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$AA_AX_DISABLE</name>
<brief>Status of  the  axis/spindle disable</brief>
<description>$AA_AX_DISABLE
0: Axis/spindle disable is inactive.
1: Axis/spindle disable is active.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MASL_DEF</name>
<brief>Coupling definition of master slave</brief>
<description>The current status of a master-slave coupling.
= 0: Axis is not a slave axis or no coupling is active.
&gt; 0: Coupling is active, the relevant machine axis number of the master axis is supplied.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_MACHAX</name>
<brief>Assignment of the physical axis</brief>
<description>The NCU and machine axis are recorded for one axis, this represents the physical image of the axis. For this purpose, the NCU ID is recorded from the 10000 place, e.g. 20005: NCU 2 axis 5. Without NCU link, i.e. if there is only one NCU, only the number of the machine axis is recorded. In this case, the NCU ID is equal to zero.If the machine axis identifier is used, the machine axis on this NCU must be assigned to at least one channel, otherwise alarm 17040 channel %1: block %2 impermissible axis index is reported.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_IPO_NC_CHANAX</name>
<brief>Assignment to NC, channel and channel number of the interpolator.</brief>
<description>If the axis is currently interpolated on this NCU , the channel and channel axis number are recorded in such a way that they define the interpolator of the axis. In this case, the channel is recorded from the hundredth place and the channel axis nummer from the units position, e.g. 1005 - channel 10 channel axis 5. These values are always lower than 10000. If the axis is currently interpolated on another NCU, the NCU identifier of the interpolating NCU and the global axis number of the machine axis are recorded. In this case, the NCU is recorded from the 10000 position, e.g. 20203: NCU 2 and the global axis number is 203. This global axis number can then be used to determine the interpolating channel and channel axis number on the other NCU, with NCU ID 2, with $AN_IPO_CHANAX[203]. If the machine axis identifier is used, the machine axis on this NCU must be assigned to at least one channel, otherwise alarm 17040 channel %1: set %2 impermissable axis index is reported.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_IPO_NC_CHANAX</name>
<brief>Assignment of machine axis to NC or channel and chnl. axis of the interpolator.</brief>
<description>If the machine axis is currently interpolated on this NCU , the channel and channel axis number are recorded in such a way that they define the interpolator of the axis. In this case, the channel is recorded from the hundredth place and the channel axis number from the unit place, e.g. 1005 - channel 10 channel axis 5. These values are always lower than 10000. If the machine axis is currently interpolated on another NCU, the NCU identifier of the interpolating NCU and the global axis number of the machine axis are recorded. In this case, the NCU is recorded from the 10000 place, e.g. 20103: NCU 2 and the global axis number is 103. These global axis numbers can then be used to determine the interpolating channel and channel axis number on the other NCU, with NCU ID 2, with $AN_IPO_CHANAX[103]. If a machine axis is not used, the Alarm 17040 channel %1: block %2 impermissible axis index is reported.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_MOT_SENSOR_CONF</name>
<brief>Configuration of motor sensors</brief>
<description>The variable $VA_MOT_SENSOR_CONF[axn] can query the configuration of the motor sensors. The variable is bit-coded, and has the following meanings:
Bit0 = 1: Sensors present
Bit1 = 1: Sensor S1 present. Analog measured value for position of the draw-bar
Bit2 = 0:
Bit3 = 0:
Bit4 = 1: Sensor S4 present. Digital value for the piston end position.
Bit5 = 1: Sensor S5 present. Digital value for the angular position of the shaft.
Bit10 = 1: Status value is formed, speed limitations p5043 active.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_MOT_CLAMPING_STATE</name>
<brief>State of the clamping system</brief>
<description>The variable $VA_MOT_CLAMPING_STATE[axn] determines the clamping state on the basis of the position of the draw-bar (value of S1).
A maximum speed is assigned to each state. These are stored in the drive parameters p5043[0..6]. The followng values are possible:
0:  Sensor not present
1:  Initial state, speed limit 0 rpm
2:  Alarm, speed limit 0 rpm
3:  Tool released / ejected, for speed limit see drive parameter p5043[0]
4:  Clamping (by spring force), for speed limit see drive parameter p5043[1]
5:  Releasing (by compressed air), for speed limit see drive parameter p5043[2]
6:  Releasing (by compressed air), for speed limit see drive parameter p5043[3]
7:  Clamped with tool, for speed limit see drive parameter p5043[4]
8:  Clamped with tool, for speed limit see drive parameter p5043[4]
9:  Contnued clamping (by spring force), for speed limit see drive parameter p5043[5]
10: Clamped without tool, for speed limit see drive parameter p5043[6]
11: Alarm, speed limit 0 rpm
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_MOT_SENSOR_ANA</name>
<brief>Analog sensor on the motor</brief>
<description>The variable $VA_MOT_SENSOR_ANA[axn] determines the analog measured value of the sensor S1. At a resolution of 1mV, the analog value 0 - 10 V is mapped to a maximum of +10000 increments.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_MOT_SENSOR_DIGI</name>
<brief>Digital sensors on the motor</brief>
<description>The variable $VA_MOT_SENSOR_DIGI[axn] determines the states of the digital sensors S4 and S5. The variable is bit-coded, and has the following meanings:
Bit0 = 0:
Bit1 = 0:
Bit2 = 0:
Bit3 = 0:
Bit4 = 1: Sensor S4 piston end position
Bit5 = 1: Sensor S5 angular position of shaft
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_CPSYNC2</name>
<brief>Status synchronism(2) of the foll. axis / spindle</brief>
<description>$VA_CPSYNC2[FA]
Second synchronism monitoring of the following axis/spindle
0: Monitoring inactive
Bit 0 = 1: Monitoring 'Synchronism(2) coarse' active
Bit 1 = 1: Synchronism(2) coarse present
Bit 2 = 1: Monitoring 'Synchronism(2) fine' active
Bit 3 = 1: Synchronism(2) fine present
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNCOP2</name>
<brief>Threshold value second synchr. monitoring   coarse</brief>
<description>$AA_CPSYNCOP2[FA]
Second synchronism monitoring of the following axis/spindle: threshold value coarse
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_CPSYNFIP2</name>
<brief>Threshold value second synchr. monitoring fine</brief>
<description>$AA_CPSYNFIP2[FA]
Second synchronism monitoring of the following axis/spindle: threshold value fine
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_POSRES</name>
<brief>Axis position is restored</brief>
<description>$AA_POSRES[X]
Axis status:
0: Axis position is not restored
1: Axis position is restored
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$AA_CPMALARM</name>
<brief>Behavior of coupling module re handling of alarms</brief>
<description>With an active coupling, the variable $AA_CPMALARM[AX] returns a bitcoded value for the specified axis/spindle which specifies the behavior of the coupling module in relation to the "Alarmhandlich". The behavior is defined by the CP keyword CPMALARM. The default values are derived from MD11410 $MN_SUPPRESS_ALARM_MASK and MD11415 $MN_SUPPRESS_ALARM_MASK_2 The alarms which are suppressed are determined by the individual bits.

Bit set:  The corresponding alarm (warning) is NOT triggered.
  Bit 0:  Alarm 16772 "Channel %1 block %2 axis %3 is a following axis, coupling is opened"
  Bit 1:  Alarm 16773 "Channel %1 axis %3 is a following axis. The axis/spindle disables of the leading axes are different"
  Bit 2:  Alarm 16774 "Channel %1 axis %2 Synchronization interrupted"
  Bit 3:  Alarm 22012 "Channel %1 block %2. Leading axis %3 is in simulation mode"
  Bit 4:  Alarm 22013 "Channel %1 block %2. Following axis %3 is in simulation mode"
  Bit 5:  Alarm 22014 "Channel %1 block %2. There is a big difference in the dynamics of leading axis %3 and following axis %4"
  Bit 6:  Alarm 22015 "Channel %1 block %2 Following spindle %3 - no dynamic for additional motion"
  Bit 7:  Alarm 22016 "Channel %1 block %2 Following spindle %3 in the range of reduced acceleration capacity"
  Bit 8:  Alarm 22025 "Channel %1 block %2 Following axis/spindle %3 synchronism (2): fine tolerance exceeded"
  Bit 9:  Alarm 22026 "Channel %1 block %2 Following axis/spindle %3 synchronism (2): coarse tolerance exceeded"
  Bit 10 - 31 Reserved
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_COLLPOS</name>
<brief>Collision position</brief>
<description>$AA_COLLPOS[AX1]
Position of the 1st axis in the event of an impending collision.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$VA_CC_COMP_VAL</name>
<brief>OA compensation value</brief>
<description>The axial variable $VA_CC_COMP_VAL[ax, n] determines the current compensation value of the nth OA compensation from compile cycles in the machine coordinate system (MCS). If no compile cycle that enters OA compensation values is active, the variable has the value 0.0.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_CC_COMP_VAL_TOTAL</name>
<brief>OA total compensation value</brief>
<description>The axial variable $VA_CC_COMP_VAL[ax, n] determines the current total compensation value of all OA compensations from compile cycles in the machine coordinate system (MCS). If no compile cycle that enters OA compensation values is active, the variable has the value 0.0.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_LOAD_SMOOTH</name>
<brief>smoothed drive load</brief>
<description>$AA_LOAD_SMOOTH[ax]
The variable $AA_LOAD_SMOOTH[ax] determines the smoothed drive load in percent by means of the PT1 filter. The filter constant is set with the machine data MD32925 LOAD_SMOOTH_FILTER_TIME. This is only available with PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$AA_POWER_SMOOTH</name>
<brief>smoothed drive active power</brief>
<description>$AA_POWER_SMOOTH[ax]
The variable $AA_POWER_SMOOTH[ax] determines the smoothed drive active power in W by means of the PT1 filter. The filter constant is set with the machine data MD32926 POWER_SMOOTH_FILTER_TIME. This is only available with PROFIdrive drives.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_INERTIA_TOTAL</name>
<brief>Moment of inertia/mass of the axis</brief>
<description>$VA_INERTIA_TOTAL[ax]
Inertia for rotary drives in kgm2 and mass of linear drives in kg.

Only available with SINAMICS drives.
The value of $VA_INERTIA_TOTAL corresponds to the content of parameter p1493 only if the associated drive function "Moment of inertia estimator" is activated (p0108.10 = 1, p1400.18 = 1) and has settled (p1407.26 =1). In all other cases, the value zero is returned in $VA_INERTIA_TOTAL. For commissioning and supplementary conditions of the drive function "Moment of inertia estimator", see the SINAMICS Function Manual, Drive Functions (FH1).

Note for use:
The inertia/mass is determined on the motor side without taking the gear unit into account. For mechanically coupled axes, the individual values are added to give a total value for the group. Reading $VA_INERTIA_TOTAL from synchronous actions is not possible, and leads to alarm 20144.

Related to SINAMICS drives with:
   - Parameter p108.10:  Activation of the function module "Moment of inertia estimator"
   - Parameter p1493:    Total moment of inertia
   - Parameter p1400.18: Moment of inertia estimator active
   - Parameter p1407.26: Moment of inertia estimator settled
   - Parameter p1226:    Speed threshold for detecting standstill
   - Parameter p1560:    Moment of inertia estimator threshold value of acceleration torque
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_AX_FORCE</name>
<brief>Feedrate force</brief>
<description>$VA_AX_FORCE[X]
For rotary drives: converted drive torque setpoint value on the load side $VA_TORQUE
For linear drives: actual force value in N
Only available with PROFIdrive drives.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_STOPESI</name>
<brief>Stop E active</brief>
<description>$A_STOPESI
Current Safety Integrated Stop E for any axis:
= 0: No Stop E
Value not 0: For one of the axes, a Stop E is currently active
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_INSE</name>
<brief>External NCK SPL input signal</brief>
<description>$A_INSE[n]
n = bit number (1...192)
External NCK SPL input signal
NCK SPL interface for SPL control signal I/O interface logic
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_INSED</name>
<brief>External NCK SPL input signals (32-bit)</brief>
<description>$A_INSED[n]
n = doubleword number (1...6)
External NCK SPL input signals (32-bit)
NCK SPL interface for SPL control signal I/O interface logic
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_INSEP</name>
<brief>External PLC SPL input signal</brief>
<description>$A_INSEP[n]
n = bit number (1...192)
Image of an external PLC SPL input signal
PLC SPL interface for SPL control signal I/O interface logic
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_INSEPD</name>
<brief>External PLC SPL input signals (32-bit)</brief>
<description>$A_INSEPD[n]
n = doubleword number (1...6)
Image of external PLC SPL input signals (32-bit)
PLC SPL interface for SPL control signal I/O interface logic
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_OUTSE</name>
<brief>External NCK SPL output signal</brief>
<description>$A_OUTSE[n]
n = bit number (1...192)
External NCK SPL output signal
NCK SPL interface for SPL status signal I/O interface logic
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_OUTSED</name>
<brief>External NCK SPL output signals    (32-bit)</brief>
<description>$A_OUTSED[n]
n = doubleword number (1...6)
External NCK SPL output signals (32-bit)
NCK SPL interface for SPL status signal I/O interface logic
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_OUTSEP</name>
<brief>External PLC SPL output signal</brief>
<description>$A_OUTSEP[n]
n = bit number (1...192)
Image of an external PLC SPL output signal
PLC SPL interface for SPL status signal I/O interface logic
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_OUTSEPD</name>
<brief>External PLC SPL output signals  (32-bit)</brief>
<description>$A_OUTSEPD[n]
n = doubleword number (1...6)
Image of external PLC SPL output signals (32-bit)
PLC SPL interface for SPL status signal I/O interface logic
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_INSI</name>
<brief>Internal NCK SPL input signal</brief>
<description>$A_INSI[n]
n = bit number (1...192)
Internal NCK SPL input signal
Interface to the status signals of the axial NCK monitoring channels
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_INSID</name>
<brief>Internal NCK SPL input signals (32-bit)</brief>
<description>$A_INSID[n]
n = doubleword number (1...6)
Internal NCK SPL input signals (32-bit)
Interface to the status signals of the axial NCK monitoring channels
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_INSIP</name>
<brief>Internal PLC SPL input signal</brief>
<description>$A_INSIP[n]
n = bit number (1...192)
Image of an internal PLC SPL input signal
Interface to the status signals of the axial drive monitoring channels
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_INSIPD</name>
<brief>Internal PLC SPL input signals (32-bit)</brief>
<description>$A_INSIPD[n]
n = doubleword number (1...6)
Image of internal PLC SPL input signals (32-bit)
Interface to the status signals of the axial drive monitoring channels
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_OUTSI</name>
<brief>Internal NCK SPL output signal</brief>
<description>$A_OUTSI[n]
n = bit number (1...192)
Internal NCK SPL output signal
Interface to the control signals of the axial NCK monitoring channels
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_OUTSID</name>
<brief>Internal NCK SPL output signals (32-bit)</brief>
<description>$A_OUTSID[n]
n = doubleword number (1...6)
Internal NCK SPL output signals (32-bit)
Interface to the control signals of the axial NCK monitoring channels
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_OUTSIP</name>
<brief>Internal PLC SPL output signal</brief>
<description>$A_OUTSIP[n]
n = bit number (1...192)
Image of an internal PLC SPL output signal
Interface to the control signals of the axial drive monitoring channels
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_OUTSIPD</name>
<brief>Internal PLC SPL output signals  (32-bit)</brief>
<description>$A_OUTSIPD[n]
n = doubleword number (1...6)
Image of internal PLC SPL output signals (32-bit)
Interface to the control signals of the axial drive monitoring channels
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_MARKERSI</name>
<brief>NCK SPL flags</brief>
<description>$A_MARKERSI[n]
n = bit number (1...192)
NCK SPL flags
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MARKERSID</name>
<brief>NCK SPL flag word</brief>
<description>$A_MARKERSID[n]
n = doubleword number (1...6)
NCK SPL flag word (32-bit)
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_MARKERSIP</name>
<brief>PLC SPL flag marker</brief>
<description>$A_MARKERSIP[n]
n = bit number (1...192)
Image of a PLC SPL flag
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_MARKERSIPD</name>
<brief>PLC SPL flag word</brief>
<description>$A_MARKERSIPD[n]
n = doubleword number (1...6)
Image of a PLC SPL flag word (32-bit)
Readable only during the SPL start-up phase
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$A_TIMERSI</name>
<brief>SPL timers</brief>
<description>$A_TIMERSI[n]
n=timer number (1...16)
SPL timers
Unit in seconds
The time is counted internally in multiples of the interpolation cycle.

Incrementation of the time variable is started by value assignment
   $A_TIMERSI[n] = &lt;start value&gt;

Incrementation of a time variable is stopped through assignment of a negative value
   $A_TIMERSI[n] = -1

The current timer count can be read while the time variable is running or stopped. When the time variable is stopped by assigning -1, the last count value remains stored in the variable and can continue to be read. The timers are not stopped by a channel/mode group reset.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_STATSID</name>
<brief>SPL status signals</brief>
<description>$A_STATSID
Status of the crosswise data comparison between NCK and PLC (SPL-CDC).
If the value is not equal to zero, then an error has occurred in the SPL-CDC.

Significance
Bit 0...5  = 1: CDC error in the input/output signals, bit memories or dynamic data of the FSENDDP/FRECVDP communication
Bit 6...25 = 0: not assigned
Bit 26 = 1: error has occurred in the PROFIsafe communication
Bit 27 = 1: CDC error in the static data
Bit 28 = 1: CDC error "SPL protection status" (status $MN_PREVENT_SYNACT_LOCK not equal to DB18 DBX36.0 (SPL READY))
Bit 29 = 1: Timeout error in the communication between NCK and PLC (in 5 sec all ext.NCK-SPL outputs set to zero, the PLC goes into the stop state)
Bit 30 = 1: PLC stop signaled to the NCK
Bit 31 = 0: not assigned
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_CMDSI</name>
<brief>SPL DCC control signals</brief>
<description>$A_CMDSI[n]
n = bit number (1..0.16)
Control word for data cross-check between NCK and PLC (SPL DCC).
n = 1: Increase time for signal change monitoring to 10 s.
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_LEVELSID</name>
<brief>SPL DCC level</brief>
<description>$A_LEVELSID
Displays the fill level for signal change monitoring during data cross-check between NCK and PLC SPL (SPL DCC).
Specifies the number of signals currently tagged for cross-checking.
The value is already zero if an SPL signal has different levels on the NCK and PLC but the allowed discrepancy time for   the  signals (2 sec) has not yet expired.
</description>
</parameter>

<parameter type="INT" dim="0">
<name>$A_XFAULTSI</name>
<brief>DCC status</brief>
<description>$A_XFAULTSI
Information on Stop F for a safety axis:
Bit 0 = 1:  An actual value error has been detected by the data cross-check between NCK and drive for any safety axis.
Bit 1 = 1:  Any error on any axis has been detected by the data cross-check between NCK and drive, and the waiting time (&lt;&gt;0) before triggering Stop B on that axis is running or has expired ($MA_SAFE_STOP_SWITCH_TIME_F).
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_PLCSIIN</name>
<brief>SPL signal from PLC to NCK</brief>
<description>$A_PLCSIIN[n]
n = bit number (1...96)
Single-channel signals from PLC SPL (DB18) to NCK SPL.

Application:
$A_MARKERSI[1] = $A_PLCSIIN[1]        ; Signal from PLC-SPL
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_PLCSIOUT</name>
<brief>SPL signal from NCK to PLC</brief>
<description>$A_PLCSIOUT[n]
n = bit number (1...96)
Single-channel signals from NCK SPL to PLC SPL (DB18).

Application:
$A_PLCSIOUT[1] = $A_MARKERSI[1]       ; Signal to PLC-SPL
Can be written only from SPL (SAFE.SPF program)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_FSDP_ERR_REAC</name>
<brief>Response to communications error F_SENDDP</brief>
<description>$A_FSDP_ERR_REAC[n]
n = F_SENDDP relationship (1...16)
The system variable sets the response to the occurrence of a communications error. The response to a communications error caused by a fault in the communication path or by the intentional switching off one of the system components can be specifically defined according to the current dependency of the two system components involved in the F_DP communication relationship.
0 = Alarm 27350 + stop D/E
1 = Alarm 27350
2 = Alarm 27351 (display only, self-clearing)
3 = No alarm displayed
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FSDP_ERROR</name>
<brief>Communications error F_SENDDP</brief>
<description>$A_FSDP_ERROR[n]
n = F_SENDDP relationship (1...16)
The system variable indicates whether there is a communications error. The cause of the error determined by F_SENDDP is contained in the diagnostic data $A_FSDP_DIAG.
TRUE = Communications error
FALSE = Normal operation
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FSDP_SUBS_ON</name>
<brief>Substitute values active in receiver</brief>
<description>$A_FSDP_SUBS_ON[[n]
n = F_SENDDP relationship (1...16)
The system variable states whether substitution values at the F_RECVDP (receiver) are output to the application.
TRUE = Output of substitution values
FALSE = Output of process values
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_FSDP_DIAG</name>
<brief>Cause of the communications error F_SENDDP</brief>
<description>$A_FSDP_DIAG[n]
n = F_SENDDP relationship (1...16)
The system variable indicates the cause of the communication (bit 4 - 5) or system (bit 13 - 15) error determined by F_SENDDP.
Bits 0 - 3: Reserved
Bit 4:    1 = Timeout detected
Bit 5:    1 = Sequence number error detected
Bit 6:    1 = CRC error detected
Bits 7 - 12: Reserved
Bit 13:   1 = Discrepancies in the F telegram data (TelegramDiscrepancy)
Bit 14:   1 = Sign-of-life monitoring (LifeSign)
Bit 15:   1 = Asynchronous error state (StateFault)
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_FRDP_SUBS</name>
<brief>Substitute value F_RECVDP</brief>
<description>$A_FRDP_SUBS[n]
n = F_RECVDP relationship (1...16)
The system variable defines the substitution values output to the SPL in the following states:
- Start of cyclic communication
- Communications error
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_FRDP_ERR_REAC</name>
<brief>Response to communications error F_RECVDP</brief>
<description>$A_FRDP_ERR_REAC[n]
n = F_RECVDP relationship (1...16)
The system variable sets the response to the occurrence of a communications error. The response to a communications error caused by a fault in the communication path or by the intentional switching off one of the system components can be specifically defined according to the current dependency of the two system components involved in the F_DP communication relationship.
0 = Alarm 27350 + stop D/E
1 = Alarm 27350
2 = Alarm 27351 (display only, self-clearing)
3 = No alarm displayed
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FRDP_ERROR</name>
<brief>communications error F_RECVDP</brief>
<description>$A_FRDP_ERROR[n]
n = F_RECVDP relationship (1...16)
The system variable indicates whether there is a communications error. The  cause of the error determined by F_RECVDP is contained in the diagnostic data $A_FRDP_DIAG.
TRUE = communications error
FALSE = Normal operation
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FRDP_SUBS_ON</name>
<brief>Substitute values active</brief>
<description>$A_FRDP_SUBS_ON[[n]
n = F_RECVDP relationship (1...16)
The system variable states whether substitution values are output to the application.
TRUE = Output of substitution values
FALSE = Output of process values
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FRDP_ACK_REQ</name>
<brief>User acknowledgement requested</brief>
<description>$A_FRDP_ACK_REQ[[n]
n = F_RECVDP relationship (1...16)
The system variable indicates that, after a communications error F telegrams are again being exchanged cyclically without error, and that user acknowledgement via interface signal DB18.FRDP_ACK_REI or channel_1 reset is still required to acknowledge the error and output the process values.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$A_FRDP_DIAG</name>
<brief>Cause of the communications error F_RECVDP</brief>
<description>$A_FRDP_DIAG[n]
n = F_RECVDP relationship (1...16)
The system variable indicates the cause of the communication (bit 4 - 5) or system (bit 13 - 15) error determined by F_RECVDP.
Bits 0 - 3: Reserved
Bit 4:    1 = Timeout detected
Bit 5:    1 = Sequence number error detected
Bit 6:    1 = CRC error detected
Bits 7 - 12: Reserved
Bit 13:   1 = Discrepancies in the F telegram data (TelegramDiscrepancy)
Bit 14:   1 = Sign-of-life monitoring (LifeSign)
Bit 15:   1 = Asynchronous error state (StateFault)
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$A_FRDP_SENDMODE</name>
<brief>Safety mode inactive in the communication partner</brief>
<description>$A_FRDP_SENDMODE[n]
n = F_RECVDP relationship (1...16)
The system variable shows the current mode of the F-CPU of the F_SENDDP communication partner:
TRUE = The F-CPU is in deactivated safety mode
FALSE = The F-CPU is in safety mode
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$VA_IS</name>
<brief>Safe actual  position NCK</brief>
<description>$VA_IS[X]
X = axis identifier
Safe actual position for NCK monitoring channel
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_STOPSI</name>
<brief>Stop by Safety Integrated</brief>
<description>$VA_STOPSI[X]
X = axis identifier
Current Safety Integrated  Stop for the relevant axis
Value   Meaning
-1      No Stop
0       Stop A
1       Stop B
2       Stop C
3       Stop D
4       Stop E
5       Stop F
10      Test Stop NC
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_XFAULTSI</name>
<brief>Stop F by data cross-check error active</brief>
<description>$VA_XFAULTSI[X]
X = axis identifier
Information about Safety Integrated Stop F for this axis:
Bit 0 set:  An actual value error has been detected by the data cross-check between NCK and drive.
Bit 1 set:  Any error has been detected by the data cross-check between NCK and drive, and the waiting time (&lt;&gt;0) before triggering Stop B ($MA_SAFE_STOP_SWITCH_TIME_F) is running or has expired.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$VA_SAFE_TYPE</name>
<brief>Axial Safety mode</brief>
<description>$VA_SAFE_TYPE[X]
X = Axis identifier
Information about the active Safety Integrated mode of this axis:
= 0: No Safety Integrated motion monitoring active.
= 1: Safety Integrated NCK-integrated motion monitoring active.
= 2: Safety Integrated drive-based motion monitoring active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_RM</name>
<brief>Synact Real parameters for GUD2 block</brief>
<description>SYG_RM[n] Synact Real parameters in GUD2 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_IM</name>
<brief>Synact Integer parameters for GUD2 block</brief>
<description>SYG_IM[n] Synact Integer parameters in GUD2 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_BM</name>
<brief>Synact Boolean parameters for GUD2 block</brief>
<description>SYG_BM[n] Synact Boolean parameters in GUD2 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_AM</name>
<brief>Synact Axis parameters for GUD2 block</brief>
<description>SYG_AM[n] Synact axis parameters in GUD2 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_CM</name>
<brief>Synact char parameters for GUD2 block</brief>
<description>SYG_CM[n] Synact char parameters in GUD2 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_SM</name>
<brief>Synact string parameters for GUD2 block</brief>
<description>SYG_SM[n] Synact parameter string in GUD2 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_RU</name>
<brief>Synact Real parameters for UGUD block</brief>
<description>SYG_RU[n] Synact Real parameters in UGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_IU</name>
<brief>Synact Integer parameters for UGUD            block</brief>
<description>SYG_IU[n] Synact Integer parameters in UGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_BU</name>
<brief>Synact Boolean parameters for UGUD block</brief>
<description>SYG_BU[n] Synact Boolean parameters in UGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_AU</name>
<brief>Synact Axis parameters for UGUD block</brief>
<description>SYG_AU[n] Synact Axis parameters in UGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_CU</name>
<brief>Synact char parameters for UGUD block</brief>
<description>SYG_CU[n] Synact char parameters in UGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_SU</name>
<brief>Synact string parameters for UGUD block</brief>
<description>SYG_SU[n] Synact parameter string in UGUD block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least three GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R4</name>
<brief>Synact Real parameters for GUD4 block</brief>
<description>SYG_R4[n] Synact Real parameters in GUD4 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I4</name>
<brief>Synact Integer parameters for GUD4 block</brief>
<description>SYG_I4[n] Synact Integer parameters in GUD4 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B4</name>
<brief>Synact Boolean parameters for GUD4 block</brief>
<description>SYG_B4[n] Synact Boolean parameters in GUD4 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A4</name>
<brief>Synact Axis parameters for GUD4 block</brief>
<description>SYG_A4[n] Synact Real parameters in GUD4 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C4</name>
<brief>Synact Char parameters for GUD4 block</brief>
<description>SYG_C4[n] Synact Char parameters in GUD4 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S4</name>
<brief>Synact String parameters for GUD4 block</brief>
<description>SYG_S4[n] Synact parameter string in GUD4 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least four GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R5</name>
<brief>Synact Real parameters for GUD5 block</brief>
<description>SYG_R5[n] Synact Real parameters in GUD5 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I5</name>
<brief>Synact Integer parameters for GUD5 block</brief>
<description>SYG_I5[n] Synact Integer parameters in GUD5 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B5</name>
<brief>Synact Boolean parameters for GUD5 block</brief>
<description>SYG_B5[n] Synact Boolean parameters in GUD5 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A5</name>
<brief>Synact Axis parameters for GUD5 block</brief>
<description>SYG_A5[n] Synact Axis parameters in GUD5 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C5</name>
<brief>Synact Char parameters for GUD5 block</brief>
<description>SYG_C5[n] Synact Char parameters in GUD5 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S5</name>
<brief>Synact String parameters for GUD5 block</brief>
<description>SYG_S5[n] Synact parameter string in GUD5 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least five GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R6</name>
<brief>Synact Real parameters for GUD6 block</brief>
<description>SYG_R6[n] Synact Real parameters in GUD6 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I6</name>
<brief>Synact Integer parameters for GUD6 block</brief>
<description>SYG_I6[n] Synact Integer parameters in GUD6 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B6</name>
<brief>Synact Boolean parameters for GUD6 block</brief>
<description>SYG_B6[n] Synact Boolean parameters in GUD6 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A6</name>
<brief>Synact Axis parameters for GUD6 block</brief>
<description>SYG_A6[n] Synact Axis parameters in GUD6 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C6</name>
<brief>Synact Char parameters for GUD6 block</brief>
<description>SYG_C6[n] Synact Char parameters in GUD6 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S6</name>
<brief>Synact String parameters for GUD6 block</brief>
<description>SYG_S6[n] Synact parameter string in GUD6 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least six GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R7</name>
<brief>Synact Real parameters for GUD7 block</brief>
<description>SYG_R7[n] Synact Real parameters in GUD7 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I7</name>
<brief>Synact Integer parameters for GUD7 block</brief>
<description>SYG_I7[n] Synact Integer parameters in GUD7 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B7</name>
<brief>Synact Boolean parameters for GUD7 block</brief>
<description>SYG_B7[n] Synact Boolean parameters in GUD7 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A7</name>
<brief>Synact Axis parameters for GUD7 block</brief>
<description>SYG_A7[n] Synact Axis parameters in GUD7 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C7</name>
<brief>Synact Char parameters for GUD7 block</brief>
<description>SYG_C7[n] Synact Char parameters in GUD7 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S7</name>
<brief>Synact String parameters for GUD7 block</brief>
<description>SYG_S7[n] Synact parameter string in GUD7 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least seven GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R8</name>
<brief>Synact Real parameters for GUD8 block</brief>
<description>SYG_R8[n] Synact Real parameters in GUD8 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I8</name>
<brief>Synact Integer parameters for GUD8    block</brief>
<description>SYG_I8[n] Synact Integer parameters in GUD8 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B8</name>
<brief>Synact Boolean parameters for GUD8 block</brief>
<description>SYG_B8[n] Synact Boolean parameters in GUD8 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A8</name>
<brief>Synact Axis parameters for GUD8 block</brief>
<description>SYG_A8[n] Synact Axis parameters in GUD8 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C8</name>
<brief>Synact Char parameters for GUD8 block</brief>
<description>SYG_C8[n] Synact Char parameters in GUD8 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S8</name>
<brief>Synact String parameters for GUD8 block</brief>
<description>SYG_S8[n] Synact parameter string in GUD8 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least eight GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_R9</name>
<brief>Synact Real parameters for GUD9       block</brief>
<description>SYG_R9[n] Synact Real parameters in GUD9 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_I9</name>
<brief>Synact Integer parameters for GUD9 block</brief>
<description>SYG_I9[n] Synact Integer parameters in GUD9 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_B9</name>
<brief>Synact Boolean parameters for GUD9 block</brief>
<description>SYG_B9[n] Synact Boolean parameters in GUD9 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_A9</name>
<brief>Synact Axis parameters for GUD9 block</brief>
<description>SYG_A9[n] Synact Axis parameters in GUD9 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_C9</name>
<brief>Synact Char parameters for GUD9 block</brief>
<description>SYG_C9[n] Synact Char parameters in GUD9 block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_S9</name>
<brief>Synact String parameters for GUD9 block</brief>
<description>SYG_S9[n] Synact parameter string in GUD9 block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least nine GUD blocks must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>SYG_RS</name>
<brief>Synact Real parameters for SGUD block</brief>
<description>SYG_RS[n] Synchronization Real parameters in SGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>SYG_IS</name>
<brief>Synact Integer parameters for SGUD   block</brief>
<description>SYG_IS[n] Synact Integer parameters in SGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>SYG_BS</name>
<brief>Synact Boolean parameters for SGUD block</brief>
<description>SYG_BS[n] Synact Boolean parameters in SGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="AXIS" dim="1">
<name>SYG_AS</name>
<brief>Synact axis parameters for SGUD block</brief>
<description>SYG_AS[n] Synchronization axis parameters in SGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>SYG_CS</name>
<brief>Synact char parameters for SGUD block</brief>
<description>SYG_CS[n] Synchronization Char parameters in SGUD block.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>SYG_SS</name>
<brief>Synact string parameters for SGUD block</brief>
<description>SYG_SS[n] Synchronized action parameter string in SGUD block. The maximum string length has been limited to 31 characters.
A protection level can be assigned to the parameters with REDEF.
In order to create the parameters, at least one GUD block must be activated with MD $MN_MM_NUM_GUD_MODULES.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NK_NAME</name>
<brief>Name of chain element</brief>
<description>Name of the nth element of a kinematic chain. The maximum possible number of chain elements is set in MD $MN_MM_MAXNUM_KIN_CHAIN_ELEM.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NK_NEXT</name>
<brief>Name of next chain element</brief>
<description>Name of the next chain element. This means that, in contrast to the system variable $NK_PARALLEL, the subchain referenced by $NK_NEXT branches off at the end of the current chain element. An empty string "" means the end of the chain.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NK_PARALLEL</name>
<brief>Name of a parallel chain element</brief>
<description>Name of a chain element that branches off in parallel to the current chain element. This means that, in contrast to the system variable $NK_NEXT, the subchain referenced by $NK_PARALLEL branches off at the start of the current chain element. An empty string "" means that a parallel chain element is not present.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NK_TYPE</name>
<brief>Type of chain link</brief>
<description>Type of chain link
The following types are  permitted (No distinction is made between upper and lower case letters):
"OFFSET"
"AXIS_LIN"
"AXIS_LIN_VIRT"
"AXIS_ROT"
"AXIS_ROT_VIRT"
"ROT_CONST"
"SWITCH"
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NK_OFF_DIR</name>
<brief>Offset or directional vector</brief>
<description>Describes the 3 components of the offset vector of a constant chain link or the direction of the axis of a variable chain link. If the vector describes a direction, the value of the vector must not equal 0. Otherwise not relevant.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NK_AXIS</name>
<brief>Axis name, frame name</brief>
<description>Name of axis or frame.
The content of this component is not evaluated for the element types "OFFSET" and "ROT_CONST" ($NK_TYPE). For all other element types, it must be ensured that a corresponding element (axis, frame) with the specified name exists. No distinction is made between upper and lower case letters.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NK_A_OFF</name>
<brief>Axis offset</brief>
<description>Is relevant only if the chain link describes an axis. In this case, this element indicates the position of the axis in the zero point. In the case of linear axes, this value is redundant as it can also be replaced by a changed offset of the previous link.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NK_SWITCH_INDEX</name>
<brief>Switch index</brief>
<description>
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NK_SWITCH_POS</name>
<brief>Switch position</brief>
<description>Indicates at which position of a switch in the kinematic chain, a connection is established between the input of the element and the output $NK_NEXT. This system variable is only evaluated for "SWITCH" type chain elements.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NK_SWITCH</name>
<brief>Switch control</brief>
<description>Position of a switch in a kinematic chain.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_NAME</name>
<brief>Name of the transformation data set</brief>
<description>Name of the transformation data set n.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_TRAFO_TYPE</name>
<brief>Transformation type</brief>
<description>The same type of transformation applies as for the transformation data set.
Only certain reserved key words are permitted for the content of this system data.

The valid key words are currently:
- TRAORI          for dynamic orientation transformations
- TRAORI_STAT     for static orientation transformations
- TRAANG_K        for transformations without orientation axes. The geometry axes need not be at right angles to each other (inclined axis transformation).
- TRANSMIT_K      for polar transformations
- TRAFO_OEM       for OEM transformations that are implemented in a CC, but without orientation axes.
- TRAFO_OEM_ORI   for OEM transformations that are implemented in a CC with orientation axes.
-
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_T_CHAIN_LAST_ELEM</name>
<brief>Last elem. of the kin. chain to the tool</brief>
<description>Name of an element in the kinematic description of the machine. This chain element indicates the last link of a kinematic chain. It defines the point of the transformation at which the tool starts.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_P_CHAIN_LAST_ELEM</name>
<brief>Last element of the kin. chain to the workpiece</brief>
<description>Name of an element in the kinematic description of the machine. This chain element indicates the last link in a kinematic chain. It defines the workpiece zero.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_T_REF_ELEM</name>
<brief>Reference point for tool length calculation</brief>
<description>This system variable refers to the reference point for the tool length calculation (tool reference point). The tool reference point is the starting point of the described kinematic element. The tool reference point defines the point in the kinematic chain, where tool wear components can be included, their orientation can be rotated in comparison with basic length components, see the description of the G codes in Group 56 (inclusion of the tool wear). If the system variable is not empty, it must contain the name of a chain element, which is the core element of the current chain to the tool.
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_GEO_AX_NAME</name>
<brief>Names of the linear axes</brief>
<description>This system data refers to a maximum of 3 machine axes. It contains the names of the chain links ($NK_NAME), which define the axes, which must execute the compensation motions, which result from a kinematic transformation. These axes can be both linear axes (e.g. for all orientation transformations) and rotary axes (e.g. the rotary axis for TRANSMIT). The sequence of these axes defines the assignment of the geometrical axes to the channel axes in accordance with the machine data $MC_AXCONF_GEO_AX_ASSIGN_TAB.

Example:
The system data $NT_GEO_AX_NAME[n,1] refers to a chain link which contains the rotary machine axis C1. In the current channel, C1 would be the 7th axis. In the case of an active transformation, this entry has the same meaning as the entry $MC_AXCONF_GEOAX_ASSIGN_TAB[1] = 7 for a deactivated transformation.
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_ROT_AX_NAME</name>
<brief>Names of the rotary axes</brief>
<description>This system data refers to a maximum of 3 axes used for setting the orientation. It contains the names of the chain links ($NK_NAME), which define the machine axes (rotary axes), which must execute the orientation motions, which result from a kinematic transformation. The sequence in which the maximum of three rotary axes are contained in this system data is insignificant for machine kinematics, as this is derived from the structure of the kinematic chains. It does, however, define the sequence which also refers to rotary axes (e.g. the Hirth parameters) and the access to the rotary axes.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_ROT_AX_POS</name>
<brief>Position of a manual rotary axis</brief>
<description>This system variable is of significance only if the rotary axis, which refers to ($NT_ROT_AX_NAME), is a manual rotary axis. In this case, the rotary axis position is the result of the total of these system variables and the system variables $NK_A_OFF and $NK_A_OFF_FINE of the affected kinematic chain element.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_HIRTH_OFF</name>
<brief>Offset of the Hirth tooth system</brief>
<description>Offset of the Hirth tooth system.
A Hirth tooth system is activated for a rotary axis if the associated system data $NT_HIRT_INC[n, i] does not contain a value of 0. At a specified setpoint position PHIset of a rotary axis, the currently set angle results in

  PHIact = $NT_HIRTH_OFF[n, i] + k * $NT_HIRTH_INC

whereby k is an integer and is selected in such a way that the difference between PHIact and PHIset is minimized.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_HIRTH_INC</name>
<brief>Increment of the Hirth tooth system</brief>
<description>Increment of the Hirth tooth system.
A Hirth tooth system is activated for a rotary axis if this system data does not contain a value of 0. At a specified setpoint position PHIset of a rotary axis, the currently set angle results in

PHIact = $NT_HIRTH_OFF[n, i] + k * $NT_HIRTH_INC

whereby k is an integer and is selected in such a way that the difference between PHIact and PHIset is minimized.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_ROT_AX_MIN</name>
<brief>Minimum position of a rotary axis</brief>
<description>This system variable is evaluated only if $NT_ROT_AX_MIN[n, i] and $NT_ROT_AX_MAX[n,i] are not set to zero. In this case, it indicates the minimum permitted position of the rotary axis, which is referred to with $NT_ROT_AX_NAME[n, i].
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_ROT_AX_MAX</name>
<brief>Maximum position of a rotary axis</brief>
<description>This system variable is evaluated only if $NT_ROT_AX_MIN[n, i] and $NT_ROT_AX_MAX[n,i] are not set to zero. In this case, it indicates the maximum permitted position of the rotary axis, which is referred to with $NT_ROT_AX_NAME[n, i].
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_BASE_ORIENT</name>
<brief>Vector of the tool base orientation for orientation transfor</brief>
<description>Indicates the vector of the tool orientation in the general orientation transformation. The vector becomes effective only if the tool orientation is not indicated when the transformation is called up or read from a programmed tool. The vector can equal any amount, but this must not be equal to zero.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_BASE_ORIENT_NORMAL</name>
<brief>Norm. vector for orientation transformers with 3 orientation degs. of freedom</brief>
<description>Indicates a vector that is perpendicular to the tool orientation ($NT_BASE_ORIENT) in the case of orientation transformations with 3 degrees of freedom. The vector becomes effective only if the tool orientation is not indicated when the transformation is called up or read from a programmed tool. The vector can equal any amount, but this must not be equal to zero. If $NT_BASE_ORIENT_NORMAL and $NT_BASE_ORIENT are neither orthogonal nor parallel, the two vectors are orthogonalized by modifying the normal vector. The normal vector is now in the plane, which is defined by both vectors and rotated in such a way that the two vectors are positioned orthogonally. The two named vectors must not be parallel.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NT_POLE_LIMIT</name>
<brief>End angle toler. with interpol. through pole for 5/6-axis transf.</brief>
<description>This MD designates an end angle tolerance for the fifth axis of the first 5-axis transformation with the following properties:
With the interpolation through the pole point, only the 2nd rotary axis moves, the 2nd rotary axis retains its starting position. If a motion is programmed that does not run exactly through the pole point but is to run near the pole within the area given by MD: TRA FO5_NON_POLE_LIMIT then there is a deviation from the defined path, as the interpolation runs exactly through the pole point. This results in a deviation in the position of the end point of the fourth axis (the polar axis) from the programmed value. This MD defines the angle by which the polar axis may deviate from the programmed value with 5-axis transformation when switching from the programmed interpolation to the interpolation through the pole point. An error message (alarm 14112) is output if there is a greater deviation and the interpolation is not executed.

Not relevant:
   If the "5-Axis Transformation" option is not installed.
   Also irrelevant with programming in the machine coordinate system ORIMKS.

Related to:
   MD: TRAFO5_NON_POLE_LIMIT_n
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NT_POLE_TOL</name>
<brief>End angle tolerance for pole interpolation</brief>
<description>End angle tolerance for interpolation through the pole for the 1st 5/6-axis transformation. This MD is evaluated only by the generic 5/6-axis transformation. If the end orientation lies within the pole cone and within the tolerance cone specified by means of this MD, the pole axis does not move and retains its start position. The other rotary axis, however, moves to the programmed angle. This results in a deviation of the end orientation from the programmed orientation. The maximum active value of this MD is the value of MD TRAFO5_POLE_LIMIT_1, which is used to define the pole cone.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$NT_ROT_OFFSET_FROM_FRAME</name>
<brief>Transfer rotary axis offset from the work offset when selecting the transformer</brief>
<description>For orientation transformations:
If the content of this data is not equal to zero, the programmable offset for orientation axes is automatically accepted from the work offset active for the orientation axes on switch-on of an orientation transformation.

For Transmit:
0:   Axial offset of the rotary axis is not considered.
1:   Axial offset of the rotary axis is considered.
2:   Axial offset of the rotary axis is considered until SZS.
     SZS frames include transformed rotations around the rotary axis.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$NT_IGNORE_TOOL_ORIENT</name>
<brief>Read out tool orientation from $NT_BASE_ORIENT</brief>
<description>Each tool has a defined tool orientation, which is normally used in the case of orientation programming to form the basis of calculating motions or the end points of the orientation axes. If this system data is set, the $NT_BASE_ORIENT / $NT_BASE_ORIENT_NORMAL orientation contained in the system data is used in place of the tool orientation, even in the case of an active tool.
</description>
</parameter>

<parameter type="BOOL" dim="1">
<name>$NT_TRAFO_INCLUDES_TOOL</name>
<brief>Tool handling with active transformation</brief>
<description>This system variable indicates whether the tool for an active transformation is handled internally or externally. It is only evaluated for certain transformations. The prerequisite for an evaluation is that the orientation of the tool in relation to the basic coordinate system cannot be modified by the transformation. In the case of standard transformations, this condition is only met for the "inclined axis transformation". If this system variable is set, the basic coordinate system (BCS) refers to the tool reference point even in the case of an active transformation, in all other cases it refers to the tool center point (TCP). The operation of protection zones and working area limitations varies accordingly.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_AUX_POS</name>
<brief>Auxiliary position</brief>
<description>This system variable contains a position vector for use by measuring cycles. It does not have any meaning within NCK.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$NT_IDENT</name>
<brief>Identifier</brief>
<description>This system variable contain a numerical ID for identifying a transformation data set for use by measuring cycles. They do not have any meaning within NCK.
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_CORR_ELEM_T</name>
<brief>Names of correction elements</brief>
<description>With this system data, a maximum of 4 constant chain elements ($NK_NAME) are referred to in the part chain. These are intended to include offset/correction values (linear offsets), determined in the measuring cycles, for example. (Initially) it is only of significance for orientation transformation. In the kinematic chain, an orientation axis must always be located between two of these elements. This means that only for 6-axis trans formations, where all 3 orientation axes are defined in the tool chain, all 4 chain elements can also be occupied, while e.g. for 5-axis transformations, this system data may only include a maximum of three entries. The complete kinematic chain from the machine zero (reference point of the kinematic chain) up to the workpiece zero is subdivided into a maximum of 4 sections by the orientation axes. In each of these sections, they can only be a maximum of one correction element. The correction element with index n must be located in the nth section (example: $NT_CORR_ELEM_T[k, 1] must refer to a chain element between the first and second orientation axis in the part chain)
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_CORR_ELEM_P</name>
<brief>Names of correction elements</brief>
<description>With this system data, a maximum of 4 constant chain elements ($NK_NAME) are referred to in the part chain. These are intended to include offset/correction values (linear offsets), determined in the measuring cycles, for example. (Initially) it is only of significance for orientation transformation. In the kinematic chain, an orientation axis must always be located between two of these elements. This means that only for 6-axis trans formations, where all 3 orientation axes are defined in the tool chain, all 4 chain elements can also be occupied, while e.g. for 5-axis transformations, this system data may only include a maximum of three entries. The complete kinematic chain from the machine zero (reference point of the kinematic chain) up to the workpiece zero is subdivided into a maximum of 4 sections by the orientation axes. In each of these sections, they can only be a maximum of one correction element. The correction element with index n must be located in the nth section (example: $NT_CORR_ELEM_P[k, 1] must refer to a chain element between the first and second orientation axis in the part chain).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NT_CNTRL</name>
<brief>Bit-coded control word</brief>
<description>This data is a bit-coded control word which can be used to influence the response in specific situations.

The individual bits have the following meanings:

Bit 0:
Not assigned

Bits 1 - 3:
The orientation axis, to which the bit is assigned (bit 1: first orientation axis, bit 2: second orientation axis, bit 3: third orientation axis) is interpreted as speed-controlled spindle. Presently, only cases are supported, where either the first or third orientation axis is parameterized as a spindle (turning on milling machines or 5-axis milling on machines where the third orientation axis is not operated with position control).

Bits 4 - 6:
The orientation axis, which is assigned to the bit (bit 4: first orientation axis, bit 5: second orientation axis, bit 6: third orientation axis) is Hirth gearing. For the Hirth gearing, only machine data $MA_INDEX_AX_NUMERATOR, $MA_INDEX_AX_DENOMINATOR and $MA_INDEX_AX_OFFSET are evaluated. The content of machine data $MA_HIRTH_IS_ACTIVE is not evaluated, i.e. the axis does not have to be parameterized as a real Hirth axis. If the axis is parameterized as modulo axis, machine data $MA_INDEX_AX_NUMERATOR is replaced by machine data $MA_MODULO_RANGE. The distances of the permissible axis positions are then obtained from $MA_MODULO_RANGE / $MA_INDEX_AX_DENOMINATOR. Machine data $MA_INDEX_AX_OFFSET is also evaluated for modulo axes.

Bits 7 - 8:
If these bits are set, then at the start points of the part chains (bit7: part chain: bit 8: tool chain) when required, internally additional constant chain elements are automatically inserted, which establish a connection from the start of the chain to the machine zero ("Close chain").

Bits 12 - 15:
Reserved for OEM transformations. These bits can have different meanings with the different OEM transformations.

Bit 12:
A standard pole handling, that relates only to the orientation, is activated for an OEM orientation transformation.

Bits  16 - 31:
Not assigned
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_CLOSE_CHAIN_P</name>
<brief>Point to close the part chain.</brief>
<description>This system data refers to an element of the kinematic chain, whose end point is used as reference point for "closing" the part chain. When closing the kinematic chain, at the start point, such an offset element is inserted so that for the zero position of all axes, the specified reference point coincides with the start point of the chain. If the system data is empty, then the reference point is the end point of the chain.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NT_CLOSE_CHAIN_T</name>
<brief>Point to close the tool chain.</brief>
<description>This system data refers to an element of the kinematic chain, whose end point is used as reference point for "closing" the part chain. When closing the kinematic chain, at the start point, such an offset element is inserted so that for the zero position of all axes, the specified reference point coincides with the start point of the chain. If the system data is empty, then the reference point is the end point of the chain.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NT_TRAFO_INDEX</name>
<brief>Index for transformation call with conventional syntax</brief>
<description>A transformation defined by kinematic chains can also be activated by conventional language commands, such as TRAORI(&lt;n&gt;) or TRANSMIT(&lt;n&gt;), instead of the call TRAFOON(&lt;Name&gt;), if a value not equal to zero is entered in this system data. The content of the system variable is decimal-coded.

The decimal places have the following meanings:

Units digit:
Defines the transformation type for which the conventional transformation call is to be diverted to a transformation defined by kinematic chains. The following assignments apply:
          1: TRAORI
          2: TRANSMIT
          3: TRACYL
          4: TRAANG
          5: TRACON

Tens and hundreds digits:
Transformer number (double digit)

Thousands and ten thousands digits:
Number of the channel in which the conventional transformation call is to be diverted to a transformation defined by kinematic chains. The entry 0 is equivalent to the entry 1. This means that the definition automatically applies to the first channel if the channel number is not explicitly defined. For a transformation defined by kinematic chains to be called by a conventional language command, the three lowest-value decimal places of this system data must not equal zero. The orientation transformation indicated by the index 1 is also activated for compatibility reasons with the conventional call syntax with TRAORI(0), TRAORI() or TRAORI but not with TRAORI(1). The same applies to the other transformation types (TRANSMIT, TRACYL, TRAANG and TRACON).

Example:
The call TRANSMIT(3) in the fifth channel is diverted to a transformation defined by kinematic chains that contains the entry 5032 in the system data $NT_TRAFO_INDEX. Whether the called transformation is of a type compatible with the transformation type of the original call is not checked.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NT_POLE_SIDE_FIX</name>
<brief>Restriction of working area in front of/behind pole with TRANSMIT</brief>
<description>Restriction of working area in front of/behind pole or no restriction, i.e. traversal through the pole.
The assigned values have the following meanings:
0: No restriction of the working area. Traversal through the pole is allowed.
1: Working area of linear axis for positions &gt;=0,
   (if tool length compensation parallel to linear axis = 0)
2: Working area of linear axis for positions &lt;=0,
   (if tool length compensation parallel to linear axis = 0)
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$NT_ROT_AX_CNT</name>
<brief>Number of rotary axes in the part or tool chain</brief>
<description>This system variable can contain the number of relevant rotary axes of a transformation in the part chain (index 0) or tool chain (index 1). It is used to support the parameterization of a transformation with kinematic chains via the user interface. If the contents of both components are -1 (initialization value), their content is not evaluated. If the content of at least one component is not equal to zero, the contents of both components must be the same as the number of relevant  rotary axes found by the analysis of the kinematic chains. Relevant rotary axes in this sense are those rotary axes defined in the $NT_ROT_AX_Name system variable.
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_TRACON_CHAIN</name>
<brief>Name of the partial transformation</brief>
<description>This system variable is only relevant for transformation type $NT_TRAFO_TYPE[] = "TRACON_K". Consequently, the names of the partial transformations are given in the order that the transformation from BCS to MCS is to be evaluated.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$NT_OEM_PAR_I</name>
<brief>Parameter for OEM transformation</brief>
<description>This integer parameter is evaluated by OEM transformations. The meaning of the individual parameter values depends on the respective OEM transformation. The details are described in the documentation of the particular OEM transformation.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NT_OEM_PAR_D</name>
<brief>Parameter for OEM transformation</brief>
<description>This real parameter is evaluated by OEM transformations. The meaning of the individual parameter values depends on the respective OEM transformation. The details are described in the documentation of the particular OEM transformation.
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NT_OEM_PAR_S</name>
<brief>Parameter for OEM transformation</brief>
<description>This string parameter is evaluated by OEM transformations. The meaning of the individual parameter values depends on the respective OEM transformation. The details are described in the documentation of the particular OEM transformation.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_PROT_NAME</name>
<brief>Name of protection area</brief>
<description>Name of protection area n.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_CHAIN_ELEM</name>
<brief>Assignment to a kinematic chain element</brief>
<description>This system variable states which kinematic chain element ($NK_NAME[..]) is assigned to the current protection area.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_PROT_TYPE</name>
<brief>Type of protection area</brief>
<description>Type of protection area. The following values are permitted:
"MACHINE"
"TOOL"
"WORKPIECE"
"FIXTURE"
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_1ST_PROT</name>
<brief>Name of first element of a protection area</brief>
<description>Name of first element of a protection area.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NP_PROT_COLOR</name>
<brief>Color of the protection area.</brief>
<description>Data for visualizing a protection area element.
The 3 low-value bytes contain the color information in RGB format, the highest byte contains the information for the alpha channel (transparency). This data is only active for a protection area element that is part of the protection area for which this data is defined if a separate color parameter has not been defined for it (see system data $NP_COLOR), this means that the color definition for a protection area element has priority over the color definition of a protection area. The default value is 0 (black, transparent).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NP_PROT_D_LEVEL</name>
<brief>Detailing level of a protection area</brief>
<description>Data for visualizing a protection area.
This data contains an integer value which defines when the relevant protection area is to be displayed in the successive generations of the display. This data is only active for a protection area element that is part of the protection area for which this data is defined if a separate D-level parameter has not been defined for it (see system data $NP_D_LEVEL), this means that the D-level definition for a protection area element has priority over the D-level definition of a protection area. The default value is 0.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NP_BIT_NO</name>
<brief>No. of interface bit for switchover activated / preactivated</brief>
<description>64 bits are defined in the PLC interface through which protection areas can be activated once they have been preactivated with the command PROTA(1(,.,.,.)). The entry indicates which bit has been assigned to this protection area. The default value is -1, i.e. no interface bit has been assigned to this protection area.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$NP_INIT_STAT</name>
<brief>Default activation status of a protection area</brief>
<description>Activation status of the protection area at first selection without indication of an activation status. This status is activated for defined protection areas also during runup of the control.

The permitted values are:
Activated ('A' or 'a'),
Inactivated ('I' or 'i'),
Preactivated ('P' or 'p').
Default value is 'I'.
</description>
</parameter>

<parameter type="INT" dim="2">
<name>$NP_INDEX</name>
<brief>Index for tool identifier</brief>
<description>This component is evaluated only if $NP_PROT_TYPE[n] contains an automatically generated protection area named ("TOOL"). The indices then define the exact type of the automatically generated protection area.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_NAME</name>
<brief>Name of protection zone element</brief>
<description>Name of protection zone element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_NEXT</name>
<brief>Name of next protection zone element</brief>
<description>Name of next protection zone element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_NEXTP</name>
<brief>Name of the next parallel protection area element</brief>
<description>Name of another protection area element ("parallel" to $NP_NEXT) that follows the current protection area element.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_ADD</name>
<brief>Name of an additive protection zone</brief>
<description>Name of protection element to be added to the current protection zone.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NP_COLOR</name>
<brief>Color of the protection area element.</brief>
<description>Data for visualizing a protection area element.
For the coding, see the system variable $NP_PROT_COLOR. If the content of this data is 0, then the color is not defined. In this case, the protection area element is given the color defined for the protection area in which it is contained. The default value is 0 (color not defined).
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$NP_D_LEVEL</name>
<brief>Detailing level of a protection area element</brief>
<description>Data for visualizing a protection area element.
If the content of this data is 0, then the detailing level is not defined. In this case, the protection area element is given the detailing level defined for the protection area in which it is contained. The default value is 0.
</description>
</parameter>

<parameter type="CHAR" dim="1">
<name>$NP_USAGE</name>
<brief>Intended use of the protection area.</brief>
<description>This system variable defines whether the protection area element is to be visualized ('V'), is to be included in the protection area monitoring ('C'), or both ('A'). No distinction is made between upper and lower case letters. The default value is 'A'.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_TYPE</name>
<brief>Type of protection area element</brief>
<description>Type of protection area element. The following types are possible:
FRAME: An element of this type does not contain a body, it only defines a frame, which is active for the subsequent protection area definitions.
1. BOX (L, W, H): Axis-parallel cuboid, symmetrically arranged around the zero point, with the dimensions L in the X direction, W in the Y direction and H in the Z direction, i.e. the corners of the cuboid are located at (+/-L/2, +/-W/2, +/-H/2).
2. SPHERE (R): Sphere centered in the zero point with radius R.
3. CYLINDER (H, R): Cylinder with radius R and height H, longitudinal axis parallel to Z axis. The center point of the cylinder lies at the zero point, i.e. the two limiting circular areas are parallel to the X-Y plane and are located at +/-H/2.
4. FILE: Grid of triangular areas in STL format.
</description>
</parameter>

<parameter type="STRING" dim="1">
<name>$NP_FILENAME</name>
<brief>File name of a protection area element of the type "FILE"</brief>
<description>This parameter is evaluated only if the protection area element is the type "File" ($NP_TYPE[..] = "FILE"). In which case, it defines the name of the file containing the description of the protection area element.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_PARA</name>
<brief>Parameters for describing the type</brief>
<description>Parameters for describing the protection area element. A maximum of 3 parameters are required for the types described under $NP_TYPE.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_OFF</name>
<brief>Offset component</brief>
<description>Component i (0&lt;=i&lt;=2) of the offset vector of protection zone element n.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$NP_DIR</name>
<brief>Direction of rotary axis</brief>
<description>Components of the rotary axis for a coordinate rotation of the protection area element n.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NP_ANG</name>
<brief>Angle of a coordinate rotation in the protection area element n.</brief>
<description>Angle (in degrees) of a coordinate rotation in protection area element n
</description>
</parameter>

<parameter type="STRING" dim="3">
<name>$NP_COLL_PAIR</name>
<brief>Protection area pairs</brief>
<description>Contains the names of two protection areas that can be monitored to prevent them colliding with each other.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$NP_SAFETY_DIST</name>
<brief>Safety distance of a pair of protection areas</brief>
<description>Safety distance of a pair of protection areas. If the content of this data is 0.0, the global safety distance contained in $MN_COLLISION_SAFETY_DIST is effective.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$P_WORKAREA_CS_COORD_SYSTEM</name>
<brief>Coordinate system to which the working area limitation applies</brief>
<description>Coordinate system in which the group is to apply.
The following values apply:
   Working area limitation in the WCS
   Working area limitation in the SZS
</description>
</parameter>

<parameter type="BOOL" dim="2">
<name>$P_WORKAREA_CS_PLUS_ENABLE</name>
<brief>Coordinate system-specific working area limitation plus valid</brief>
<description>TRUE: The coordinate system-specific working area limitation in the plus direction is valid for the stated axis of the stated group. (See $P_WORKAREA_CS_LIMIT_PLUS[ groupNo-1, ax])
</description>
</parameter>

<parameter type="BOOL" dim="2">
<name>$P_WORKAREA_CS_MINUS_ENABLE</name>
<brief>Coordinate system-specific working area limitation minus valid</brief>
<description>TRUE: The coordinate system-specific working area limitation in the minus direction is valid for the stated axis of the stated group. (See $P_WORKAREA_CS_LIMIT_MINUS[ groupNo-1, ax])
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_WORKAREA_CS_LIMIT_PLUS</name>
<brief>Coordinate system-specific working area limitation positive</brief>
<description>The coordinate system-specific working area limitation in the plus direction for the stated axis of the stated group. This value is evaluated only if $P_WORKAREA_CS_PLUS_ENABLE[ groupNo-1, ax] = TRUE.
</description>
</parameter>

<parameter type="DOUBLE" dim="2">
<name>$P_WORKAREA_CS_LIMIT_MINUS</name>
<brief>Coordinate system-specific working area limitation negative</brief>
<description>The coordinate system-specific working area limitation in the minus direction for the stated axis of the stated group. This value is evaluated only if $P_WORKAREA_CS_MINUS_ENABLE[ groupNo-1, ax] = TRUE.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_H</name>
<brief>ISO2 tool length offset</brief>
<description>$TC_ISO_H[n]
Correction value memory for the geometry of the tool length compensation in ISO2 mode.
Is available only if ISO2 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_HW</name>
<brief>ISO2 tool length wear</brief>
<description>$TC_ISO_HW[n]
Correction value memory for the wear of the tool length compensation in ISO2 mode.
Is available only if ISO2 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_D</name>
<brief>ISO2 tool radius offset</brief>
<description>$TC_ISO_D[n]
Correction value memory for the geometry of the tool radius in ISO2 mode.
Is available only if ISO2 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_DW</name>
<brief>ISO2 tool radius wear</brief>
<description>$TC_ISO_DW[n]
Correction value memory for the wear of the tool radius in ISO2 mode.
Is available only if ISO2 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L1</name>
<brief>ISO3 tool length 1 offset</brief>
<description>$TC_ISO_L1[n]
Correction value memory for the geometry of tool length 1 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L1W</name>
<brief>ISO3 tool length 1 wear</brief>
<description>$TC_ISO_L1W[n]
Correction value memory for the wear of tool length 1 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L2</name>
<brief>ISO3 tool length 2 offset</brief>
<description>$TC_ISO_L2[n]
Correction value memory for the geometry of tool length 2 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L2W</name>
<brief>ISO3 tool length 2 wear</brief>
<description>$TC_ISO_L2W[n]
Correction value memory for the wear of tool length 2 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L3</name>
<brief>ISO3 tool length 3 offset</brief>
<description>$TC_ISO_L3[n]
Correction value memory for the geometry of tool length 3 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_L3W</name>
<brief>ISO3 tool length 3 wear</brief>
<description>$TC_ISO_L3W[n]
Correction value memory for the wear of tool length 3 in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_R</name>
<brief>ISO3 tool radius compensation</brief>
<description>$TC_ISO_R[n]
Correction value memory for the geometry of the tool radius in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="DOUBLE" dim="1">
<name>$TC_ISO_RW</name>
<brief>ISO3 tool radius wear</brief>
<description>$TC_ISO_RW[n]
Correction value memory for the wear of the tool radius in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>

<parameter type="INT" dim="1">
<name>$TC_ISO_Q</name>
<brief>ISO3 cutting edge position</brief>
<description>$TC_ISO_Q[n]
Cutting edge position in ISO3 mode.
Is available only if ISO3 mode is active.
</description>
</parameter>
</info>
