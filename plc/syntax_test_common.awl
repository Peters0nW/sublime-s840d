// SYNTAX TEST "AWL.sublime-syntax"

// ==================================================
//  common
//  Performance: 0.9ms
// ==================================================

///////////////////////////////////////////////////////////////////////////////
// datablocks                                                                //
///////////////////////////////////////////////////////////////////////////////

  DATA_BLOCK "name" // comment
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^^^ keyword.control.datablock.begin
//           ^ punctuation.definition.string.begin
//           ^^^^^^ string.quoted.double
//            ^^^^ entity.name.struct.db
//                  ^^ punctuation.definition.comment.begin
//                  ^^^^^^^^^^ comment.line.double-slash
   TITLE =the datablock description
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^ meta.mapping.key - meta.mapping.value
//        ^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^^^^^^^^^^^^^^^^^ string.unquoted
   { S7_language illegal := '7(1) Deutsch (Deutschland)  19.01.2014  10:33:55' }
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.datablock.header
// ^ meta.mapping - meta.mapping.key - meta.mapping.value
//  ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key - meta.mapping.value
//                       ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
//                                                                             ^ meta.mapping - meta.mapping.key - meta.mapping.value
// ^ punctuation.section.mapping.begin
//   ^^^^^^^^^^^ entity.other.attribute-name.annotation-attribute
//               ^^^^^^^ invalid.illegal.separator-expected
//                       ^^ punctuation.separator.key-value
//                                                                             ^ punctuation.section.mapping.end
   VERSION : 1.0
// ^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^^^ meta.mapping.key - meta.mapping.value
//          ^^^^ meta.mapping.value
// ^^^^^^^ entity.other.attribute-name
//         ^ punctuation.separator.key-value
//           ^ constant.numeric.float.version.major
//            ^ punctuation.separator.decimal.version
//             ^ constant.numeric.float.version.minor
   AUTHOR : name
// ^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   FAMILY : name
// ^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   NAME : name
// ^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^ meta.mapping.key - meta.mapping.value
//       ^^^^^ meta.mapping.value
// ^^^^ entity.other.attribute-name
//      ^ punctuation.separator.key-value
//        ^^^^ string.unquoted
   ILLEGAL : unknown
// ^^^^^^^^^^^^^^^^^ meta.block.datablock.header
// ^^^^^^^ invalid.illegal
//         ^ invalid.illegal
//           ^^^^^^^ invalid.illegal

   "UDT_TypeName"
//<- meta.block.datablock.header
// ^^^^^^^^^^^^^^ meta.block.datablock.header
// ^ punctuation.definition.string.begin
// ^^^^^^^^^^^^^^ string.quoted.double
//  ^^^^^^^^^^^^ variable.other.symbol
//              ^ punctuation.definition.string.end
   BEGIN illegal // comment
//<- meta.block.datablock.header
//^ meta.block.datablock.header - meta.block.datablock.body
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.datablock.body - meta.block.datablock.header
// ^^^^^ keyword.control.begin
//       ^^^^^^^ invalid.illegal
//               ^^ punctuation.definition.comment.begin
//               ^^^^^^^^^^ comment.line.double-slash

   VAR[0].child[ 0 ].attr := W#16#0 ;  // comment
//<- meta.block.datablock.body
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.datablock.body
// ^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key - meta.mapping.value
//                        ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                          ^^^^^^^^ meta.mapping.value - meta.mapping.key
//                                  ^ meta.mapping - meta.mapping.key - meta.mapping.value
//    ^^^ meta.brackets
//             ^^^^^ meta.brackets
// ^^^ variable.other.local
//    ^ punctuation.section.brackets.begin
//     ^ constant.numeric.integer
//      ^ punctuation.section.brackets.end
//       ^ punctuation.accessor.dot
//        ^^^^^ variable.other.member
//             ^ punctuation.section.brackets.begin
//               ^ constant.numeric.integer
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.accessor.dot
//                   ^^^^ variable.other.member
//                        ^^ punctuation.separator.key-value
//                           ^^^^^^ constant.numeric.hex.word
   test := W#16 ;
// ^^^^ variable.other.local
//      ^^ punctuation.separator.key-value
//         ^^^^ invalid.illegal.value
//              ^ punctuation.separator.mapping.pair
   incomplete
   next_is_valid
// ^^^^^^^^^^^^^ variable.other.local

   END_DATA_BLOCK
//<- meta.block.datablock.body
//^^^^^^^^^^^^^^^ meta.block.datablock.body
// ^^^^^^^^^^^^^^ keyword.control.datablock.end

///////////////////////////////////////////////////////////////////////////////
// functions                                                                 //
///////////////////////////////////////////////////////////////////////////////

   FUNCTION "name" : INT  // comment
// ^^^^^^^^ meta.function - meta.function.name
//         ^^^^^^^^^ meta.function.name - meta.function.return-type
//                  ^^^^ meta.function.return-type
// ^^^^^^^^ keyword.control.function.begin
//          ^ punctuation.definition.string.begin
//          ^^^^^^ string.quoted.double
//           ^^^^ entity.name.function.fc
//                 ^ punctuation.separator.mapping.pair
//                   ^^^ storage.type.integer
//                        ^^ punctuation.definition.comment.begin
//                        ^^^^^^^^^^ comment.line.double-slash
   TITLE =the function description
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters
// ^^^^^^^ meta.mapping.key - meta.mapping.value
//        ^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^^^^^^^^^^^^^^^^ string.unquoted
   { S7_language illegal := '7(1) Deutsch (Deutschland)  19.01.2014  10:33:55' }
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters
// ^ meta.mapping - meta.mapping.key - meta.mapping.value
//  ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key - meta.mapping.value
//                       ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
//                                                                             ^ meta.mapping - meta.mapping.key - meta.mapping.value
// ^ punctuation.section.mapping.begin
//   ^^^^^^^^^^^ entity.other.attribute-name.annotation-attribute
//               ^^^^^^^ invalid.illegal.separator-expected
//                       ^^ punctuation.separator.key-value
//                                                                             ^ punctuation.section.mapping.end
   VERSION : 1.0
// ^^^^^^^^^^^^^ meta.function.parameters
// ^^^^^^^^^ meta.mapping.key - meta.mapping.value
//          ^^^^ meta.mapping.value
// ^^^^^^^ entity.other.attribute-name
//         ^ punctuation.separator.key-value
//           ^ constant.numeric.float.version.major
//            ^ punctuation.separator.decimal.version
//             ^ constant.numeric.float.version.minor
   AUTHOR : name
// ^^^^^^^^^^^^^ meta.function.parameters
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   FAMILY : name
// ^^^^^^^^^^^^^ meta.function.parameters
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   NAME : name
// ^^^^^^^^^^^ meta.function.parameters
// ^^^^^^ meta.mapping.key - meta.mapping.value
//       ^^^^^ meta.mapping.value
// ^^^^ entity.other.attribute-name
//      ^ punctuation.separator.key-value
//        ^^^^ string.unquoted
   ILLEGAL : unknown
// ^^^^^^^^^^^^^^^^^ meta.function.parameters
// ^^^^^^^ invalid.illegal
//         ^ invalid.illegal
//           ^^^^^^^ invalid.illegal

   VAR_INPUT
// <- meta.function.parameters - meta.block
// ^^^^^^^^^ meta.function.parameters meta.block.var-input
// ^^^^^^^^^ keyword.control.var-input.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
// ^^^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.dword
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-input meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
   END_VAR
// <- meta.function.parameters meta.block.var-input
// ^^^^^^^ meta.function.parameters meta.block.var-input
// ^^^^^^^ keyword.control.end-var

   VAR_OUTPUT
// <- meta.function.parameters - meta.block
// ^^^^^^^^^^ meta.function.parameters meta.block.var-output
// ^^^^^^^^^^ keyword.control.var-output.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
// ^^^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.dword
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-output meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
   END_VAR
// <- meta.function.parameters meta.block.var-output
// ^^^^^^^ meta.function.parameters meta.block.var-output
// ^^^^^^^ keyword.control.end-var

   VAR_IN_OUT
// <- meta.function.parameters - meta.block
// ^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
// ^^^^^^^^^^ keyword.control.var-in-out.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
// ^^^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.dword
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-in-out meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
   END_VAR
// <- meta.function.parameters meta.block.var-in-out
// ^^^^^^^ meta.function.parameters meta.block.var-in-out
// ^^^^^^^ keyword.control.end-var

   VAR_TEMP
// <- meta.function.parameters - meta.block
// ^^^^^^^^ meta.function.parameters meta.block.var-temp
// ^^^^^^^^ keyword.control.var-temp.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.key-value
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
// ^^^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.dword
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.key-value
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ constant.numeric.integer
//                   ^^ punctuation.separator.sequence
//                      ^^ constant.numeric.integer
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.key-value
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.key-value
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.function.parameters meta.block.var-temp meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.line

   END_VAR
// <- meta.function.parameters meta.block.var-temp
// ^^^^^^^ meta.function.parameters meta.block.var-temp
// ^^^^^^^ keyword.control.end-var

   VAR
// ^^^ meta.function.parameters invalid.illegal
   END_VAR
// ^^^^^^^ meta.function.parameters invalid.illegal

   BEGIN
// <- meta.function.parameters - meta.function.block
//^ meta.function.parameters - meta.function.block
// ^^^^^ meta.function.block - meta.function.parameters
// ^^^^^ keyword.control.begin

   NETWORK //network 1
// <- meta.function.block
// ^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
// ^^^^^^^ keyword.control.network
   TITLE =CALL test
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
// ^^^^^^^ meta.mapping.key
//        ^^^^^^^^^ meta.mapping.value
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^ string.unquoted
///////////////////////////////////////////////////////////////////////////////
// basic operations                                                          //
///////////////////////////////////////////////////////////////////////////////
      BLD  1; // comment
//    ^^^ keyword.operator.nop
//         ^ constant.numeric.integer
//          ^ punctuation.terminator.line
      NOP  0; // comment
//    ^^^ keyword.operator.nop
//         ^ constant.numeric.integer
//          ^ punctuation.terminator.line



///////////////////////////////////////////////////////////////////////////////
// load values into akku1                                                    //
///////////////////////////////////////////////////////////////////////////////
      L    MB10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    MW10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    MD10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    M10.0;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ invalid.illegal
//              ^ punctuation.terminator.line
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L    LB10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    LW10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    LD10;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.line
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    L10.0;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ invalid.illegal
//              ^ punctuation.terminator.line
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBB20;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.datablock
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.line
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBW20;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.datablock
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.line
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBD20;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.datablock
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.line
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBX20.0;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^ invalid.illegal
//                      ^ punctuation.terminator.line
//                         ^^ punctuation.definition.comment.begin
//                         ^^^^^^^^^^ comment.line.double-slash
      L    "datablock".struct[ 4 ].value;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.string.begin
//         ^^^^^^^^^^^ string.quoted.double
//          ^^^^^^^^^ variable.other.symbol
//                   ^ punctuation.definition.string.end
//                    ^ punctuation.accessor.dot
//                     ^^^^^^ variable.other.member
//                           ^ punctuation.section.brackets.begin
//                           ^^^^^ meta.brackets
//                             ^ constant.numeric.integer
//                               ^ punctuation.section.brackets.end
//                                ^ punctuation.accessor.dot
//                                 ^^^^^ variable.other.member
//                                      ^ punctuation.terminator.line
//                                         ^^ punctuation.definition.comment.begin
//                                         ^^^^^^^^^^ comment.line.double-slash
      L    "datablock".struct.value;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.string.begin
//         ^^^^^^^^^^^ string.quoted.double
//          ^^^^^^^^^ variable.other.symbol
//                   ^ punctuation.definition.string.end
//                    ^ punctuation.accessor.dot
//                     ^^^^^^ variable.other.member
//                           ^ punctuation.accessor.dot
//                            ^^^^^ variable.other.member
//                                 ^ punctuation.terminator.line
//                                    ^^ punctuation.definition.comment.begin
//                                    ^^^^^^^^^^ comment.line.double-slash
      L    #local[1].array[0].value[ 10 ];  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.variable.begin
//          ^^^^^ variable.other.local
//               ^ punctuation.section.brackets.begin
//               ^^^ meta.brackets
//                ^ constant.numeric.integer
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.accessor.dot
//                   ^^^^^ variable.other.member
//                        ^ punctuation.section.brackets.begin
//                        ^^^ meta.brackets
//                         ^ constant.numeric.integer
//                          ^ punctuation.section.brackets.end
//                           ^ punctuation.accessor.dot
//                            ^^^^^ variable.other.member
//                                 ^ punctuation.section.brackets.begin
//                                 ^^^^^^ meta.brackets
//                                   ^^ constant.numeric.integer
//                                      ^ punctuation.section.brackets.end
//                                       ^ punctuation.terminator.line
//                                          ^^ punctuation.definition.comment.begin
//                                          ^^^^^^^^^^ comment.line.double-slash
      L    P##local;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^ constant.language.pointer
//           ^ punctuation.definition.variable.begin
//            ^^^^^ variable.other.local
//                 ^ punctuation.terminator.line
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    P#120.4;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^ constant.language.pointer
//                ^ punctuation.terminator.line
//                   ^^ punctuation.definition.comment.begin
//                   ^^^^^^^^^^ comment.line.double-slash
      L    P#DBX120.4;  // comment
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^ constant.language.pointer
//                   ^ punctuation.terminator.line
//                      ^^ punctuation.definition.comment.begin
//                      ^^^^^^^^^^ comment.line.double-slash
      L    S5T#2H_30M_58S_200MS
//         ^^^^^^^^^^^^^^^^^^^^ constant.numeric.s5time
//             ^^ constant.numeric.s5time.hour.s7.awl
//               ^ punctuation.separator.sequence.s5time.s7.awl
//                ^^^ constant.numeric.s5time.minute.s7.awl
//                   ^ punctuation.separator.sequence.s5time.s7.awl
//                    ^^^ constant.numeric.s5time.second.s7.awl
//                       ^ punctuation.separator.sequence.s5time.s7.awl
//                        ^^^^^ constant.numeric.s5time.millisecond.s7.awl
      L    S5T#2H_70M_58S_200MS
//         ^^^^^^^^^^^^^^^^^^^^ constant.numeric.s5time
//                ^^^ invalid.illegal.s5time

///////////////////////////////////////////////////////////////////////////////
// function calls                                                            //
///////////////////////////////////////////////////////////////////////////////
      CALL "ALARM_SQ" (
// <- meta.function.block meta.block.network
// ^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network
//    ^^^^ meta.function-call - meta.function-call.name - meta.function-call.arguments
//        ^^^^^^^^^^^^ meta.function-call.name - meta.function-call.arguments
//                    ^ meta.function-call.arguments - meta.function-call.name
//    ^^^^ keyword.control.call
//         ^ punctuation.definition.string.begin
//         ^^^^^^^^^^ string.quoted.double
//                  ^ punctuation.definition.string.end
//                    ^ punctuation.section.parens.begin
           SIG     := "msgs".A700127,
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
//                                  ^ meta.mapping
//         ^^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^ punctuation.definition.string.begin
//                    ^^^^^^ string.quoted.double
//                     ^^^^ variable.other.symbol
//                         ^ punctuation.definition.string.end
//                          ^ punctuation.accessor
//                           ^^^^^^^ variable.other.member
//                                  ^ punctuation.separator.mapping.pair
           ID      := W#16#EEEE,
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^^^^^ meta.mapping.value - meta.mapping.key
//                             ^ meta.mapping
//         ^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^^^^^^^^^ constant.numeric.hex.word
//                             ^ punctuation.separator.mapping.pair
           EV_ID   := DW#16#AAEDF,
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
//                               ^ meta.mapping
//         ^^^^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^^^^^^^^^^^ constant.numeric.hex.dword
//                               ^ punctuation.separator.mapping.pair
           ANY     := P# DB20.DBX40.0 WORD 10,
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
//                                           ^ meta.mapping
//         ^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^^^^^^^^^^^^^^^^^^^^^^^ constant.language.any-pointer
           SD      := #data,
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^ meta.mapping.value - meta.mapping.key
//                         ^ meta.mapping
//         ^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^ punctuation.definition.variable.begin
//                     ^^^^ variable.other.local
//                         ^ punctuation.separator.mapping.pair
           RET_VAL := MW200);
// <- meta.function.block meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.block meta.block.network meta.function-call.arguments
//         ^^^^^^^^  meta.mapping.key
//                 ^^ meta.mapping - meta.mapping.key - meta.mapping.value
//                   ^^^^^^ meta.mapping.value - meta.mapping.key
//         ^^^^^^^ variable.parameter
//                 ^^ punctuation.separator.key-value
//                    ^^^^^ variable.language.address
//                         ^ punctuation.section.parens.end
//                          ^ punctuation.terminator.line

   END_FUNCTION
// ^^^^^^^^^^^^ meta.function.block
// ^^^^^^^^^^^^ keyword.control.function.end
